{"version":3,"sources":["components/Spinner.js","components/Recharts/XAxisTick.js","components/paywidget.js","containers/reports/Export.js","containers/reports/ExportPaymentPlan.js","containers/reports/WeeklyCashFlowChart.js","containers/reports/ReportNotes.js","containers/reports/QuickReviewSidebar.js","containers/reports/reports.js"],"names":["CustomSpinner","isfullscreen","className","animation","role","XAxisTick","value","payload","rest","verticalAnchor","visibleTicksCount","style","fontSize","dy","PayWidget","status","total_amount_due","invoice_amount","recommendation","supplier","customer","currency","insights","expected_date","type","date_closed","redirectURL","window","location","origin","get","classNames","cx","onClick","open","title","getShortNumber","getFormattedDate","dataURItoBlob","dataURI","array","binary","i","atob","split","mimeType","match","length","push","charCodeAt","Blob","Uint8Array","Export","state","showExport","shareReport","emailTo","emailBody","searchList","usersList","isGeneratingReport","getUsersList","instanceWithRetry","then","response","setState","data","result","map","d","name","email","catch","e","handleAPIError","toggleExport","tableToExcel","filename","moment","format","workbook","XLSX","table_to_book","document","getElementById","excelBuffer","bookType","FileSaver","onEmailSave","fileData","from","TokenManager","getUserEmail","message","postData","to","toString","subject","bodyFormData","FormData","set","JSON","stringify","append","instanceMultipart","post","Toaster","toggleShare","generatePDF","reportFrequency","share","doc","jsPDF","click","html2canvas","canvas","text","addImage","toDataURL","internal","pageSize","width","addPage","cellCount","rows","cells","tableObject","html","theme","margin","styles","halign","columnStyles","0","fillColor","rowPageBreak","headStyles","valign","autoTable","colcss","Math","ceil","cls","classList","add","remove","output","save","onChange","key","reset","onClickAway","this","props","DropdownButton","id","Chip","size","label","onDelete","filter","variant","Autocomplete","suggestions","getSelected","item","includes","concat","search","toLowerCase","placeholder","isLoading","target","href","aria-labelledby","float","marginRight","cursor","React","Component","ExportCSV","k","flat","exportData","x","is_payment_plan","installments","csvData","wb","Sheets","json_to_sheet","SheetNames","ExportXLSX","CustomToolTip","active","Example","height","top","right","bottom","left","barCategoryGap","stackOffset","dataKey","tick","tickFormatter","domain","content","stackId","fill","stroke","dot","PureComponent","ReportNotes","page","notes","hasMore","editNote","isFetching","debounceMethod","debounce","loadMore","bind","getNotes","lazyload","addNote","note","showEditor","setNote","updateNote","isUpdated","put","deleteNote","delete","listElm","addEventListener","scrollTop","clientHeight","scrollHeight","removeEventListener","prevData","showAddNoteEditor","currentUid","Number","getUserId","If","condition","editor","ClassicEditor","config","toolbar","event","getData","disabled","author_data","noop","date","stopPropagation","parse","trim","QuickReviewSidebar","nextPreviousDate","action","operation","currentPage","startDate","endDate","endOf","handleExpand","expand","handleSideBarExpand","selectedtab","isPrevious","diff","console","log","OverlayTrigger","placement","overlay","Tooltip","aria-hidden","class","element","connect","formatNumber","num","abs","replace","generateDates","count","actuals","day","dateArray","forecastArray","forecount","datemodified","weekday","isSame","Date","isAfter","unshift","subtract","generateTableHeadings","actualsCount","tempArray","Array","colorGreyCell","existingClass","flag","initState","modal","startDay","itemFirst","monthCount","dummyArray","dateRanges","cashInTotal","bankbalance","cashOutTotal","payrollTotal","dummyArrayItem","isTotalLoading","arInvoiceTotal","apInvoiceTotal","cashInFlowItem","cashinZeroItem","forecastConfig","sidebarExpanded","cashOutFlowItem","cashoutZeroItem","editCashOutItem","paymentPlanTotal","editCashFlowItem","addCashInflowItem","addCashOutFlowItem","paymentPlanDetails","orderBacklogTotal","vendorCategoryList","bankbalanceoriginal","iscashinDataLoading","fetchingPaymentPlan","netOperatingCashFlow","isBankBalanceLoading","iscashoutDataLoading","vendorCategoryTotals","vendorCategoryZeroItem","customerCategoryList","endingCashBalanceTotal","customerCategoryTotals","customerCategoryZeroItem","vendorCategoryOtherTotal","customerCategoryOtherTotal","showCashInZeroItem","showCashOutZeroItem","payplanmodalkey","Reports","handleFixedTable","mainTable","graphElement","mainTableContainer","fixedHeaderTable","scroll","scrollLeft","getStartDate","startOf","getReportConfig","report_interval","report_num_months","report_num_weeks","report_num_actuals_months","report_num_actuals_weeks","amount","report_start_day_of_week","refreshData","getScrollTableWidth","getPaymentPlanDetails","URL","selectedWeek","openModalIndex","Installments","y","plan_id","uniqBy","Promise","all","sub_responses","sortBy","supplierid","responses","payplans","index","partialpays","newpartialpays","forEach","plan","ins","newdata","generateExportStylesheet","createElement","innerHTML","offset1","offset2","head","appendChild","getVendorCategoryData","category","allPromises","res","total","round","categoryTotal","reduce","r","a","b","getVendorCategory","is_selected","getCustomerCategoryData","getCustomerCategory","getItemData","description","obj","items","onSubmitItem","preventClose","apiPoint","records","getCashInFlow","calculateCashInTotal","getCashOutFlow","calculateCashOutTotal","addNewItem","onInput","onSubmitEditedData","reqObj","ids","apiPointId","reqObject","editLineItem","cancelFlag","find","Fragment","defaultValue","onBlur","getBankBalance","getARInvoiceTotal","getPaymentPlanTotal","getOrderBacklogTotal","getAPInvoiceTotal","getPayRollData","allData","convertedData","updateData","position","indexOf","cashZero","line","splice","n","bankbalanceUpdated","dataToUpdate","itemCount","desc","uniq","updatedData","temp","j","deleteRecords","setconfirmationboxData","msg","onSave","resetconfirmationboxData","closeEditMode","preventDefault","setModal","openDetailsPage","other","filters","dateType","payment_plan","api_sort_by","api_sort_order","filterObject","localStorage","setItem","removeAttribute","mainReportWrapper","clientWidth","reportTableWrapper","querySelector","renderMoreLessRow","storageChange","handleScroll","body","scrollTo","inputNumbers","querySelectorAll","invalidChars","newValue","updatedState","removeItem","cashInMain","cashOutMain","planTableColumns","Header","accessor","Cell","maxWidth","getFAWC","modalRows","Modal","show","onHide","closeButton","Body","Nav","activeKey","onSelect","Item","Link","eventKey","noDataText","minRows","resizable","showPagination","getTrProps","column","original","invoices","columns","display","dt","c","data-id","arr","inflow","outflow","nonOpDisbursement","endingCashBalance","loading","should_navigate","allowMultipleExpanded","allowZeroExpanded","customer_category_id","color","ClickAwayListener","vendor_category_id","navigationExpanded","navigation","openleftnav"],"mappings":"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","file":"static/js/16.fb1aec40.chunk.js","sourcesContent":["import React from \"react\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nexport const CustomSpinner = ({ isfullscreen }) => {\n  return (\n    <div className={`card-body w-100 text-center pt-5 mt-5 ${isfullscreen && \"vh-100\"}`}>\n      <Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    </div>\n  );\n};\n\nexport default CustomSpinner;\n","import React from 'react';\n\nconst XAxisTick = ({ payload: { value }, verticalAnchor, visibleTicksCount, ...rest }) => (\n  <text {...rest} style={{ fontSize: \"0.8rem\" }} className=\"bar-chart-tick\" dy={12}>\n    {value}\n  </text>\n);\n\nexport default XAxisTick;\n","import get from \"lodash/get\";\nimport React from \"react\";\nimport cx from 'classnames';\n// import CONST from \"./../constants\";\nimport { getFormattedDate } from \"utils/dates\";\nimport { getShortNumber } from \"utils\";\n\n\nexport const PayWidget = ({ status= '', total_amount_due = 0, invoice_amount = 0, recommendation = \"\", supplier, customer, currency = \"USD\", insights = \"\", expected_date = \"\", type = \"\", date_closed }) => {\n  const redirectURL = status === 'all' ? `${window.location.origin}/${type}/${type === 'customers' ? get(customer, \"id\", \"\") : get(supplier, \"id\", \"\")}#reports` : '';\n  const classNames = cx('card', { 'critical': insights === \"PAY_IMMEDIATELY\" }, { 'average': insights === \"INVALID_DUE_DATE\" }, {'cursor-pointer': status === 'all' });\n  return (\n    <div\n      className={classNames}\n      onClick={() => status === 'all' ? window.open(redirectURL,\"_blank\") : {}}\n    >\n      <p className=\"mData\">\n        <span className=\"company_name\" title={get(supplier, \"name\", \"\") || get(customer, \"name\", \"\")}>{get(supplier, \"name\", \"\") || get(customer, \"name\", \"\")}</span>\n        <span className=\"pull-right\">{!status ? getShortNumber(total_amount_due) : getShortNumber(invoice_amount)}</span>\n      </p>\n      <p className=\"smData\">{insights === \"PAY_IMMEDIATELY\" ? \"Pay Immediately\" : getFormattedDate(date_closed || recommendation || expected_date)}</p>\n    </div>\n  );\n};\n\nexport default PayWidget;\n","import React from 'react';\nimport moment from \"moment\";\nimport * as XLSX from \"xlsx\";\nimport * as FileSaver from \"file-saver\";\nimport html2canvas from 'html2canvas';\nimport ClickAwayListener from \"components/ClickAwayListener\";\nimport { DropdownButton } from 'react-bootstrap';\nimport jsPDF from 'jspdf'\nimport Autocomplete from \"components/Autocomplete\";\nimport Chip from '@material-ui/core/Chip';\nimport { instanceWithRetry, instanceMultipart } from \"../../actions/axiosInstance\";\nimport Toaster from \"components/Toaster\";\nimport TokenManager from \"utils/TokenManager\";\nimport { handleAPIError } from \"handlers/setters\";\nimport 'jspdf-autotable'\n\nconst dataURItoBlob = (dataURI) => {\n    var array, binary, i;\n    binary = atob(dataURI.split(\",\")[1]);\n    var mimeType = dataURI.match(/(:)([a-z\\/]+)(;)/)[2]\n    array = [];\n    i = 0;\n    while (i < binary.length) {\n        array.push(binary.charCodeAt(i));\n        i++;\n    }\n    return new Blob([new Uint8Array(array)], {\n        type: mimeType\n    });\n};\n\nexport default class Export extends React.Component {\n    state = {\n        showExport: false,\n        shareReport: false,\n        emailTo: [],\n        emailBody: \"\",\n        searchList: [],\n        usersList: [],\n        isGeneratingReport: true,\n    };\n\n    componentDidMount(){\n        this.getUsersList();\n    }\n\n    getUsersList = () => {\n        instanceWithRetry\n        .get('client/user')\n        .then(response => {\n            this.setState({\n                usersList: response.data.result.map(d => ({ name: d.name || d.email, email: d.email }))\n            })\n        }).catch(e => handleAPIError(e));\n    }\n\n    toggleExport = (showExport) => {\n        this.setState({\n            showExport,\n        });\n    }\n\n    tableToExcel = () => {\n        const filename = `reports${moment().format(\"MMMM Do YYYY-h:mm:ss-a\")}.xlsx`;\n        const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n        let workbook = XLSX.utils.table_to_book(document.getElementById('exportexceltable'));\n        const excelBuffer = XLSX.write(workbook, { bookType: \"xlsx\", type: \"array\" });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, filename);\n        this.setState({ showExport: false });\n    }\n\n    onEmailSave = (fileData) => {\n        if(fileData) {\n            const {\n                emailBody,\n                emailTo,\n            } = this.state;\n            const from = TokenManager.getUserEmail();\n            const message = `<p>${from} shared a Payference report with you.</p><p>${emailBody}</p> <br/> <a style=\"text-decoration:none\" href=\"${window.location.origin}/reports\" target=\"_blank\"><span style=\"padding: 15px;background-color: #007bff; color: #ffffff;border-radius: 5px;display: inline-block; font-size:14px; line-height:16px;\">View Report</span></a><br/>`;\n            const postData = { from: 'reports@payference.com', to: emailTo.toString(), subject: 'Cashflow Report', message };\n            let bodyFormData = new FormData();\n            bodyFormData.set(\"metadata\", JSON.stringify(postData));\n            bodyFormData.append(\"files[]\", dataURItoBlob(fileData), `report-${moment().format('MM-DD-YYYY-hh-mm')}.pdf`);\n\n            instanceMultipart\n                .post('sendemail', bodyFormData)\n                .then(() => {\n                    Toaster(`Report shared`, \"success\");\n                    this.toggleShare(false);\n                })\n                .catch(e => handleAPIError(e));\n        }\n    }\n\n    generatePDF = (reportFrequency, share=false) => {\n        const doc = new jsPDF()\n        this.setState({ isGeneratingReport: true });\n        if (share) {\n            Toaster(`Sharing your report, please wait.`, \"success\");\n            document.getElementById('share-report').click();\n        }\n        html2canvas(document.getElementById('exportgraph')).then(canvas => {\n            doc.text(10, 10, `${reportFrequency === 'weekly' ? 'Weekly' : 'Monthly'} Cash Flow As of ${moment().format(\"MMM DD, YYYY\")}`)\n            doc.addImage(canvas.toDataURL(), 'JPEG', 5, 20, (doc.internal.pageSize.width - 10), 100);\n            doc.addPage();\n            const cellCount = document.getElementById('exportexceltable').rows[0].cells.length;\n            const tableObject = {\n                html: '#exportexceltable',\n                theme: 'grid',\n                margin: 5,\n                styles: { fontSize: 7, halign: 'right' },\n                columnStyles: { 0: { halign: 'left' }, [reportFrequency === 'weekly' ? 5 : 2]: { fillColor: [236, 236, 236] }},\n                rowPageBreak: 'avoid',\n                headStyles: {\n                    valign: 'middle',\n                    halign: 'center'\n                },\n            };\n            if(cellCount <= 10) {\n                doc.autoTable({ ...tableObject });\n            } else {\n                const colcss = Math.ceil(cellCount/10);\n                for(let i = 0; i < colcss; i++) {\n                    const cls = `hide${i}`;\n                    document.getElementById('exportexceltable').classList.add(cls);\n                    if(i > 0) {\n                        tableObject.columnStyles = {0: { halign: 'left' }};\n                        doc.addPage();\n                    }\n                    doc.autoTable({ ...tableObject });\n                    document.getElementById('exportexceltable').classList.remove(cls);\n                }\n            }\n            if(share) {\n                this.onEmailSave(doc.output('datauristring'));\n            } else {\n                doc.save(`report-${moment().format('MM-DD-YYYY-hh-mm')}.pdf`);\n                this.setState({ showExport: false });\n            }\n\n        });\n    }\n\n    onChange = (key, value) => this.setState({ [key]: value });\n\n    toggleShare = (shareReport) => this.setState({ shareReport}, () => {\n        if(!this.state.shareReport) {\n            this.setState({\n                emailTo: []\n            })\n            document.getElementById('share-form') && document.getElementById('share-form').reset();\n        }\n    });\n\n    onClickAway = () => {\n        this.toggleShare(false);\n        this.toggleExport(false);\n    };\n\n    render() {\n        const {\n            emailTo,\n            usersList,\n            showExport,\n            searchList,\n            shareReport\n        } = this.state;\n\n        const {\n            reportFrequency,\n        } = this.props;\n        return(\n            <ClickAwayListener onClickAway={this.onClickAway}>\n                <div onClick={() => this.toggleShare(true)}>\n                        <DropdownButton\n                            id=\"share-report\"\n                            className=\"float-right ml-2\"\n                            title=\"Share\"\n                        >\n                            <div style={{ width: '400px' }}>\n                                <div className=\"card-body\">\n                                    <form id=\"share-form\">\n                                        <div id=\"email-list\" className=\"mb-2 p-2\">\n                                            {\n                                                emailTo.length ?\n                                                    <div className=\"mb-1\">\n                                                        {\n                                                            emailTo.map(d => (\n                                                                <span className=\"mr-1 mb-1\">\n                                                                    <Chip\n                                                                        size=\"small\"\n                                                                        label={d}\n                                                                        onDelete={() => this.setState({ emailTo: emailTo.filter(email => email !== d) })}\n                                                                        variant=\"outlined\"\n                                                                    />\n                                                                </span>\n                                                            ))\n                                                        }\n                                                    </div> : null\n                                            }\n                                            <Autocomplete\n                                                key={shareReport}\n                                                suggestions={searchList}\n                                                getSelected={(item) => this.setState({\n                                                    emailTo: emailTo.length ? !emailTo.includes(item.email) ? emailTo.concat(item.email) : emailTo : [item.email],\n                                                })}\n                                                search={(text) => this.setState({\n                                                    searchList: usersList.filter(d => ((d.email).toLowerCase().includes(text.toLowerCase()) || (d.name).toLowerCase().includes(text.toLowerCase())))\n                                                })}\n                                                placeholder=\"Enter email or name\"\n                                                isLoading={false}\n                                            />\n                                        </div>\n                                    <textarea id=\"message\" className=\"form-control\" placeholder=\"Add a message\" onChange={(e) => this.onChange(\"emailBody\", e.target.value)} />\n                                    <button type=\"button\" id=\"send-message\" onClick={() => this.generatePDF(reportFrequency, true)} className=\"btn mt-2 btn-primary float-right\">Send</button>\n                                    </form>\n                                </div>\n                            </div>\n                        </DropdownButton>\n                </div>\n                <div className=\"dropdown float-right\">\n                    <span\n                        id=\"export\"\n                        className=\"btn dropdown-toggle btn-primary cursor-pointer \"\n                        href=\"#\"\n                        role=\"button\"\n                        onClick={() => this.toggleExport(true)}\n                    >\n                        Export\n                    </span>\n                    {\n                        showExport ?\n                            <div\n                                className={`dropdown-menu dropdown-menu-right cursor-pointer payexpdroplist show`}\n                                aria-labelledby=\"dropdownMenuLink\"\n                                id=\"\"\n                            >\n                                <span onClick={() => this.generatePDF(reportFrequency)} style={{ fontSize: 12, float: \"right\", marginRight: \"10px\", cursor: \"pointer\" }}>\n                                    Export PDF\n                                </span><br/>\n                                <span\n                                    style={{ fontSize: 12, float: \"right\", marginRight: \"10px\", cursor: \"pointer\" }}\n                                    onClick={this.tableToExcel}\n                                >\n                                    Export Excel\n                                </span>\n                            </div>\n                        :null\n                    }\n                </div>\n            </ClickAwayListener>\n        )\n    }\n}\n","import React from 'react';\nimport moment from \"moment\";\nimport get from \"lodash/get\";\nimport * as XLSX from \"xlsx\";\nimport * as FileSaver from \"file-saver\";\nimport { CSVLink } from \"react-csv\";\nimport ClickAwayListener from \"components/ClickAwayListener\";\n\nconst ExportXLSX = csvData => {\n    const filename = `reports-payment-plan-${moment().format(\"MMMM Do YYYY-h:mm:ss-a\")}.xlsx`;\n    const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const ws = XLSX.utils.json_to_sheet(csvData);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, filename);\n};\nconst ExportCSV = (data) => {\n    if (!data.length) {\n        return [\n            {\n                \"Vendor\": \"\",\n                \"Date\": \"\",\n                \"Amount\": \"\",\n            }\n        ];\n    }\n    debugger;\n    const csvData = data.map(d => (get(d, \"installments\", []).map(k => ({\n        \"Vendor\": d['Vendor Name'],\n        \"Date\": k[1] && moment(k[1]).format(\"MM/DD/YYYY\"),\n        \"Amount\": k[2] && k[2],\n    })))).flat();\n    return csvData;\n}\n\nexport default class Export extends React.Component {\n    state = {\n        showExport: false,\n    };\n\n    toggleExport = (showExport) => {\n        this.setState({\n            showExport,\n        });\n    }\n\n    render() {\n        const {\n            showExport\n        } = this.state;\n\n        let exportData = [ ...get(this.props, \"exportData\", []).filter((x) => x.is_payment_plan) ];\n        get(this.props, \"exportData\", []).filter((x) => !x.is_payment_plan).length > 0 && (exportData = [\n            ...exportData,\n            {\n                \"Vendor Name\": \"\",\n                installments: [[null, null, null]]\n            },\n            {\n                \"Vendor Name\": \"Partial Payments\",\n                installments: [[null, null, null]]\n            },\n            ...get(this.props, \"exportData\", []).filter((x) => !x.is_payment_plan)\n        ]);\n\n        return (\n            <div className=\"dropdown text-right mb-2\">\n                <span\n                    className=\"btn dropdown-toggle btn-primary cursor-pointer \"\n                    href=\"#\"\n                    role=\"button\"\n                    onClick={() => this.toggleExport(true)}\n                >\n                    Export\n                </span>\n                {\n                    showExport ?\n                        <ClickAwayListener onClickAway={this.toggleExport}>\n                            <div\n                                className={`dropdown-menu dropdown-menu-right cursor-pointer payexpdroplist ${showExport ? 'show' : ''}`}\n                                aria-labelledby=\"dropdownMenuLink\"\n                                id=\"\"\n                                onClick={() => this.toggleExport(false)}\n                            >\n                                <CSVLink\n                                    data={ExportCSV(exportData)}\n                                    filename={`reports-payment-plan-${moment().format(\"MMMM Do YYYY-h:mm:ss-a\")}.csv`}\n                                >Export CSV</CSVLink>\n                                <span\n                                    style={{ fontSize: 12, float: \"right\", marginRight: \"10px\", cursor: \"pointer\" }}\n                                    onClick={() => ExportXLSX(ExportCSV(exportData))}\n                                >\n                                    Export Excel\n                                </span>\n                            </div>\n                        </ClickAwayListener>\n                        : null\n\n                }\n            </div>\n        )\n    }\n}\n","import React, { PureComponent } from \"react\";\nimport { ComposedChart, Line, Bar, XAxis, YAxis, ResponsiveContainer, Tooltip, Legend } from \"recharts\";\nimport { getShortNumber } from \"utils\";\nimport XAxisTick from \"components/Recharts/XAxisTick\";\n\nconst CustomToolTip = props => {\n  const { active, payload, label } = props;\n  if (!active || !payload) {\n    return null;\n  }\n  return (\n    <div className=\"custom-tooltip bg-light p-3\">\n      <p>\n        <strong>{label}</strong>\n      </p>\n      {payload.map((item, i) => (\n        <p key={i}>\n          {item.name}: <strong>{typeof item.value === \"number\" ? getShortNumber(item.value) : item.value}</strong>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default class Example extends PureComponent {\n  render() {\n    const { data = [] } = this.props;\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <ComposedChart\n          height={400}\n          data={data}\n          margin={{\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20\n          }}\n          barCategoryGap=\"10\"\n          stackOffset=\"sign\"\n        >\n          <XAxis\n            dataKey=\"date\"\n            name=\"Date\"\n            tick={<XAxisTick />}\n          />\n          <YAxis tickFormatter={tick => getShortNumber(tick)} domain={[\"auto\", \"auto\"]} />\n          <Tooltip cursor={false} content={<CustomToolTip />} />\n          <Legend />\n          <Bar dataKey=\"inflow\" name=\"Inflow\" stackId=\"a\" fill=\"#7ACB36\" />\n          <Bar dataKey=\"outflow\" name=\"Outflow\" stackId=\"a\" fill=\"#ED3833\" />\n          <Line type=\"monotone\" name=\"Ending Cash Balance\" stackId=\"b\" dataKey=\"endingCashBalance\" stroke=\"#434348\" dot={true} />\n        </ComposedChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import React from 'react';\nimport cx from 'classnames';\nimport moment from \"moment\";\nimport debounce from \"lodash/debounce\";\nimport If from 'components/If';\nimport CKEditor from \"@ckeditor/ckeditor5-react\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport { instanceWithRetry } from \"actions/axiosInstance\";\nimport { handleAPIError } from \"handlers/setters\";\nimport CustomSpinner from \"components/Spinner\";\nimport parse from 'html-react-parser';\nimport Toaster from \"components/Toaster\";\nimport TokenManager from 'utils/TokenManager';\nimport noop from 'lodash/noop';\nimport ClickAwayListener from \"components/ClickAwayListener\";\n\nexport default class ReportNotes extends React.Component {\n    state = {\n        page: 1,\n        notes: [],\n        hasMore: true,\n        editNote: '',\n        isFetching: true,\n    };\n\n    componentDidMount() {\n        this.getNotes();\n    }\n\n    debounceMethod = debounce(this.loadMore.bind(this), 500);\n\n    componentDidUpdate() {\n        const listElm = document.getElementById('notes-infinite-scroll');\n        if (listElm) {\n            listElm.addEventListener('scroll', () => {\n                if (listElm.scrollTop + listElm.clientHeight >= (listElm.scrollHeight - 200)) {\n                    this.debounceMethod();\n                }\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        document.getElementById('notes-infinite-scroll').removeEventListener('scroll', () =>{});\n    }\n\n    getNotes = (lazyload) => {\n        const {\n            notes,\n        } = this.state;\n        instanceWithRetry\n            .get(`client/note?page=${this.state.page}`)\n            .then(response => {\n                this.setState({\n                    notes: lazyload ? notes.concat(response.data.result) : response.data.result,\n                    isFetching: false,\n                    hasMore: response.data.result.length >= 20\n                });\n            })\n            .catch(e => handleAPIError(e));\n    };\n\n    loadMore() {\n        const {\n            hasMore,\n            isFetching,\n        } = this.state;\n        if (!isFetching && hasMore) {\n            this.setState((prevData) => ({ page: prevData.page + 1, isFetching: true }), () => this.getNotes(true));\n        }\n    }\n\n    addNote = () => {\n        instanceWithRetry\n            .post(`client/note`, { note: this.props.note })\n            .then(() => {\n                this.setState({\n                    editNote: '',\n                }, () => { this.props.showEditor(false); this.props.setNote('') });\n                Toaster(\"Note added\", \"success\");\n                this.getNotes();\n            })\n            .catch(e => handleAPIError(e));\n    };\n\n    updateNote = (isUpdated) => {\n        const {\n            note\n        } = this.props;\n        if (isUpdated && note) {\n            instanceWithRetry\n                .put(`client/note?id=${this.state.editNote}`, { note })\n                .then(() => {\n                    this.props.setNote(null);\n                    this.setState({\n                        editNote: '',\n                    });\n                    this.getNotes();\n                    Toaster(\"Note updated\", \"success\");\n                })\n                .catch(e => handleAPIError(e));\n        } else {\n            this.setState({\n                editNote: '',\n            }, () => this.props.setNote(''));\n        }\n    };\n\n    deleteNote = (id) => {\n        instanceWithRetry\n            .delete(`client/note?id=${id}`)\n            .then(() => {\n                this.getNotes();\n                Toaster(\"Note deleted\", \"success\");\n            })\n            .catch(e => handleAPIError(e));\n    };\n\n    render() {\n        const {\n            notes,\n            editNote,\n            isFetching,\n        } = this.state;\n\n        const {\n            note,\n            showAddNoteEditor,\n        } = this.props;\n        const currentUid = Number(TokenManager.getUserId());\n        return (\n            <div className=\"report-notes-container\">\n                <If condition={!showAddNoteEditor && !editNote}>\n                    <i onClick={() => this.props.showEditor(true)} title=\"Add Note\" className=\"fa add-note-btn fa-plus cashinflowclick \" />\n                </If>\n                <If condition={showAddNoteEditor}>\n                    <div className=\"add-notes-wrapper custom-editor-style mt-2\">\n                        <CKEditor\n                            editor={ClassicEditor}\n                            data={!editNote ? note : ''}\n                            height={100}\n                            config={{\n                                toolbar: ['bold', 'italic', 'numberedList', 'bulletedList'],\n                                placeholder: \"Enter your notes here...\"\n                            }}\n                            onChange={(event, editor) => {\n                                this.props.setNote(editor.getData())\n                            }}\n                        />\n                        <div className=\"button-wrap\">\n                            <button disabled={!note} type=\"button\" onClick={this.addNote} className=\"btn btn-primary mt-2 mr-1\">Submit</button>\n                            <button type=\"button\" onClick={() => {this.props.showEditor(false); this.props.setNote('')}} className=\"btn btn-primary mt-2\">Cancel</button>\n                        </div>\n                    </div>\n                </If>\n                <div className=\"report-notes-wrapper mt-3\" id=\"notes-infinite-scroll\">\n                    {\n                        notes.map(d => (\n                            <div className=\"row m-0 mb-2 mr-1 note\" onClick={() => { currentUid === d.author_data.id && !note ? this.setState({ editNote: d.id }, () => { this.props.showEditor(false); this.props.setNote(d.note) }) : noop() } }>\n                                <div className=\"col-sm-12 text-secondary date\">\n                                    <i><i className=\"fa fa-calendar\" />{moment(d.date).format('MM/DD/YYYY')}</i>\n                                    {\n                                        currentUid === d.author_data.id ?\n                                            <button className=\"btn p-0 float-right\" title=\"Delete Note\"  onClick={(e) => {e.stopPropagation(); this.deleteNote(d.id)}}>\n                                                <i className=\"fa fa-trash-o\" />\n                                            </button> : null\n                                    }\n                                </div>\n                                <If condition={editNote !== d.id}>\n                                    <div className=\"px-0 mt-1 pb-2 col-md-12 note-text\">\n                                        {parse(d.note.trim())}\n                                        {\n                                            currentUid === d.author_data.id ?\n                                                <button className=\"btn p-0 float-right\"><i className=\" float-right fa fa-pencil\" /></button> : null\n                                        }\n                                    </div>\n                                </If>\n                                <If condition={editNote === d.id}>\n                                    <ClickAwayListener onClickAway={() => this.updateNote(note !== d.note)} className=\"textarea-wraper w-100 custom-editor-style mb-1\">\n                                        <CKEditor\n                                            editor={ClassicEditor}\n                                            data={d.note}\n                                            config={{\n                                                toolbar: ['bold', 'italic', 'numberedList', 'bulletedList'],\n                                                placeholder: \"Enter your notes here...\"\n                                            }}\n                                            onChange={(event, editor) => {\n                                                this.props.setNote(editor.getData())\n                                            }}\n                                        />\n                                    </ClickAwayListener>\n                                </If>\n                                <div className=\"px-0 col-sm-12 username text-secondary\"><i><i className=\"fa fa-user\" />{d.author_data.name}</i></div>\n                                {/* <div className={cx(\"option-overlay\", { \"d-none\": !!editNote || currentUid !== d.author_data.id })}>\n                                    <button title=\"Edit Note\" className=\"btn mr-1\" onClick={() => this.setState({ editNote: d.id, note: d.note })}><i className=\"fa fa-pencil\" /></button>\n                                    <button title=\"Delete Note\" className=\"btn\" onClick={() => this.deleteNote(d.id)}><i title=\"Delete Note\" onClick={() => this.deleteNote(d.id)} className=\"fa fa-trash-o\" /></button>\n                                </div> */}\n                            </div>\n                        ))\n                    }\n                    <If condition={isFetching}>\n                        <CustomSpinner />\n                    </If>\n                    <If condition={!isFetching && !notes.length}>\n                        <div className=\"px-0 pb-2 col-md-12 note-text\">No notes.</div>\n                    </If>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport If from 'components/If';\nimport moment from \"moment\";\nimport debounce from \"lodash/debounce\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { instanceWithRetry } from \"actions/axiosInstance\";\nimport { handleAPIError } from \"handlers/setters\";\nimport CustomSpinner from \"components/Spinner\";\nimport PayWidget from \"components/paywidget\";\nimport ReportNotes from \"./ReportNotes\";\n\nclass QuickReviewSidebar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            note: '',\n            expand: false,\n            hasMore: true,\n            endDate: props.endDate,\n            startDate: props.startDate,\n            selectedtab: 1,\n            currentPage: 1,\n            isFetching: true,\n            showAddNoteEditor: false,\n        };\n        this.debounceMethod = debounce(this.loadMore.bind(this), 500);\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    componentDidUpdate() {\n        const listElm = document.getElementById('infinite-scroll');\n        if (listElm) {\n            listElm.addEventListener('scroll', () => {\n                if (listElm.scrollTop + listElm.clientHeight >= (listElm.scrollHeight - 200)) {\n                    this.debounceMethod();\n                }\n            });\n        }\n    }\n\n    loadMore() {\n        const {\n            hasMore,\n            isFetching,\n        } = this.state;\n        if (!isFetching && hasMore) {\n            this.setState((prevData) => ({ currentPage: prevData.currentPage + 1, isFetching: true }), this.getData);\n        }\n    }\n\n    nextPreviousDate = (action) => {\n        const {\n            reportFrequency\n        } = this.props;\n        const operation = action === 'prev' ? 'subtract' : 'add';\n        if (reportFrequency === 'weekly') {\n            this.setState({\n                data: [],\n                isFetching: true,\n                currentPage: 1,\n                startDate: moment(this.state.startDate)[operation](\"days\", 7),\n                endDate: moment(this.state.endDate)[operation](\"days\", 7)\n            }, this.getData);\n        } else {\n            this.setState({\n                data: [],\n                isFetching: true,\n                currentPage: 1,\n                startDate: moment(this.state.startDate)[operation](\"months\", 1),\n                endDate: moment(this.state.endDate)[operation](\"months\", 1).endOf('month')\n            }, this.getData);\n        }\n    }\n\n    handleExpand = () => this.setState({ expand: !this.state.expand }, this.props.handleSideBarExpand(!this.state.expand));\n\n    getData = () => {\n        const {\n            data,\n            endDate,\n            startDate,\n            currentPage,\n            selectedtab,\n        } = this.state;\n        const isPrevious = moment().diff(endDate) >= 0;\n        instanceWithRetry\n            .get(`${selectedtab === 1 ? 'arinvoice' : 'apinvoice'}?page=${currentPage}&from_date='${moment(startDate).format(\"MM/DD/YYYY\")}'&to_date='${moment(endDate).format(\"MM/DD/YYYY\")}'&status=${isPrevious ? 'closed' : 'all'}&date_type=${selectedtab === 1 ? 'expected' : 'recommendation'}&sort_order=desc&sort_by=${selectedtab === 1 ? 'customer' : 'vendor'}`)\n            .then(response => {\n                this.setState({\n                    data: !data.length ? response.data.result : data.concat(response.data.result),\n                    isFetching: false,\n                    hasMore: response.data.result.length >= 20\n                })\n            })\n            .catch(e => handleAPIError(e));\n    }\n\n    render() {\n        const {\n            data,\n            note,\n            expand,\n            endDate,\n            isFetching,\n            selectedtab,\n            showAddNoteEditor,\n            currentPage,\n        } = this.state;\n        console.log(\"note \", note);\n\n        return(\n            <>\n                <If condition={!expand}>\n                    <div className=\"collapsed-quickview\" id=\"quickview-sidebar-collapsed\">\n                        <div className=\"card\">\n                            <div\n                                className=\"leftbaricon\"\n                                onClick={this.handleExpand}\n                            >\n                                <OverlayTrigger placement=\"left\" overlay={<Tooltip>Expand</Tooltip>}>\n                                    <i className=\"fa fa-chevron-left\" />\n                                </OverlayTrigger>\n                            </div>\n                            <div>\n                                <div onClick={() => this.setState({ selectedtab: 1, currentPage: 1, isFetching: true, data: [] }, () => { this.getData(); this.handleExpand() })}>\n                                    <OverlayTrigger placement=\"left\" overlay={<Tooltip>Receivables</Tooltip>}>\n                                        <i className=\"onlyicon fas fa-hand-holding-usd cursor-pointer\" aria-hidden=\"true\" />\n                                    </OverlayTrigger>\n                                </div>\n                                <div onClick={() => this.setState({ selectedtab: 2, currentPage: 1, isFetching: true, data: [] }, () => { this.getData(); this.handleExpand() })}>\n                                    <OverlayTrigger placement=\"left\" overlay={<Tooltip>Payables</Tooltip>}>\n                                        <i className=\"onlyicon fas fa-file-invoice-dollar cursor-pointer\" aria-hidden=\"true\" />\n                                    </OverlayTrigger>\n                                </div>\n                                <div onClick={() => this.setState({ selectedtab: 3 }, this.handleExpand)}>\n                                    <OverlayTrigger placement=\"left\" overlay={<Tooltip>Notes</Tooltip>}>\n                                        <i class=\"onlyicon fa fa-pencil cursor-pointer\" aria-hidden=\"true\" />\n                                    </OverlayTrigger>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </If>\n                <If condition={expand}>\n                    <div id=\"quickview-sidebar\" className=\"col-md-3\">\n                        <div\n                            className=\"leftbaricon\"\n                            onClick={this.handleExpand}\n                        >\n                            <OverlayTrigger placement=\"left\" overlay={<Tooltip>Collapse</Tooltip>}>\n                                <i className=\"fa fa-chevron-right\" />\n                            </OverlayTrigger>\n                        </div>\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <div className=\"w-100\">\n                                    <If condition={selectedtab !== 3}>\n                                        <div className=\"text-center pb-1\">\n                                            <i\n                                                className=\"fa fa-angle-left\"\n                                                onClick={() => this.nextPreviousDate(\"prev\")}\n                                                id=\"prevDate\"\n                                                aria-hidden=\"true\"\n                                            ></i>\n                                            <span id=\"showDate\">{moment(endDate).format(\"ddd, DD MMM, YYYY\")}</span>\n                                            <i\n                                                className=\"fa fa-angle-right\"\n                                                id=\"nextDate\"\n                                                aria-hidden=\"true\"\n                                                onClick={() => this.nextPreviousDate(\"next\")}\n                                            ></i>\n                                        </div>\n                                    </If>\n                                    <div>\n                                        <ul id=\"sideTabBar\" className=\"nav nav-tabs mt-3 mb-2\">\n                                            <OverlayTrigger placement=\"top\" overlay={<Tooltip>Receivables</Tooltip>}>\n                                                <li\n                                                    onClick={() => this.setState({ selectedtab: 1, currentPage: 1, isFetching: true, data: [] }, this.getData)}\n                                                    className={`cursour-pointer w-33 text-center ${selectedtab === 1 && \"active\"}`}\n                                                >\n                                                    <i className=\"fas fa-hand-holding-usd cursor-pointer\" aria-hidden=\"true\" />\n                                                </li>\n                                            </OverlayTrigger>\n                                            <OverlayTrigger placement=\"top\" overlay={<Tooltip>Payables</Tooltip>}>\n                                                <li\n                                                    onClick={() => this.setState({ selectedtab: 2, currentPage: 1, isFetching: true, data: [] }, this.getData)}\n                                                    className={`cursour-pointer w-33 text-center ${selectedtab === 2  && \"active\"}`}\n                                                >\n                                                        <i className=\"fas fa-file-invoice-dollar cursor-pointer\" aria-hidden=\"true\" />\n                                                </li>\n                                            </OverlayTrigger>\n                                            <OverlayTrigger placement=\"top\" overlay={<Tooltip>Notes</Tooltip>}>\n                                                <li\n                                                    onClick={() => this.setState({ selectedtab: 3 })}\n                                                    className={`cursour-pointer w-33 text-center ${selectedtab === 3 && \"active\"}`}\n                                                >\n                                                        <i class=\"fa fa-pencil cursor-pointer\" aria-hidden=\"true\" />\n                                                </li>\n                                            </OverlayTrigger>\n                                        </ul>\n                                    </div>\n                                </div>\n                                <If condition={[1, 2].includes(selectedtab)}>\n                                    <div id=\"infinite-scroll\" className=\"invoices-wrapper hide-scroll\">\n                                        <div id=\"pLisitng\" className=\"pLisitng cTab\">\n                                            <If condition={currentPage === 1 && isFetching}>\n                                                <CustomSpinner />\n                                            </If>\n                                            <If condition={data.length}>\n                                                {data.map(element => <PayWidget key={element.id} {...element} status='all' type={selectedtab === 1 ? 'customers' : 'vendors' } />)}\n                                                <If condition={isFetching}>\n                                                    <CustomSpinner />\n                                                </If>\n                                            </If>\n                                            <If condition={!isFetching && !data.length}>\n                                                <span>No Data</span>\n                                            </If>\n                                        </div>\n                                    </div>\n                                </If>\n                                <If condition={selectedtab === 3}>\n                                    <ReportNotes\n                                        note={note}\n                                        setNote={(note) => { this.setState({ note })}}\n                                        showAddNoteEditor={showAddNoteEditor}\n                                        showEditor={(showAddNoteEditor) => this.setState({ showAddNoteEditor})}\n                                    />\n                                </If>\n                            </div>\n                        </div>\n                    </div>\n                </If>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({state})\nexport default connect(mapStateToProps, {})(QuickReviewSidebar);\n","import React from \"react\";\nimport get from \"lodash/get\";\nimport uniq from \"lodash/uniq\";\nimport uniqBy from \"lodash/uniqBy\";\nimport sortBy from \"lodash/sortBy\";\nimport moment from \"moment\";\nimport {connect} from \"react-redux\";\nimport { Nav } from \"react-bootstrap\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport { resetconfirmationboxData, setconfirmationboxData } from \"components/ConfirmationBox\";\nimport { Accordion, AccordionItem, AccordionItemButton, AccordionItemHeading, AccordionItemPanel } from \"react-accessible-accordion\";\nimport Toaster from \"components/Toaster\";\nimport CustomSpinner from \"components/Spinner\";\nimport { handleAPIError } from \"handlers/setters\";\nimport { Modal } from \"react-bootstrap\";\nimport ReactTable from \"react-table-v6\";\nimport { Link } from \"react-router-dom\";\nimport { getFAWC } from \"utils\";\nimport Export from \"./Export\";\nimport ExportPaymentPlan from \"./ExportPaymentPlan\";\nimport { instanceWithRetry } from \"../../actions/axiosInstance\";\nimport WeeklyCashFlowChart from \"./WeeklyCashFlowChart\";\nimport QuickReviewSidebar from './QuickReviewSidebar';\nimport \"assets/css/reports.css\";\n\nconst formatNumber = num => {\n  if (num < 0) {\n    return `-$${Math.abs(num)\n      .toString()\n      .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}`;\n  } else {\n    return `$${num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")}`;\n  }\n};\n\nconst generateDates = (count, actuals, type = 'weekly', day=6) => {\n  const dateArray = [];\n  const forecastArray = [];\n  let forecount = count;\n  if(type === 'weekly') {\n    // Actuals\n    for(let i = actuals; i >= 1; i--) {\n      const datemodified = moment().weekday(day).day((6 + day) - (7 * i)).format(\"MM/DD/YYYY\");\n      if (moment(datemodified).isSame(new Date(), \"day\") || moment(datemodified).isAfter(new Date(), \"day\")) {\n        forecount -= 1;\n        forecastArray.push(datemodified);\n        dateArray.unshift(moment().weekday(day).day((6 + day) - (7 * (actuals + i))).format(\"MM/DD/YYYY\"));\n      } else {\n        dateArray.push(moment().weekday(day).day((6 + day) - (7 * i)).format(\"MM/DD/YYYY\"));\n      }\n    }\n    // forecast\n    for (let i = 0; i < forecount; i++) {\n      forecastArray.push(moment().weekday(day).day((6 + day) + (7 * i)).format(\"MM/DD/YYYY\"));\n    }\n  } else {\n    for (let i = actuals; i >= 1; i--) {\n      dateArray.push(moment().subtract(i, 'months').endOf('month').format(\"MM/DD/YYYY\")); // actuals\n    }\n    for (let i = 0; i < count; i++) {\n      forecastArray.push(moment().add(i, 'months').endOf('month').format(\"MM/DD/YYYY\")); // forecast\n    }\n  }\n  return dateArray.concat(forecastArray);\n}\n\nconst generateTableHeadings = (count, actualsCount = 4, type='weekly') => {\n  const tempArray = new Array(count).fill(0);\n  return tempArray.map((d, i) => {\n    if(i === 0) {\n      return <th />\n    } else if (i < (actualsCount + 1)) {\n      return <th className=\"text-center\">Actuals</th>\n    }\n    return <th className=\"text-center\">Forecast</th>\n  });\n}\n\nconst colorGreyCell = (existingClass, flag) => {\n  if (flag) {\n    return `cell-grey ${existingClass}`;\n  }\n  return existingClass;\n}\n\nconst initState = {\n  item: [],\n  modal: \"\",\n  startDay: \"\",\n  itemFirst: {},\n  monthCount: \"\",\n  dummyArray: [],\n  dateRanges: [],\n  cashInTotal: [],\n  bankbalance: [],\n  actualsCount: 4,\n  cashOutTotal: [],\n  payrollTotal: [],\n  dummyArrayItem: [],\n  isTotalLoading: true,\n  arInvoiceTotal: [],\n  apInvoiceTotal: [],\n  cashInFlowItem: [],\n  cashinZeroItem: [],\n  forecastConfig: 13,\n  sidebarExpanded: false,\n  reportFrequency: \"weekly\",\n  cashOutFlowItem: [],\n  cashoutZeroItem: [],\n  editCashOutItem: \"\",\n  paymentPlanTotal: [],\n  editCashFlowItem: \"\",\n  addCashInflowItem: false,\n  addCashOutFlowItem: false,\n  paymentPlanDetails: [],\n  orderBacklogTotal: [],\n  vendorCategoryList: [],\n  bankbalanceoriginal: [],\n  iscashinDataLoading: true,\n  fetchingPaymentPlan: false,\n  netOperatingCashFlow: [],\n  isBankBalanceLoading: true,\n  iscashoutDataLoading: true,\n  vendorCategoryTotals: [],\n  vendorCategoryZeroItem: [],\n  customerCategoryList: [],\n  endingCashBalanceTotal: [],\n  customerCategoryTotals: [],\n  customerCategoryZeroItem: [],\n  vendorCategoryOtherTotal: [],\n  customerCategoryOtherTotal: [],\n  showCashInZeroItem: false,\n  showCashOutZeroItem: false,\n  payplanmodalkey: \"paymentplan\"\n};\n\nclass Reports extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...initState };\n    this.refreshData = this.refreshData.bind(this);\n    this.storageChange = this.storageChange.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n\n  componentDidMount() {\n    document.body.classList.add('overflow-hidden');\n    document.title = \"Reports - Payference\";\n    const mainTableContainer = document.getElementById('scroll-table2');\n    const fixedHeaderTable = document.getElementById('scroll-table');\n    const mainReportWrapper = document.getElementById('report-scroll');\n\n    this.getReportConfig();\n    // set window at top\n    document.querySelector('.pay-rec-wrap').classList.add('reports-wrapper');\n    window.scrollTo(0, 0);\n    window.addEventListener(\"storage\", this.storageChange, false);\n    window.addEventListener('resize', this.getScrollTableWidth, false);\n    mainReportWrapper.addEventListener(\"scroll\", this.handleFixedTable);\n    if (mainTableContainer) {\n      fixedHeaderTable.addEventListener(\"scroll\", this.handleScroll, false);\n      mainTableContainer.addEventListener(\"scroll\", this.handleScroll, false);\n    }\n  }\n\n  componentDidUpdate() {\n    this.getScrollTableWidth();\n    const mainTableContainer = document.getElementById('scroll-table2');\n    if (mainTableContainer) {\n      document.getElementById('scroll-table').scrollLeft = mainTableContainer.scrollLeft;\n      mainTableContainer.addEventListener(\"scroll\", this.handleScroll, false);\n    }\n    const inputNumbers = document.querySelectorAll(\"input[type=number]\");\n    if (inputNumbers.length) {\n      var invalidChars = [\"+\", \"e\"];\n      for (let i = 0; i < inputNumbers.length; i++) {\n        inputNumbers[i].addEventListener(\"keydown\", function (e) {\n          if (invalidChars.includes(e.key)) {\n            e.preventDefault();\n          }\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    document.body.classList.remove('overflow-hidden');\n    document.querySelector('.pay-rec-wrap').classList.remove('reports-wrapper');\n    window.removeEventListener(\"storage\", this.storageChange);\n    window.removeEventListener('resize', this.getScrollTableWidth, false);\n    document.getElementById('scroll-table2') && document.getElementById('scroll-table2').removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  handleFixedTable = () => {\n    const mainTable = document.getElementById('static-header-table');\n    const graphElement = document.getElementById('exportgraph');\n    const mainTableContainer = document.getElementById('scroll-table2')\n    const fixedHeaderTable = document.getElementById('scroll-table');\n    const mainReportWrapper = document.getElementById('report-scroll');\n    const scroll = mainReportWrapper.scrollTop;\n    if (fixedHeaderTable && graphElement) {\n      fixedHeaderTable.scrollLeft = mainTableContainer.scrollLeft;\n      if (scroll > (graphElement.clientHeight + 120)) {\n        mainTable.classList.add(\"visible-hidden\");\n        fixedHeaderTable.classList.remove(\"d-none\");\n      } else {\n        mainTable.classList.remove(\"visible-hidden\");\n        fixedHeaderTable.classList.add(\"d-none\");\n      }\n    }\n  }\n\n  getStartDate = endDate => {\n    const { reportFrequency } = this.state;\n    let startDate = moment(endDate).subtract(\"days\", 6).format(\"MM/DD/YYYY\");\n    if (reportFrequency === 'monthly') {\n      startDate = moment(endDate).startOf('month').format(\"MM/DD/YYYY\");\n    }\n    return startDate\n  }\n\n  getReportConfig = () => {\n    instanceWithRetry\n    .get('/client')\n    .then(response => {\n      const result = response.data.result;\n      const reportFrequency = result.report_interval || 'weekly';\n      const forecastConfig = reportFrequency !== 'weekly' ? result.report_num_months : result.report_num_weeks || 13; // default config\n      const actualsCount = reportFrequency !== 'weekly' ? result.report_num_actuals_months || 1 : result.report_num_actuals_weeks || 4;\n      this.setState({\n        item: new Array(forecastConfig + actualsCount).fill({ amount: \"\" }),\n        dateRanges: generateDates(forecastConfig, actualsCount, reportFrequency || 'weekly', result.report_start_day_of_week),\n        startDay: result.report_start_day_of_week !== null ? result.report_start_day_of_week : 1, // default Monday\n        reportFrequency,\n        monthCount: result.report_num_months || 2, // default 2 months\n        dummyArray: new Array(forecastConfig + actualsCount).fill(0),\n        forecastConfig,\n        actualsCount,\n        dummyArrayItem: new Array(forecastConfig + actualsCount).fill({ amount: \"\" }),\n      }, this.refreshData)\n      document.getElementById('scroll-table2').scrollLeft = 100 * this.state.actualsCount;\n    })\n    .catch(e => handleAPIError(e));\n  }\n\n  handleSideBarExpand = (sidebarExpanded) => this.setState({ sidebarExpanded }, () => { this.handleFixedTable(); this.getScrollTableWidth();});\n\n  handleScroll(e) {\n    if(e.target.id === 'scroll-table2') {\n      document.getElementById('scroll-table').scrollLeft = document.getElementById('scroll-table2').scrollLeft;\n    } else {\n      document.getElementById('scroll-table2').scrollLeft = document.getElementById('scroll-table').scrollLeft;\n    }\n  }\n\n  storageChange(event) {\n    if (event.key === \"refresh_reports\" && event.newValue === \"true\") {\n      document.getElementById('static-header-table').classList.remove(\"visible-hidden\");\n      document.getElementById('scroll-table').classList.add(\"d-none\");\n      const updatedState = {\n        ...initState,\n        modal: this.state.modal,\n      }\n      this.setState(updatedState, this.getReportConfig);\n      localStorage.removeItem(\"refresh_reports\");\n    }\n  }\n\n  refreshData() {\n    const { dateRanges, actualsCount, reportFrequency, forecastConfig, openModalIndex, modal } = this.state;\n    this.getBankBalance(dateRanges, actualsCount, reportFrequency, forecastConfig);\n    this.getOrderBacklogTotal(dateRanges, actualsCount, reportFrequency);\n    this.getARInvoiceTotal(dateRanges, actualsCount, reportFrequency);\n    this.getAPInvoiceTotal(dateRanges, actualsCount, reportFrequency);\n    modal && this.getPaymentPlanDetails(null, openModalIndex);\n  }\n\n  getPaymentPlanDetails = (e, i) => {\n    const { dateRanges } = this.state;\n    let URL = \"paymentinstallment\";\n    e && e.stopPropagation();\n    (i || i === 0) &&\n      (URL = `${URL}?from_date=${this.getStartDate(dateRanges[i])}&to_date=${dateRanges[i]}`);\n    this.setState({ fetchingPaymentPlan: true, paymentPlanDetails: [], selectedWeek: i, modal: \"Payment Plan Details\", openModalIndex: i });\n    instanceWithRetry.get(URL).then(response => {\n      const Installments = get(response, \"data.result\", [])\n      let data = Installments;\n      data = data.map(x => ({\n        ...x,\n        installments: Installments.filter(y => y.plan_id === x.plan_id).map(y => [y.id, y.date, y.amount])\n      }));\n      data = uniqBy(data, \"plan_id\");\n      Promise.all(data.map((item, i) => instanceWithRetry.get(`paymentplan?id=${item.plan_id}`))).then(\n        sub_responses => {\n          data = sortBy(data.map((x, i) => ({ ...get(sub_responses[i], \"data.result[0]\", \"\"), ...x })), [\"supplierid\"]);\n          Promise.all(data.map(item => instanceWithRetry.get(`supplier/report?id=${item.supplierid}`))).then(\n            responses => {\n              data = data\n              .map((item, index) => ({\n                ...item,\n                ...get(responses[index], \"data\", \"\")\n              }))\n              .filter(x => get(x, \"invoices[0]\", \"\"))\n              const payplans = data.filter(x => x.is_payment_plan);\n              const partialpays = data.filter(x => !x.is_payment_plan);\n              // create all partial pays as a paymentplan\n              let newpartialpays = [];\n              partialpays.forEach((plan) => {\n                 get(plan, \"installments\", []).forEach((ins) => {\n                  newpartialpays.push({\n                     ...plan,\n                     installments: [ins]\n                   });\n                 })\n              })\n              const newdata = [\n                ...payplans.map((item, index) => ({\n                  ...item,\n                  \"Vendor Name\":\n                    get(data, `[${index - 1}][\"Vendor Name\"]`, \"\") === item[\"Vendor Name\"] ? \"\" : item[\"Vendor Name\"]\n                })),\n                ...newpartialpays.map((item, index) => ({\n                  ...item,\n                  \"Vendor Name\":\n                    get(data, `[${index - 1}][\"Vendor Name\"]`, \"\") === item[\"Vendor Name\"] ? \"\" : item[\"Vendor Name\"]\n                }))\n              ];\n              this.setState({ paymentPlanDetails: newdata, fetchingPaymentPlan: false });\n            }\n          );\n        }\n      );\n    });\n  };\n\n  generateExportStylesheet = () => {\n    const cellCount = document.getElementById('exportexceltable').rows[0].cells.length;\n    const colcss = Math.ceil(cellCount / 10);\n    const style = document.createElement('style');\n    style.innerHTML = `\n      #exportexceltable td,\n      #exportexceltable th {\n        display: none;\n      }\n      #exportexceltable td:first-child,\n      #exportexceltable th:first-child {\n          display: table-cell;\n      }`;\n    for (let i = 0; i < colcss; i++) {\n      const offset1 = 2 + (9 * i);\n      const offset2 = 10 + (9 * i);\n      style.innerHTML += `\n        .hide${i} td:nth-child(n+${offset1}):nth-child(-n+${offset2}),\n        .hide${i} th:nth-child(n+${offset1}):nth-child(-n+${offset2}) {\n            display: table-cell!important;\n        }`;\n    }\n    document.head.appendChild(style);\n  }\n\n  getVendorCategoryData = (dateRanges, category, actualsCount) => {\n    const allPromises = [];\n    for (let i = 0; i < dateRanges.length; i++) {\n      allPromises.push(\n        instanceWithRetry.get(\n          `apinvoice/total?payment_plan=exclude&date_type=recommendation&to_date='${dateRanges[i]}'&from_date='${this.getStartDate(dateRanges[i])}'&status='${i < actualsCount ? \"closed\" : \"all\"}'&vendor_category_id=${category.id}`\n        )\n      );\n    }\n    Promise.all(allPromises)\n      .then(res => {\n        this.setState({\n          vendorCategoryTotals: [...this.state.vendorCategoryTotals, {category: category.name, ...category, total: res.map(d => Math.round(d.data.total) || 0)}]\n        }, () => {\n          const {\n            vendorCategoryTotals,\n            apInvoiceTotal,\n          } = this.state;\n          let categoryTotal = vendorCategoryTotals.map(d => (d.total)).reduce((r, a) => {\n            a.forEach((b, i) => {\n              r[i] = (r[i] || 0) + b;\n            });\n            return r;\n          }, []);\n          this.setState({\n            vendorCategoryOtherTotal: apInvoiceTotal.map((a, i) => a - categoryTotal[i]),\n          });\n        });\n      })\n      .catch(e => handleAPIError(e));\n  }\n\n  getVendorCategory = () => {\n    const { actualsCount, dateRanges } = this.state;\n    instanceWithRetry\n      .get(`vendorcategory?per_page=100`)\n      .then(response => {\n        this.setState({\n          vendorCategoryList: response.data.result.filter(d => (d.is_selected)),\n        }, () => {\n          if(this.state.vendorCategoryList.length) {\n            this.state.vendorCategoryList.forEach(d => this.getVendorCategoryData(dateRanges, d, actualsCount));\n          }\n        })\n      })\n      .catch(e => handleAPIError(e));\n  }\n\n  getCustomerCategoryData = (dateRanges, category, actualsCount) => {\n    const allPromises = [];\n    for (let i = 0; i < dateRanges.length; i++) {\n      allPromises.push(\n      instanceWithRetry.get(\n        `arinvoice/total?date_type=expected&to_date='${dateRanges[i]}'&from_date='${this.getStartDate(dateRanges[i])}'&status='${i < actualsCount ? \"closed\" : \"all\"}'&customer_category_id=${category.id}`\n      ))\n    }\n    Promise.all(allPromises)\n      .then(res => {\n          this.setState({\n            customerCategoryTotals: [...this.state.customerCategoryTotals, { category: category.name, ...category, total: res.map(d => Math.round(d.data.total) || 0) }]\n          }, () => {\n            const {\n              customerCategoryTotals,\n              arInvoiceTotal,\n            } = this.state;\n              let categoryTotal = customerCategoryTotals.map(d => (d.total)).reduce((r, a) => {\n                a.forEach((b, i) => {\n                  r[i] = (r[i] || 0) + b;\n                });\n                return r;\n              }, []);\n              this.setState({\n                customerCategoryOtherTotal: arInvoiceTotal.map((a, i) => a - categoryTotal[i]),\n              });\n          })\n      })\n      .catch(e => handleAPIError(e));\n  }\n\n  getCustomerCategory = () => {\n    const { actualsCount, dateRanges } = this.state;\n    instanceWithRetry\n      .get(`customercategory?per_page=100`)\n      .then(response => {\n        this.setState({\n          customerCategoryList: response.data.result.filter(d => (d.is_selected)),\n        }, () => {\n          if (this.state.customerCategoryList.length) {\n            this.state.customerCategoryList.forEach(d => this.getCustomerCategoryData(dateRanges, d, actualsCount));\n          }\n        })\n      })\n      .catch(e => handleAPIError(e));\n  }\n\n  getItemData = (value, type, date, id, description, index) => {\n    const obj = {\n      ...this.state.itemFirst,\n      description: get(this.state, \"itemFirst.description\", \"\"),\n      [type]: value\n    };\n    if (id) {\n      obj.id = id;\n      obj.description = description;\n    }\n    if (date) {\n      obj.date = date;\n    }\n    if (type === \"description\") {\n      if (id) {\n        this.setState({\n          itemFirst: {\n            id,\n            description,\n            [type]: value\n          },\n          item: get(this.state, \"item\", []).map(x => ({\n            ...x,\n            description: get(this.state, \"itemFirst.description\", \"\")\n          }))\n        });\n      } else {\n        this.setState({\n          itemFirst: {\n            ...this.state.itemFirst,\n            [type]: value\n          },\n          item: get(this.state, \"item\", []).map(x => ({\n            ...x,\n            description: get(this.state, \"itemFirst.description\", \"\")\n          }))\n        });\n      }\n    } else {\n      // amount\n      const items = [...this.state.item];\n      items[index] = obj;\n      this.setState({ item: items });\n    }\n  };\n\n  onSubmitItem = (type, data, preventClose) => {\n    const apiPoint = type === \"addCashInflowItem\" ? \"cashin\" : \"cashout\";\n    if (!get(data, \"[0].amount\", \"\")) {\n      Toaster(\"Please add at least one amount\", \"error\");\n      return;\n    } else if (!get(data, \"[0].description\", \"\")) {\n      Toaster(\"Description is required\", \"error\");\n      return;\n    }\n    const { dummyArrayItem, dateRanges } = this.state;\n    instanceWithRetry\n      .post(\n        apiPoint,\n        {\n          records: data\n        }\n      )\n      .then(res => {\n        this.setState({ item: [...dummyArrayItem], itemFirst: {} });\n        if (type === \"addCashInflowItem\") {\n          this.getCashInFlow(dateRanges, true);\n          this.calculateCashInTotal();\n        }\n        if (type === \"addCashOutFlowItem\") {\n          this.getCashOutFlow(dateRanges, true);\n          this.calculateCashOutTotal();\n        }\n      })\n      .catch(e => handleAPIError(e));\n    if (!preventClose) {\n      this.setState({ [type]: false });\n    }\n  };\n\n  addNewItem = flag => {\n    const { dateRanges, dummyArrayItem, actualsCount } = this.state;\n\n    return (\n      <tr>\n        <td>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            onChange={e => this.getItemData(e.target.value, \"description\")}\n            placeholder=\"Enter ...\"\n            value={get(this.state, \"itemFirst.description\", \"\")}\n          />\n        </td>\n        {dateRanges.map((d, i) => (\n          <td key={i}>\n            <input\n              type=\"number\"\n              onInput={e => {\n                this.getItemData(e.target.value, \"amount\", d, null, null, i);\n              }}\n              className={colorGreyCell(\"text-right form-control\", actualsCount === i)}\n              placeholder=\"Amount\"\n            />\n          </td>\n        ))}\n        <td>\n          <span\n            title=\"Save\"\n            className=\"btn editdltbtn\"\n            onClick={() =>\n              this.onSubmitItem(\n                flag,\n                this.state.item.filter(x => x && x.amount)\n              )\n            }\n          >\n            <i className=\"fas fa-save\" style={{ fontSize: \"15px\" }}></i>\n          </span>\n          <span>|</span>\n          <span\n            title=\"Cancel\"\n            className=\"btn editdltbtn\"\n            onClick={() => this.setState({ [flag]: false, item: [...dummyArrayItem], itemFirst: {} })}\n          >\n            <i className=\"fas fa-remove\" style={{ fontSize: \"15px\" }}></i>\n          </span>\n        </td>\n      </tr>\n    );\n  };\n\n  onSubmitEditedData = (type, value, flag) => {\n    const apiPoint = flag === \"addCashOutFlowItem\" ? `cashout?id=${value.id}` : `cashin?id=${value.id}`;\n    let reqObj = [];\n    if (type === \"description\") {\n      reqObj = [{ description: value.description }];\n      const allPromises = [];\n      for (let i = 0; i < value.ids.length; i++) {\n        const apiPointId = flag === \"addCashOutFlowItem\" ? `cashout?id=${value.ids[i]}` : `cashin?id=${value.ids[i]}`;\n        allPromises.push(\n          instanceWithRetry.put(\n            apiPointId,\n            {\n              records: reqObj\n            }\n          )\n        );\n      }\n      Promise.all(allPromises)\n        .then(res => {\n          if (flag === \"addCashInflowItem\") {\n            this.getCashInFlow(this.state.dateRanges, true);\n          }\n          if (flag === \"addCashOutFlowItem\") {\n            this.getCashOutFlow(this.state.dateRanges, true);\n          }\n        })\n        .catch(e => handleAPIError(e));\n    } else if (!value.id) {\n      const reqObject = {\n        description: value.description,\n        date: value.date,\n        amount: value.amount\n      };\n      this.onSubmitItem(flag, [reqObject], false);\n    } else {\n      reqObj = [{ amount: value.amount }];\n      instanceWithRetry\n        .put(\n          apiPoint,\n          {\n            records: reqObj\n          }\n        )\n        .then(res => {\n          if (flag === \"addCashInflowItem\") {\n            this.getCashInFlow(this.state.dateRanges, true);\n          }\n          if (flag === \"addCashOutFlowItem\") {\n            this.getCashOutFlow(this.state.dateRanges, true);\n          }\n        })\n        .catch(e => handleAPIError(e));\n    }\n  };\n\n  editLineItem = (data, flag, cancelFlag) => {\n    const { dateRanges, dummyArrayItem, actualsCount } = this.state;\n    const description = get(\n      data.find(d => d && d.description),\n      \"description\",\n      \"\"\n    );\n    const ids = data.filter(d => (d ? d : \"\")).map(d => d.id);\n    return (\n      <React.Fragment>\n        <td>\n          <input\n            type=\"text\"\n            defaultValue={description}\n            className=\"form-control\"\n            placeholder=\"Enter ...\"\n            onBlur={e => this.onSubmitEditedData(\"description\", { description: e.target.value, ids }, flag)}\n          />\n        </td>\n        {data.map((d, k) => {\n          if (data.length - 1 === k) {\n            return (\n              <td>\n                <span\n                  title=\"Cancel\"\n                  className=\"btn editdltbtn\"\n                  onClick={e => {\n                    e.stopPropagation();\n                    this.setState({ [cancelFlag]: \"\", item: [...dummyArrayItem], itemFirst: {} });\n                  }}\n                >\n                  <i className=\"fas fa-remove\" style={{ fontSize: \"15px\" }}></i>\n                </span>\n              </td>\n            );\n          } else {\n            return (\n              <td>\n                <input\n                  type=\"number\"\n                  defaultValue={d ? d.amount : 0}\n                  className={colorGreyCell(\"text-right form-control\", actualsCount === k)}\n                  placeholder=\"Amount\"\n                  onBlur={e =>\n                    this.onSubmitEditedData(\n                      \"amount\",\n                      { description, amount: e.target.value || \"0\", id: d ? d.id : \"\", date: dateRanges[k] },\n                      flag\n                    )\n                  }\n                />\n              </td>\n            );\n          }\n        })}\n      </React.Fragment>\n    );\n  };\n\n  getBankBalance = (dateRanges, actualsCount, forecastConfig) => {\n    const allPromises = [];\n    for (let i = 0; i <= actualsCount; i++) {\n      allPromises.push(\n        instanceWithRetry.get(`bankbalance/total?to_date='${this.getStartDate(dateRanges[i])}'&from_date='${this.getStartDate(dateRanges[i])}'`)\n      );\n    }\n    Promise.all(allPromises)\n      .then(res => {\n        this.setState(\n          {\n            bankbalance: res.map(d => Math.round(d.data.total) || 0).concat(new Array(forecastConfig).fill(0)),\n            bankbalanceoriginal: res.map(d => Math.round(d.data.total) || 0),\n            isBankBalanceLoading: false\n          }\n        );\n      })\n      .catch(e => handleAPIError(e));\n  };\n\n  getARInvoiceTotal = (dateRanges, actualsCount) => {\n    const allPromises = [];\n    for (let i = 0; i < dateRanges.length; i++) {\n      allPromises.push(\n        instanceWithRetry.get(\n          `arinvoice/total?date_type=expected&to_date='${dateRanges[i]}'&from_date='${this.getStartDate(dateRanges[i])}'&status='${i < actualsCount ? \"closed\" : \"all\"}'`\n        )\n      );\n    }\n    Promise.all(allPromises)\n      .then(res => {\n        this.setState(\n          {\n            arInvoiceTotal: res.map(d => Math.round(d.data.total) || 0)\n          },\n          () => {\n            this.getPaymentPlanTotal(dateRanges, actualsCount);\n            this.getCustomerCategory();\n          }\n        );\n      })\n      .catch(e => handleAPIError(e));\n  };\n\n  getPaymentPlanTotal = (dateRanges, actualsCount) => {\n    const allPromises = [];\n    for (let i = 0; i < dateRanges.length; i++) {\n      allPromises.push(\n        instanceWithRetry.get(\n          `paymentplan/total?to_date='${dateRanges[i]}'&from_date='${this.getStartDate(dateRanges[i])}'&status='${i < actualsCount ? \"closed\" : \"all\"}'`\n        )\n      );\n    }\n    Promise.all(allPromises)\n      .then(res => {\n        this.setState(\n          {\n            paymentPlanTotal: res.map(d => Math.round(d.data.total) || 0)\n          },\n          this.getCashInFlow(dateRanges, actualsCount)\n        );\n      })\n      .catch(e => handleAPIError(e));\n  };\n\n  getOrderBacklogTotal = (dateRanges, actualsCount) => {\n    const allPromises = [];\n    for (let i = 0; i < dateRanges.length; i++) {\n      allPromises.push(\n        instanceWithRetry.get(\n          `orderbacklog/total?date_type=expected&to_date='${dateRanges[i]}'&from_date='${this.getStartDate(dateRanges[i])}'&status='${i < actualsCount ? \"closed\" : \"all\"}'`\n        )\n      );\n    }\n    Promise.all(allPromises)\n      .then(res => {\n        this.setState(\n          {\n            orderBacklogTotal: res.map(d => Math.round(d.data.total) || 0)\n          }\n        );\n      })\n      .catch(e => handleAPIError(e));\n  };\n\n  getAPInvoiceTotal = (dateRanges, actualsCount) => {\n    const allPromises = [];\n    for (let i = 0; i < dateRanges.length; i++) {\n      allPromises.push(\n        instanceWithRetry.get(\n          `apinvoice/total?payment_plan=exclude&date_type=recommendation&to_date='${dateRanges[i]}'&from_date='${this.getStartDate(dateRanges[i])}'&status='${i < actualsCount ? \"closed\" : \"all\"}'`\n        )\n      );\n    }\n    Promise.all(allPromises)\n      .then(res => {\n        this.setState(\n          {\n            apInvoiceTotal: res.map(d => Math.round(d.data.total) || 0)\n          },\n          () => {\n            this.getPayRollData(dateRanges);\n            this.getVendorCategory();\n          }\n        );\n      })\n      .catch(e => handleAPIError(e));\n  };\n\n  getPayRollData = (dateRanges) => {\n    const allPromises = [];\n    for (let i = 0; i < dateRanges.length; i++) {\n      allPromises.push(\n        instanceWithRetry.get(\n          `payroll/total?to_date='${dateRanges[i]}'&from_date='${this.getStartDate(dateRanges[i])}`\n        )\n      );\n    }\n    Promise.all(allPromises)\n      .then(res => {\n        this.setState(\n          {\n            payrollTotal: res.map(d => Math.round(d.data.total) || 0)\n          },\n          this.getCashOutFlow(dateRanges)\n        );\n      })\n      .catch(e => handleAPIError(e));\n  };\n\n  getCashInFlow = (dateRanges, expand) => {\n    const allPromises = [];\n    for (let i = 0; i < dateRanges.length; i++) {\n      allPromises.push(\n        instanceWithRetry.get(`cashin?to_date='${dateRanges[i]}'&from_date='${dateRanges[i]}'`)\n      );\n    }\n    Promise.all(allPromises)\n      .then(res => {\n        const allData = [];\n        res.forEach(d => {\n          allData.push(...d.data.result);\n        });\n        const convertedData = this.updateData(\n          allData.map(d => ({\n            ...d,\n            amount: Math.round(d.amount),\n            date: moment(d.date).format(\"MM/DD/YYYY\"),\n            position: dateRanges.indexOf(moment(d.date).format(\"MM/DD/YYYY\"))\n          }))\n        );\n        const cashZero = convertedData.filter(d => (!d[this.state.actualsCount] || !d[this.state.actualsCount].amount));\n        this.setState(\n          {\n            iscashinDataLoading: false,\n            showCashInZeroItem: cashZero.length > 3 && expand,\n            cashInFlowItem: convertedData.filter(d => (d[this.state.actualsCount] && d[this.state.actualsCount].amount)),\n            cashinZeroItem: cashZero,\n          }, this.calculateCashInTotal);\n      })\n      .catch(e => handleAPIError(e));\n  };\n\n  calculateCashInTotal = () => {\n    const { cashInFlowItem, cashinZeroItem, arInvoiceTotal, orderBacklogTotal, forecastConfig, actualsCount } = this.state;\n    const temp = [...cashInFlowItem, ...cashinZeroItem]\n      .map(line => line.map(d => (d ? d.amount : 0)))\n      .reduce((r, a) => {\n        a.forEach((b, i) => {\n          r[i] = (r[i] || 0) + b;\n        });\n        return r;\n      }, [])\n      .splice(0, forecastConfig + actualsCount);\n\n    let cashInTotal = [temp, arInvoiceTotal].reduce((r, a) => {\n      a.forEach((b, i) => {\n        r[i] = (r[i] || 0) + b;\n      });\n      return r;\n    }, []);\n\n    cashInTotal = [cashInTotal, orderBacklogTotal].reduce((r, a) => {\n      a.forEach((b, i) => {\n        r[i] = (r[i] || 0) + b;\n      });\n      return r;\n    }, []);\n\n    this.setState(\n      {\n        cashInTotal\n      },\n      this.calculateCashOutTotal\n    );\n  };\n\n  calculateCashOutTotal = () => {\n    const {\n      cashInTotal,\n      actualsCount,\n      payrollTotal,\n      apInvoiceTotal,\n      forecastConfig,\n      cashOutFlowItem,\n      cashoutZeroItem,\n      paymentPlanTotal,\n      bankbalanceoriginal,\n    } = this.state;\n    const temp = [...cashOutFlowItem, ...cashoutZeroItem]\n      .map(line => line.map(d => (d ? d.amount : 0)))\n      .reduce((r, a) => {\n        a.forEach((b, i) => {\n          r[i] = (r[i] || 0) + b;\n        });\n        return r;\n      }, []).splice(0, forecastConfig + actualsCount);\n\n    let cashOutTotal = [temp, apInvoiceTotal, payrollTotal].reduce((r, a) => {\n      a.forEach((b, i) => {\n        r[i] = (r[i] || 0) + b;\n      });\n      return r;\n    }, []);\n\n    cashOutTotal = [cashOutTotal, paymentPlanTotal].reduce((r, a) => {\n      a.forEach((b, i) => {\n        r[i] = (r[i] || 0) + b;\n      });\n      return r;\n    }, []);\n\n    const netOperatingCashFlow = cashInTotal.map((n, i) => n - cashOutTotal[i]);\n\n    let endingCashBalanceTotal = bankbalanceoriginal.map((n, i) => n + netOperatingCashFlow[i]).concat(new Array(forecastConfig - 1).fill(0));\n    let bankbalanceUpdated = bankbalanceoriginal.concat(new Array(forecastConfig-1).fill(0));\n    for (let i = actualsCount + 1; i < forecastConfig + actualsCount; i++) {\n      bankbalanceUpdated[i] = endingCashBalanceTotal[i-1];\n      endingCashBalanceTotal[i] = endingCashBalanceTotal[i - 1] + netOperatingCashFlow[i];\n    }\n\n    this.setState({\n      isTotalLoading: false,\n      cashOutTotal,\n      netOperatingCashFlow,\n      endingCashBalanceTotal,\n      bankbalance: bankbalanceUpdated\n    }, () => {\n      this.getScrollTableWidth();\n      this.generateExportStylesheet();\n    });\n  };\n\n  getCashOutFlow = (dateRanges, expand) => {\n    const allPromises = [];\n    for (let i = 0; i < dateRanges.length; i++) {\n      allPromises.push(\n        instanceWithRetry.get(`cashout?to_date='${dateRanges[i]}'&from_date='${dateRanges[i]}'`)\n      );\n    }\n    Promise.all(allPromises)\n      .then(res => {\n        const allData = [];\n        res.forEach(d => {\n          allData.push(...d.data.result);\n        });\n        const convertedData = this.updateData(\n          allData.map(d => ({\n            ...d,\n            amount: Math.round(d.amount),\n            date: moment(d.date).format(\"MM/DD/YYYY\"),\n            position: dateRanges.indexOf(moment(d.date).format(\"MM/DD/YYYY\"))\n          }))\n        );\n        const cashZero = convertedData.filter(d => (!d[this.state.actualsCount] || !d[this.state.actualsCount].amount));\n        this.setState(\n          {\n            iscashoutDataLoading: false,\n            showCashOutZeroItem: cashZero.length > 3 && expand,\n            cashOutFlowItem: convertedData.filter(d => (d[this.state.actualsCount] && d[this.state.actualsCount].amount)),\n            cashoutZeroItem: cashZero,\n          },\n          this.calculateCashOutTotal\n        );\n      })\n      .catch(e => handleAPIError(e));\n  };\n\n  updateData = dataToUpdate => {\n    const {\n      actualsCount,\n      forecastConfig,\n    } = this.state;\n    const itemCount = forecastConfig + actualsCount + 1;\n    const desc = uniq(dataToUpdate.map(d => d.description));\n    const updatedData = [];\n\n    desc.forEach(d => {\n      updatedData.push(dataToUpdate.filter(data => data.description === d));\n    });\n    let temp = new Array(itemCount).fill(null);\n    if (updatedData.length) {\n      for (let i = 0; i < updatedData.length; i++) {\n        for (let j = 0; j < itemCount; j++) {\n          if (updatedData[i][j]) {\n            const pos = updatedData[i][j].position;\n            temp[pos] = updatedData[i][j];\n          }\n        }\n        updatedData[i] = temp;\n        temp = new Array(itemCount).fill(null);\n      }\n    }\n    return updatedData;\n  };\n\n  deleteRecords = (data, type) => {\n    const { dateRanges } = this.state;\n    setconfirmationboxData({\n      variant: \"warning\",\n      msg: \"Are you sure you want to delete this record?\",\n      onSave: () => {\n        resetconfirmationboxData();\n        const ids = data.filter(d => (d ? d : \"\")).map(d => d.id);\n        const allPromises = [];\n        for (let i = 0; i < ids.length; i++) {\n          allPromises.push(\n            instanceWithRetry.put(\n              `${type}/delete?id=${ids[i]}`,\n              {}\n            )\n          );\n        }\n        Promise.all(allPromises)\n          .then(res => {\n            if (type === \"cashin\") {\n              this.getCashInFlow(dateRanges, true);\n            } else {\n              this.getCashOutFlow(dateRanges, true);\n            }\n          })\n          .catch(e => handleAPIError(e));\n      }\n    });\n  };\n\n  closeEditMode = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { addCashInflowItem, addCashOutFlowItem } = this.state;\n    if (![\"number\", \"text\"].includes(e.target.type) && (!addCashOutFlowItem || !addCashInflowItem)) {\n      this.setState({ editCashFlowItem: \"\", editCashOutItem: \"\" });\n    }\n  };\n\n  setModal = type => this.setState({ modal: type });\n\n  openDetailsPage = (page, d, k, other = {}, e) => {\n    e && e.stopPropagation();\n    const { dateRanges, actualsCount } = this.state;\n    const filters = {\n      \"/payroll\": {\n        key: \"payrollFilters\"\n      },\n      \"/payables\": {\n        key: \"payableFilters\",\n        dateType: \"recommendation\",\n        payment_plan: \"exclude\",\n        api_sort_by: 'invoice_amount',\n        api_sort_order: 'desc'\n      },\n      \"/receivables\": {\n        key: \"receivableFilters\",\n        dateType: \"expected\",\n        api_sort_by: 'invoice_amount',\n        api_sort_order: 'desc'\n      },\n      \"/backlog\": {\n        key: \"backlogFilters\",\n        dateType: \"expected\"\n      }\n    };\n    const filterObject = {\n      startDate: this.getStartDate(dateRanges[k]),\n      endDate: dateRanges[k],\n      status: k < actualsCount ? \"closed\" : \"all\",\n      ...filters[page],\n      ...other\n    };\n    localStorage.setItem(filters[page].key, JSON.stringify(filterObject));\n    window.open(page, \"_blank\");\n  }\n\n  getScrollTableWidth = () => {\n    const {\n      isTotalLoading\n    } = this.state;\n    if (!isTotalLoading) {\n      document.getElementById('exporttable').removeAttribute('style');\n      document.getElementById('scroll-table').removeAttribute('style');\n      const mainReportWrapper = document.getElementById('report-scroll').clientWidth - 10;\n      document.getElementById('scroll-table').style.width = `${mainReportWrapper}px`;\n      const reportTableWrapper = document.querySelector('#exporttable table').clientWidth;\n      document.getElementById('exporttable').style.width = mainReportWrapper > reportTableWrapper ? '100%' : 'auto';\n    }\n  }\n\n  renderMoreLessRow = (state, type, cx='') => {\n    const { dummyArray, actualsCount } = this.state;\n    return (\n      <tr>\n        <td className={`t-link-black ${cx}`} onClick={() => this.setState({ [state]: !this.state[state] })}><strong>{type}</strong></td>\n        {dummyArray.map((d, k) => (\n          <td className={colorGreyCell(\"\", actualsCount === k)} />\n        ))}\n        <td/>\n      </tr>\n    )\n  }\n\n  render() {\n    const {\n      modal,\n      dateRanges,\n      bankbalance,\n      cashInTotal = [],\n      dummyArray,\n      actualsCount,\n      payrollTotal,\n      cashOutTotal = [],\n      selectedWeek,\n      arInvoiceTotal,\n      apInvoiceTotal,\n      dummyArrayItem,\n      isTotalLoading,\n      forecastConfig,\n      sidebarExpanded,\n      reportFrequency,\n      cashInFlowItem,\n      cashOutFlowItem,\n      editCashOutItem,\n      paymentPlanTotal = [],\n      orderBacklogTotal = [],\n      editCashFlowItem,\n      addCashInflowItem,\n      paymentPlanDetails = [],\n      addCashOutFlowItem,\n      iscashinDataLoading,\n      fetchingPaymentPlan,\n      isBankBalanceLoading,\n      cashinZeroItem,\n      cashoutZeroItem,\n      iscashoutDataLoading,\n      netOperatingCashFlow,\n      vendorCategoryTotals,\n      endingCashBalanceTotal,\n      customerCategoryTotals,\n      vendorCategoryOtherTotal,\n      customerCategoryOtherTotal,\n      payplanmodalkey,\n      showCashInZeroItem,\n      showCashOutZeroItem,\n    } = this.state;\n\n    const cashInMain = [...cashInFlowItem, ...cashinZeroItem];\n    const cashOutMain = [...cashOutFlowItem, ...cashoutZeroItem];\n\n    const planTableColumns = [\n      {\n        Header: () => <span>Vendor</span>,\n        className: \"ml-3\",\n        width: 200,\n        accessor: \"Vendor Name\",\n        Cell: d => (\n          <span>\n              {d.value}\n            </span>\n        )\n      },\n      {\n        Header: () => <span className=\"ml-3\">Installments</span>,\n        // width: 600,\n        accessor: \"installments\",\n        Cell: data => {\n          return (\n            <table style={{ maxWidth: 300 }}>\n              {get(data, \"original['Vendor Name']\", \"\") && <tr className=\"mb-2\">\n                {!selectedWeek && selectedWeek !== 0 && <td>\n                  <strong>No</strong>\n                </td>}\n                <td>\n                  <strong>Date</strong>\n                </td>\n                <td className=\"text-right\">\n                  <strong>Amount</strong>\n                </td>\n              </tr>}\n              {get(data, \"original.installments\", []).map((d, i) => (\n                <tr className=\"mb-2\">\n                  {!selectedWeek && selectedWeek !== 0 && <td className=\"width-94px\">#{i+1}</td>}\n                  <td className=\"width-94px\">\n                    {moment(d[1])\n                      .format(\"MM/DD/YYYY\")}\n                  </td>\n                  <td className=\"width-94px text-right\">{getFAWC(d[2])}</td>\n                </tr>\n              ))}\n            </table>\n          );\n        }\n      }\n    ];\n\n    const modalRows = paymentPlanDetails.filter((x) => payplanmodalkey === \"paymentplan\" ? x.is_payment_plan : !x.is_payment_plan );\n\n    return (\n      <div className=\"row px-15 reports\" id=\"dashboardBody\">\n        <Modal className=\"mt-4\" size=\"lg\" show={modal} onHide={() => this.setModal(\"\")}>\n          <Modal.Header closeButton />\n          <Modal.Body style={{ \"max-height\": \"calc(100vh - 210px)\", \"overflow-y\": \"auto\" }}>\n            <div>\n              {\n                fetchingPaymentPlan\n                ?\n                <CustomSpinner />\n                :\n                <div>\n                  <div className=\"row\">\n                    <span className=\"col-md-6\">\n                      <Nav\n                        variant=\"tabs\"\n                        activeKey={payplanmodalkey}\n                        onSelect={(k) => this.setState({ payplanmodalkey: k })}\n                        >\n                        <Nav.Item>\n                          <Nav.Link eventKey=\"paymentplan\">Payment Plans</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                          <Nav.Link eventKey=\"partialpayment\">Partial Payments</Nav.Link>\n                        </Nav.Item>\n                      </Nav>\n                    </span>\n                    <span className=\"col-md-6\">\n                      <ExportPaymentPlan exportData={paymentPlanDetails} />\n                    </span>\n                  </div>\n                  <ReactTable\n                    noDataText=\"No data found\"\n                    minRows={modalRows.length > 20 ? 20 : modalRows.length}\n                    resizable={true}\n                    showPagination={false}\n                    getTrProps={(state, d, column) => {\n                      return {\n                        onClick: e => {\n                          get(d, \"original.is_payment_plan\", \"\")\n                          ?\n                          window.open(\n                            `${window.location.origin}/vendors/${d.original.supplierid}?payment_plan`,\n                            \"_blank\"\n                          )\n                          :\n                          get(d, \"original.invoices[0]\", \"\") && window.open(\n                            `${window.location.origin}/payables/${d.original.invoices[0]}`,\n                            \"_blank\"\n                          );\n                        }\n                      };\n                    }}\n                    columns={planTableColumns}\n                    data={modalRows}\n                  />\n                </div>\n              }\n            </div>\n          </Modal.Body>\n        </Modal>\n        <div className={sidebarExpanded ? \"col-md-9 pl-0 pr-1\" : \"col-md-11 expanded-report\"}>\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <div class=\"reportlisthead\" style={{ float: \"left\" }}>\n                    {reportFrequency === 'weekly' ? 'Weekly' : 'Monthly'} Cash Flow As of {moment().format(\"MMM DD, YYYY\")}\n                  </div>\n                </div>\n              </div>\n\n                <div id=\"report-scroll\" className=\"report-main-wrapper\">\n                  {!isTotalLoading && <div>\n                    <table id=\"exportexceltable\" style={{ display: \"none\" }}>\n                      <thead>\n                        <tr>\n                          {generateTableHeadings(forecastConfig + actualsCount + 1, actualsCount, reportFrequency)}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>\n                          <b>{reportFrequency === 'weekly' ? 'Week' : 'Month'} Ending</b>\n                          </td>\n                          {dateRanges.map(dt => (\n                            <td>\n                              <b>{dt}</b>\n                            </td>\n                          ))}\n                          <td />\n                        </tr>\n                        <tr>\n                          <td>\n                            <b>Beginning Cash</b>\n                          </td>\n                          {bankbalance.map((b, k) => (\n                            <td key={`bb${k}`}>{formatNumber(b)}</td>\n                          ))}\n                        </tr>\n                        <tr>\n                          <td />\n                          {dummyArray.map(() => (\n                            <td />\n                          ))}\n                        </tr>\n                        <tr>\n                          <td>\n                            <b>Cash Inflow</b>\n                          </td>\n                          {dummyArray.map(() => (\n                            <td />\n                          ))}\n                        </tr>\n                        <tr>\n                          <td>A/R</td>\n                          {arInvoiceTotal.map((d, k) => (\n                            <td key={`ar${k}`}>{formatNumber(d)}</td>\n                          ))}\n                        </tr>\n                        {\n                        customerCategoryTotals.length ?\n                          customerCategoryTotals.map(c => (\n                              <tr>\n                                <td>{c.category}</td>\n                                {c.total.map((d, k) => (\n                                  <td key={`ct${k}`} className=\"text-right\">\n                                    {formatNumber(d)}\n                                  </td>\n                                ))}\n                                <td />\n                              </tr>\n                            )) : null\n                        }\n                        {\n                          customerCategoryTotals.length ?\n                            <React.Fragment>\n                              <tr>\n                                <td>Others</td>\n                                {customerCategoryOtherTotal.map((d, k) => (\n                                  <td key={`ct${k}`} className=\"text-right\">\n                                    {formatNumber(d)}\n                                  </td>\n                                ))}\n                                <td></td>\n                              </tr>\n                              <tr>\n                                <td></td>\n                                {dummyArray.map(() => (\n                                  <td />\n                                ))}\n                                <td></td>\n                              </tr>\n                            </React.Fragment>\n                            : null\n                        }\n                        <tr\n                          className=\"cursour-pointer\"\n                        >\n                          <td>Order Backlog</td>\n                          {orderBacklogTotal.map((d, k) => (\n                            <td key={`ar${k}`} data-id={`ar${k}`} className=\"text-right t-link-black\">\n                              {formatNumber(d)}\n                            </td>\n                          ))}\n                          <td />\n                        </tr>\n                      {cashInMain.length\n                        ? cashInMain.map((arr, line) => {\n                              return (\n                                <tr>\n                                  <React.Fragment>\n                                    <td>\n                                      {get(\n                                        arr.find(d => d && d.description),\n                                        \"description\",\n                                        \"\"\n                                      )}\n                                    </td>\n                                    {arr.map((d, k) => {\n                                      if (d) {\n                                        return <td key={`ar${k}`}>{formatNumber(d.amount)}</td>;\n                                      } else if (k === arr.length - 1) {\n                                        return null;\n                                      }\n                                      return <td key={`ar${k}`} />;\n                                    })}\n                                  </React.Fragment>\n                                </tr>\n                              );\n                            })\n                          : null}\n                        <tr>\n                          <td>\n                            <b>Total</b>\n                          </td>\n                          {cashInTotal.map((d, k) => (\n                            <td key={`ci${k}`}>{formatNumber(d)}</td>\n                          ))}\n                        </tr>\n                        <tr>\n                          <td />\n                          {dummyArray.map(() => (\n                            <td />\n                          ))}\n                        </tr>\n                        <tr>\n                          <td>\n                            <b>Cash Outflow</b>\n                          </td>\n                          {dummyArray.map(() => (\n                            <td />\n                          ))}\n                        </tr>\n                        <tr>\n                          <td>A/P</td>\n                          {apInvoiceTotal.map((d, k) => (\n                            <td key={`py${k}`}>{formatNumber(d)}</td>\n                          ))}\n                          <td />\n                        </tr>\n                        {\n                          vendorCategoryTotals.length ?\n                            vendorCategoryTotals.map(c => (\n                              <tr>\n                                <td>{c.category}</td>\n                                {c.total.map((d, k) => (\n                                  <td key={`ct${k}`} className=\"text-right\">\n                                    {formatNumber(d)}\n                                  </td>\n                                ))}\n                                <td />\n                              </tr>\n                            )) : null\n                        }\n                        {\n                        vendorCategoryTotals.length ?\n                            <React.Fragment>\n                              <tr>\n                                <td>Others</td>\n                                {vendorCategoryOtherTotal.map((d, k) => (\n                                  <td key={`ct${k}`} className=\"text-right\">\n                                    {formatNumber(d)}\n                                  </td>\n                                ))}\n                                <td></td>\n                              </tr>\n                              <tr>\n                                <td></td>\n                                {dummyArray.map(() => (\n                                  <td />\n                                ))}\n                                <td></td>\n                              </tr>\n                            </React.Fragment>\n                            : null\n                        }\n                        <tr>\n                          <td>Payment Plans & Partial Payments</td>\n                          {paymentPlanTotal.map((d, k) => (\n                            <td key={`ar${k}`}>{formatNumber(d)}</td>\n                          ))}\n                        </tr>\n                        <tr>\n                          <td>Payroll, Taxes &amp; Benefits (401K)</td>\n                          {payrollTotal.map((d, k) => (\n                            <td key={`py${k}`}>{formatNumber(d)}</td>\n                          ))}\n                          <td />\n                        </tr>\n                        {cashOutMain.length\n                          ? cashOutMain.map((arr, line) => {\n                              return (\n                                <tr>\n                                  <React.Fragment>\n                                    <td>\n                                      {get(\n                                        arr.find(d => d && d.description),\n                                        \"description\",\n                                        \"\"\n                                      )}\n                                    </td>\n                                    {arr.map((d, k) => {\n                                      if (d) {\n                                        return <td key={`py${k}`}>{formatNumber(d.amount)}</td>;\n                                      } else if (k === arr.length - 1) {\n                                        return null;\n                                      }\n                                      return <td key={`py${k}`} />;\n                                    })}\n                                  </React.Fragment>\n                                </tr>\n                              );\n                            })\n                          : null}\n                        <tr>\n                          <td />\n                          {dummyArray.map(() => (\n                            <td />\n                          ))}\n                        </tr>\n                        <tr>\n                          <td>\n                            <b>Total</b>\n                          </td>\n                          {cashOutTotal.map((d, k) => (\n                            <td key={`co${k}`}>\n                              <b>{formatNumber(d)}</b>\n                            </td>\n                          ))}\n                        </tr>\n                        <tr>\n                          <td>Net Operating Cash Flow</td>\n                          {netOperatingCashFlow.map((d, k) => (\n                            <td key={`noc${k}`}>{formatNumber(d)}</td>\n                          ))}\n                          <td></td>\n                        </tr>\n                        <tr>\n                          <td></td>\n                          {dummyArray.map(() => (\n                            <td />\n                          ))}\n                          <td></td>\n                        </tr>\n                        <tr>\n                          <td>\n                            <b>Ending Cash Balance</b>\n                          </td>\n                          {endingCashBalanceTotal.map((d, k) => (\n                            <td>{formatNumber(d)}</td>\n                          ))}\n                          <td></td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>}\n                  <div className={`row ${isTotalLoading ? 'pos-relative' : ''}`} id=\"exportgraph\">\n                    <div className={`${isTotalLoading ? 'full-loader' : 'd-none'}`}>\n                      <CustomSpinner />\n                    </div>\n                    <div className=\"col-md-12 d-flex justify-content-center\">\n                      <div style={{ width: \"100%\"}}>\n                        <WeeklyCashFlowChart\n                          data={\n                            !isTotalLoading &&\n                            dateRanges.map((date, index) => ({\n                              date: moment(date).format('MM/DD'),\n                              inflow: cashInTotal[index],\n                              outflow: cashOutTotal[index] * -1,\n                              nonOpDisbursement: netOperatingCashFlow[index],\n                              endingCashBalance: endingCashBalanceTotal[index]\n                            }))\n                          }\n                        />\n                      </div>\n                    </div>\n                  </div>\n                <div className=\"mt-3 mb-2 clearfix\">\n                  <Link to=\"/settings/company#reports\" target=\"_blank\"><i className=\"fas fa-cog mr-1\" />Report Settings</Link>\n                  <Export reportFrequency={reportFrequency} loading={isTotalLoading} />\n                </div>\n                <div className={`fixed-table d-none ${sidebarExpanded ? 'quickview-sidebar-expanded' : 'quickview-sidebar-collapsed'}`} id=\"scroll-table\">\n                  <div className=\"reportlist\">\n                    <table>\n                      <thead className=\"bg-light-grey\">\n                        <tr>\n                          {generateTableHeadings(forecastConfig + actualsCount + 1, actualsCount, reportFrequency)}\n                          <th />\n                        </tr>\n                      </thead>\n                      {isBankBalanceLoading ? null : (\n                        <tbody>\n                          <tr>\n                            <td>\n                              <b>{reportFrequency === 'weekly' ? 'Week' : 'Month'} Ending</b>\n                            </td>\n                            {dateRanges.map((dt, i) => (\n                              <td key={`we${i}`} className={colorGreyCell(\"text-right\", actualsCount === i)}>\n                                <b>{dt}</b>\n                              </td>\n                            ))}\n                            <td />\n                          </tr>\n                          <tr className=\"row-grey\">\n                            <td>\n                              <b>Beginning Cash</b>\n                            </td>\n                            {bankbalance.map((b, k) => {\n                              const should_navigate = k === actualsCount;\n                              return (\n                                <td key={`bb${k}`}\n                                  onClick={() => {\n                                    if (should_navigate) {\n                                      localStorage.setItem(\"selectedBankBalanceCheckDate\", this.getStartDate(dateRanges[k]));\n                                      window.open(\n                                        `${window.location.origin}/settings/company#bankbalance`,\n                                        \"_blank\"\n                                      );\n                                    }\n                                  }}\n                                  data-id={`bb${k}`} className={colorGreyCell(`text-right ${should_navigate ? \"t-link cursour-pointer\" : \"\"}`, should_navigate)}>\n                                  {formatNumber(b)}\n                                </td>\n                              )\n                            })}\n                            <td />\n                          </tr>\n                          <tr></tr>\n                        </tbody>\n                      )}\n                    </table>\n                  </div>\n                </div>\n                <div className={`row overflow-auto m-0 ${isTotalLoading && \"pos-relative\"}`} id=\"scroll-table2\">\n                  <div className={`${isTotalLoading ? 'full-loader' : 'd-none'}`} style={{ left: document.getElementById('scroll-table2') && document.getElementById('scroll-table2').scrollLeft}}>\n                    <CustomSpinner />\n                  </div>\n                  <div id=\"exporttable\" className={`table-${forecastConfig} ${sidebarExpanded ? 'quickview-sidebar-expanded' : 'quickview-sidebar-collapsed'}`}>\n                      <div className=\"col-md-12\" id=\"static-header-table\">\n                        <div className=\"reportlist\">\n                          <table>\n                            <thead className=\"bg-light-grey\">\n                              <tr>\n                                {generateTableHeadings(forecastConfig + actualsCount + 1, actualsCount, reportFrequency)}\n                                <th />\n                              </tr>\n                            </thead>\n                            {isBankBalanceLoading ? null : (\n                              <tbody>\n                                <tr>\n                                  <td>\n                                    <b>{reportFrequency === 'weekly' ? 'Week' : 'Month'} Ending</b>\n                                  </td>\n                                  {dateRanges.map((dt, i) => (\n                                    <td key={`we${i}`} className={colorGreyCell(\"text-right\", actualsCount === i)}>\n                                      <b>{dt}</b>\n                                    </td>\n                                  ))}\n                                  <td />\n                                </tr>\n                                <tr className=\"row-grey\">\n                                  <td>\n                                    <b>Beginning Cash</b>\n                                  </td>\n                                  {bankbalance.map((b, k) => {\n                                    const should_navigate = k === actualsCount;\n                                    return (\n                                    <td key={`bb${k}`}\n                                    onClick={() => {\n                                      if (should_navigate) {\n                                        localStorage.setItem(\"selectedBankBalanceCheckDate\", this.getStartDate(dateRanges[k]));\n                                        window.open(\n                                          `${window.location.origin}/settings/company#bankbalance`,\n                                          \"_blank\"\n                                        );\n                                      }\n                                    }}\n                                        data-id={`bb${k}`} className={colorGreyCell(`text-right ${should_navigate ? \"t-link cursour-pointer\" : \"\"}`, should_navigate)}>\n                                      {formatNumber(b)}\n                                    </td>\n                                  )})}\n                                  <td />\n                                </tr>\n                                <tr></tr>\n                              </tbody>\n                            )}\n                          </table>\n                        </div>\n                      </div>\n                      <div className=\"col-md-12\">\n                        <Accordion allowMultipleExpanded allowZeroExpanded>\n                          <AccordionItem>\n                            <div className=\"reportlist\">\n                              <AccordionItemHeading>\n                                <AccordionItemButton>\n                                  <table>\n                                    <tr>\n                                      <td>\n                                        <b>\n                                          Cash Inflow{\" \"}\n                                          <i\n                                            onClick={e => {\n                                              e.stopPropagation();\n                                              this.setState({\n                                                addCashInflowItem: true,\n                                                item: [...dummyArrayItem],\n                                                itemFirst: {}\n                                              });\n                                            }}\n                                            className={`fa fa-plus cashinflowclick ${\n                                              editCashFlowItem !== \"\" || addCashOutFlowItem || addCashInflowItem\n                                                ? \"hide\"\n                                                : \"\"\n                                            }`}\n                                            title=\"Click to add item\"\n                                            aria-hidden=\"true\"\n                                          ></i>\n                                        </b>\n                                      </td>\n                                      {cashInTotal.map((d, k) => (\n                                        <td key={`ci${k}`} data-id={`ci${k}`} className={colorGreyCell(\"text-right\", actualsCount === k)}>\n                                          {formatNumber(d)}\n                                        </td>\n                                      ))}\n                                      <td />\n                                    </tr>\n                                  </table>\n                                </AccordionItemButton>\n                              </AccordionItemHeading>\n                              <AccordionItemPanel>\n                                {iscashinDataLoading ? null : (\n                                  <React.Fragment>\n                                    <Accordion allowMultipleExpanded allowZeroExpanded>\n                                      <AccordionItem>\n                                        <AccordionItemHeading>\n                                          <AccordionItemButton className=\"accordion__button with-arrow-data\">\n                                            <table>\n                                              <tbody>\n                                                <tr>\n                                                  <td>A/R</td>\n                                                  {arInvoiceTotal.map((d, k) => (\n                                                    <td key={`ar${k}`} onClick={(e) => this.openDetailsPage(\"/receivables\", d, k, null, e)} data-id={`ar${k}`} className={colorGreyCell(\"text-right t-link-black\", actualsCount === k)}>\n                                                      {formatNumber(d)}\n                                                    </td>\n                                                  ))}\n                                                  <td />\n                                                </tr>\n                                              </tbody>\n                                            </table>\n                                          </AccordionItemButton>\n                                        </AccordionItemHeading>\n                                        <AccordionItemPanel>\n                                          <table>\n                                            <tbody>\n                                              {\n                                              customerCategoryTotals.length ?\n                                                customerCategoryTotals.map(c => (\n                                                    <tr>\n                                                      <td className=\"pl-30px\">{c.category}</td>\n                                                      {c.total.map((d, k) => (\n                                                        <td key={`ct${k}`} onClick={() => this.openDetailsPage(\"/receivables\", d, k, { customer_category_id: c.id })} className={colorGreyCell(\"text-right t-link-black\", actualsCount === k)}>\n                                                          {formatNumber(d)}\n                                                        </td>\n                                                      ))}\n                                                      <td />\n                                                    </tr>\n                                                  )) : null\n                                              }\n                                              {\n                                                customerCategoryTotals.length ?\n                                                  <React.Fragment>\n                                                    <tr>\n                                                      <td className=\"pl-30px\">Others</td>\n                                                      {customerCategoryOtherTotal.map((d, k) => (\n                                                        <td key={`ct${k}`} onClick={() => this.openDetailsPage(\"/receivables\", d, k, { customer_category_id: '0' })} className={colorGreyCell(\"text-right t-link-black\", actualsCount === k)}>\n                                                          {formatNumber(d)}\n                                                        </td>\n                                                      ))}\n                                                    <td />\n                                                    </tr>\n                                                    <tr>\n                                                      <td></td>\n                                                      {dummyArray.map((d , k) => (\n                                                        <td className={colorGreyCell(\"\", actualsCount === k)} />\n                                                      ))}\n                                                      <td></td>\n                                                    </tr>\n                                                  </React.Fragment>\n                                                : null\n                                              }\n                                            </tbody>\n                                          </table>\n                                        </AccordionItemPanel>\n                                      </AccordionItem>\n                                    </Accordion>\n                                    <table>\n                                      <tbody>\n                                        {addCashInflowItem ? this.addNewItem(\"addCashInflowItem\") : null}\n                                        <tr\n                                          className=\"cursour-pointer\"\n                                        >\n                                          <td>Order Backlog</td>\n                                          {orderBacklogTotal.map((d, k) => (\n                                            <td onClick={(e) => this.openDetailsPage(\"/backlog\", d, k, null, e)} key={`ar${k}`} data-id={`ar${k}`} className={colorGreyCell(\"text-right t-link-black\", actualsCount === k)}>\n                                              {formatNumber(d)}\n                                            </td>\n                                          ))}\n                                          <td />\n                                        </tr>\n                                      {cashInMain.length\n                                        ? (!showCashInZeroItem && cashinZeroItem.length > 3 ? cashInFlowItem : cashInMain).map((arr, line) => {\n                                            if(editCashFlowItem !== line && arr.length){\n                                              return (<tr\n                                                style={{ cursor: \"pointer\" }}\n                                                onClick={() => {\n                                                  if (get(this.state, \"itemFirst.description\", \"\")) {\n                                                    return;\n                                                  }\n                                                  this.setState({ editCashFlowItem: line, addCashInflowItem: false });\n                                                }}\n                                              >\n                                                <td key={`ar-description-${line}`}>\n                                                  {get(\n                                                    arr.find(d => d && d.description),\n                                                    \"description\",\n                                                    \"\"\n                                                  )}\n                                                </td>\n                                                {arr.map((d, k) => {\n                                                  if (d) {\n                                                    return (\n                                                      <td\n                                                        key={`ar${k}`}\n                                                        data-id={`ar${k}`}\n                                                        className={colorGreyCell(\"text-right\", actualsCount === k)}\n                                                      >\n                                                        {formatNumber(d.amount)}\n                                                      </td>);\n                                                  } else if (k === arr.length - 1) {\n                                                    return (\n                                                      <td>\n                                                        <span className=\"options\">\n                                                          <span\n                                                            style={{ color: \"#007bff\", cursor: \"pointer\" }}\n                                                            title=\"Delete\"\n                                                            onClick={e => {\n                                                              e.stopPropagation();\n                                                              this.deleteRecords(arr, \"cashin\");\n                                                            }}\n                                                          >\n                                                            <i\n                                                              class=\"fa fa-trash-o\"\n                                                              aria-hidden=\"true\"\n                                                              style={{ fontSize: \"15px\" }}\n                                                            ></i>\n                                                          </span>\n                                                        </span>\n                                                      </td>\n                                                    );\n                                                  }\n                                                  return (\n                                                    <td className={colorGreyCell(\"text-right\", actualsCount === k)} key={`ar${k}`} data-id={`ar${k}`}>\n                                                      $0\n                                                    </td>\n                                                  );\n                                                })}\n                                              </tr>)\n                                            } else {\n                                              return (<ClickAwayListener onClickAway={e => this.closeEditMode(e)}>\n                                                <tr>\n                                                  {this.editLineItem(arr, \"addCashInflowItem\", \"editCashFlowItem\")}\n                                                </tr>\n                                              </ClickAwayListener>)\n                                            }\n                                          }) : null}\n                                        {cashinZeroItem.length > 3 ? this.renderMoreLessRow('showCashInZeroItem', showCashInZeroItem ? 'Show less' : 'Show more') : null}\n                                        <tr className=\"row-grey\">\n                                          <td>\n                                            <b>Total</b>\n                                          </td>\n                                          {cashInTotal.map((d, k) => (\n                                            <td key={`ci${k}`} data-id={`ci${k}`} className=\"text-right\">\n                                              <b>{formatNumber(d)}</b>\n                                            </td>\n                                          ))}\n                                          <td></td>\n                                        </tr>\n                                      </tbody>\n                                    </table>\n\n                                  </React.Fragment>\n                                )}\n                              </AccordionItemPanel>\n                            </div>\n                          </AccordionItem>\n                          <AccordionItem>\n                            <div className=\"reportlist\">\n                              <AccordionItemHeading>\n                                <AccordionItemButton>\n                                  <table>\n                                    <tr>\n                                      <td>\n                                        <b>\n                                          Cash Outflow{\" \"}\n                                          <i\n                                            title=\"Click to add item\"\n                                            onClick={e => {\n                                              e.stopPropagation();\n                                              this.setState({ addCashOutFlowItem: true });\n                                            }}\n                                            className={`fa fa-plus cashinflowclick ${\n                                              editCashOutItem !== \"\" || addCashOutFlowItem || addCashInflowItem\n                                                ? \"hide\"\n                                                : \"\"\n                                            }`}\n                                            aria-hidden=\"true\"\n                                          ></i>\n                                        </b>\n                                      </td>\n                                      {cashOutTotal.map((d, k) => (\n                                        <td data-id={`co${k}`} key={`co${k}`} className={colorGreyCell(\"text-right\", actualsCount === k)}>\n                                          {formatNumber(d)}\n                                        </td>\n                                      ))}\n                                      <td />\n                                    </tr>\n                                  </table>\n                                </AccordionItemButton>\n                              </AccordionItemHeading>\n                              <AccordionItemPanel>\n                                {iscashoutDataLoading ? null : (\n                                  <React.Fragment>\n                                    <Accordion allowMultipleExpanded allowZeroExpanded>\n                                      <AccordionItem>\n                                        <AccordionItemHeading>\n                                          <AccordionItemButton className=\"accordion__button with-arrow-data\">\n                                            <table>\n                                              <tr>\n                                                <td>A/P</td>\n                                                {apInvoiceTotal.map((d, k) => (\n                                                  <td key={`py${k}`} onClick={(e) => this.openDetailsPage(\"/payables\", d, k, null, e)} data-id={`py${k}`} className={colorGreyCell(\"text-right t-link-black\", actualsCount === k)}>\n                                                    {formatNumber(d)}\n                                                  </td>\n                                                ))}\n                                                <td />\n                                              </tr>\n                                            </table>\n                                          </AccordionItemButton>\n                                        </AccordionItemHeading>\n                                        <AccordionItemPanel>\n                                          <table>\n                                            <tbody>\n                                              {\n                                              vendorCategoryTotals.length ?\n                                                vendorCategoryTotals.map(c => (\n                                                  <tr>\n                                                    <td className=\"pl-30px\">{c.category}</td>\n                                                    {c.total.map((d, k) => (\n                                                      <td key={`ct${k}`} onClick={() => this.openDetailsPage(\"/payables\", d, k, { vendor_category_id: c.id })} className={colorGreyCell(\"text-right t-link-black\", actualsCount === k)}>\n                                                        {formatNumber(d)}\n                                                      </td>\n                                                    ))}\n                                                    <td />\n                                                  </tr>\n                                                )) : null\n                                              }\n                                              {\n                                                vendorCategoryTotals.length ?\n                                                  <React.Fragment>\n                                                    <tr>\n                                                      <td className=\"pl-30px\">Others</td>\n                                                      {vendorCategoryOtherTotal.map((d, k) => (\n                                                        <td key={`ct${k}`} onClick={() => this.openDetailsPage(\"/payables\", d, k, { vendor_category_id: '0' })} className={colorGreyCell(\"text-right t-link-black\", actualsCount === k)}>\n                                                          {formatNumber(d)}\n                                                        </td>\n                                                      ))}\n                                                      <td></td>\n                                                    </tr>\n                                                    <tr>\n                                                      <td></td>\n                                                      {dummyArray.map((d, k) => (\n                                                        <td className={colorGreyCell(\"\", actualsCount === k)} />\n                                                      ))}\n                                                      <td></td>\n                                                    </tr>\n                                                  </React.Fragment>\n                                                : null\n                                              }\n                                            </tbody>\n                                          </table>\n                                        </AccordionItemPanel>\n                                      </AccordionItem>\n                                    </Accordion>\n                                    <table>\n                                      <tbody>\n                                        {addCashOutFlowItem ? this.addNewItem(\"addCashOutFlowItem\") : null}\n                                        <tr\n                                          className=\"cursour-pointer\"\n                                          onClick={this.getPaymentPlanDetails}\n                                        >\n                                          <td>Payment Plans & Partial Payments</td>\n                                          {paymentPlanTotal.map((d, k) => (\n                                            <td onClick={(e) => this.getPaymentPlanDetails(e, k)} key={`ar${k}`} data-id={`ar${k}`} className={colorGreyCell(\"text-right t-link-black\", actualsCount === k)}>\n                                              {formatNumber(d)}\n                                            </td>\n                                          ))}\n                                          <td />\n                                        </tr>\n                                        <tr>\n                                          <td>Payroll, Taxes &amp; Benefits (401K)</td>\n                                          {payrollTotal.map((d, k) => (\n                                            <td key={`py${k}`} onClick={() => this.openDetailsPage(\"/payroll\", d, k)} data-id={`py${k}`} className={colorGreyCell(\"text-right t-link-black\", actualsCount === k)}>\n                                              {formatNumber(d)}\n                                            </td>\n                                          ))}\n                                          <td />\n                                        </tr>\n                                      {cashOutMain.length\n                                        ? (!showCashOutZeroItem && cashoutZeroItem.length > 3 ? cashOutFlowItem : cashOutMain).map((arr, line) => {\n                                            if (editCashOutItem !== line) {\n                                              return (\n                                                <tr\n                                                  style={{ cursor: \"pointer\" }}\n\n                                                  onClick={() => {\n                                                    if (get(this.state, \"itemFirst.description\", \"\")) {\n                                                      return;\n                                                    }\n                                                    this.setState({ editCashOutItem: line, addCashOutFlowItem: false });\n                                                  }}\n                                                >\n                                                  <td key={`py-description-${line}`}>\n                                                    {get(\n                                                      arr.find(d => d && d.description),\n                                                      \"description\",\n                                                      \"\"\n                                                    )}\n                                                  </td>\n                                                  {arr.map((d, k) => {\n                                                    if (d) {\n                                                      return (\n                                                        <td\n                                                          key={`py${k}`}\n                                                          data-id={`py${k}`}\n                                                          className={colorGreyCell(\"text-right\", actualsCount === k)}\n                                                        >\n                                                          {formatNumber(d.amount)}\n                                                        </td>\n                                                      );\n                                                    } else if (k === arr.length - 1) {\n                                                      return (\n                                                        <td>\n                                                          <span className=\"options\">\n                                                            <span\n                                                              style={{ color: \"#007bff\", cursor: \"pointer\" }}\n                                                              title=\"Delete\"\n                                                              onClick={e => {\n                                                                e.stopPropagation();\n                                                                this.deleteRecords(arr, \"cashout\");\n                                                              }}\n                                                            >\n                                                              <i\n                                                                class=\"fa fa-trash-o\"\n                                                                aria-hidden=\"true\"\n                                                                style={{ fontSize: \"15px\" }}\n                                                              ></i>\n                                                            </span>\n                                                          </span>\n                                                        </td>\n                                                      );\n                                                    }\n                                                    return (\n                                                      <td className={colorGreyCell(\"text-right\", actualsCount === k)} key={`py${k}`} data-id={`py${k}`}>\n                                                        $0\n                                                      </td>\n                                                    );\n                                                  })}\n                                                </tr>\n                                              )\n                                            } else {\n                                              return (\n                                                <ClickAwayListener onClickAway={e => this.closeEditMode(e)}>\n                                                  <tr>\n                                                    {this.editLineItem(arr, \"addCashOutFlowItem\", \"editCashOutItem\")}\n                                                  </tr>\n                                                </ClickAwayListener>\n                                              )\n                                            }\n                                          }) : null}\n                                        {cashoutZeroItem.length > 3 ? this.renderMoreLessRow('showCashOutZeroItem', showCashOutZeroItem ? 'Show less' : 'Show more') : null}\n                                        <tr className=\"row-grey\">\n                                          <td>\n                                            <b>Total</b>\n                                          </td>\n                                          {cashOutTotal.map((d, k) => (\n                                            <td data-id={`co${k}`} key={`co${k}`} className={colorGreyCell(\"text-right\", actualsCount === k)}>\n                                              <b>{formatNumber(d)}</b>\n                                            </td>\n                                          ))}\n                                          <td></td>\n                                        </tr>\n                                      </tbody>\n                                    </table>\n                                  </React.Fragment>\n                                )}\n                              </AccordionItemPanel>\n                            </div>\n                          </AccordionItem>\n                        </Accordion>\n                      </div>\n                      <div className=\"col-md-12\">\n                        <div className=\"reportlist\">\n                          {isTotalLoading ? null : (\n                            <table>\n                              <tbody>\n                                <tr>\n                                  <td>Net Operating Cash Flow</td>\n                                  {netOperatingCashFlow.map((d, k) => (\n                                    <td data-id={`noc${k}`} className={colorGreyCell(\"text-right\", actualsCount === k)}>\n                                      {formatNumber(d)}\n                                    </td>\n                                  ))}\n                                  <td></td>\n                                </tr>\n                                <tr>\n                                  <td></td>\n                                  {dummyArray.map((d, k) => (\n                                    <td className={colorGreyCell(\"\", actualsCount === k)} />\n                                  ))}\n                                  <td></td>\n                                </tr>\n                                <tr className=\"row-grey\">\n                                  <td>\n                                    <b>Ending Cash Balance</b>\n                                  </td>\n                                  {endingCashBalanceTotal.map((d, k) => (\n                                    <td data-id={`ecb${k}`} className=\"text-right\">\n                                      <b>{formatNumber(d)}</b>\n                                    </td>\n                                  ))}\n                                  <td></td>\n                                </tr>\n                              </tbody>\n                            </table>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n            </div>\n          </div>\n        </div>\n        <QuickReviewSidebar\n          key={dateRanges.length}\n          reportFrequency={reportFrequency}\n          endDate={dateRanges[actualsCount]}\n          startDate={this.getStartDate(dateRanges[actualsCount])}\n          handleSideBarExpand={this.handleSideBarExpand}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({ navigationExpanded: state.navigation.openleftnav });\n\nexport default connect(mapStateToProps, null)(Reports)\n"],"sourceRoot":""}