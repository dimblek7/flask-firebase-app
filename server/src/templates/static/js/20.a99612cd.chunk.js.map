{"version":3,"sources":["containers/customers/customerDetailsBacklog.js","containers/customers/AutoReminderModal.js","containers/customers/CustomerDetailSidebar.js","containers/customers/customerDetails.js","containers/customers/paymentGraph.js","containers/customers/Agingchart.js","containers/customers/graph.js","containers/customers/customersList.js","containers/customers/customers.js"],"names":["donutChartData","name","dataindex","urlkey","value","renderActiveShape","props","cx","cy","innerRadius","outerRadius","startAngle","endAngle","fill","className","DonutChart","data","onRecordClick","total","selectedStatusObject","useState","activeindex","setactiveindex","useEffect","get","width","height","animationDuration","activeIndex","activeShape","dataKey","onClick","e","payload","onMouseEnter","index","onMouseLeave","position","getShortNumber","map","entry","COLORS","length","range","Today","ExportCSV","element","OrderId","Customer","Description","Date","moment","format","Amount","convertDecimalNo","Status","BacklogList","onReset","document","getElementById","reset","setState","endDate","startDate","subtract","sentiment","status","dateType","customerSelect","currPage","customerList","invoiceSelect","category","selectedEntity","getData","getClassificationData","exportAllData","flag","customerid","URL","instance","then","response","modified","forEach","record","order_line_instance","push","description","ol_amount_open","amount_open","exportedData","showexport","refs","csv","link","click","csvData","filename","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","Blob","FileSaver","ExportXLSX","catch","handleAPIError","setNextPage","state","filterData","getallentities","resp","allentities","setPrevPage","setDates","interval","showFilter","filters","id","localStorage","setItem","JSON","stringify","dataUrl","tempobj","find","x","isFetching","isFetchingOriginal","rows","originalRows","Promise","all","resps","pending_fulfillment_amount","partially_fulfilled_amount","showDonut","setshowExport","searchCustomer","text","searchBy","url","res","result","customersList","setshowFilter","debounceMethod","debounce","bind","customerId","iscustomerFetching","isinvoiceFetching","dateModalType","showDateModal","this","window","scrollTo","activeKey","setactiveKey","isheaderchecked","isselected","columns","Header","newvalue","checked","accessor","Cell","stopPropagation","list","style","marginLeft","sortable","filterable","getFormattedDate","getFAWC","Math","round","isrowselected","tableProps","TheadComponent","dateKeys","Invoice","PayIQ","Due","header","show","handleClose","handleSubmit","allpromises","filter","put","Toaster","overflowY","entity","i","backgroundColor","Nav","variant","onSelect","k","Item","Link","eventKey","role","data-toggle","aria-haspopup","aria-expanded","ClickAwayListener","onClickAway","aria-labelledby","ref","display","fontSize","textAlign","marginRight","marginBottom","cursor","borderTopLeftRadius","borderTopRightRadius","marginTop","defaultChecked","onChange","d","target","aria-hidden","key","noDataText","minRows","loading","resizable","showPagination","getTrProps","rowInfo","column","open","location","origin","original","defaultSorted","desc","disabled","React","Component","connect","login","payables","AutoReminderModal","onHide","templateList","defaultData","getCustomerReminder","days","setDays","template_id","setTemplateId","reminderType","setReminderType","is_enabled","setIsEnabled","ar_age_in_days","setAr_age_in_days","frequency_in_days","setFrequency_in_days","setActiveKey","abs","Modal","closeButton","is_recurring","Body","action","method","defaultValue","selected","onInput","placeholder","htmlFor","Button","requestObject","customer_id","Number","vendorCategories","CustomerDetailSidebar","showContactModal","preExpanded","showReminderModal","emailTemplateData","defaultEmailData","handleContactModal","getEmailTemplates","updateCustomer","postData","expandAndOpen","number","handleToggleCollapse","getName","inputNumbers","querySelectorAll","invalidChars","addEventListener","replace","includes","preventDefault","collapse","onEmailSave","customerData","setshowNoteModal","customerReminder","setisinvoicelevelnote","notesUpdated","setnotesUpdated","customerCategoryList","paymentTerms","region","original_entity_name","Fragment","OverlayTrigger","placement","overlay","Tooltip","fe_config","MODE","setemailData","to","onSave","allowMultipleExpanded","allowZeroExpanded","class","SelectEditorCell","options","updateValue","auth","username","TokenManager","password","random","toString","classification","onBlur","TextEditorCell","email","GetCustomerDetail","borderBottom","paddingBottom","NotesList","onUpdate","AddContactModal","vendorData","selectedSection","paymentId","history","match","selectedpayment","showNoteModal","isinvoicelevelnote","showpayIQDateModal","setshowpayIQDateModal","invoiceList","setinvoiceList","setisFetching","setlast12MonthTotal","last12MonthPaid","setlast12MonthPaid","showChart","setshowChart","setcustomerData","setshowexport","page","setpage","per_page","fulldata","setfulldata","setCustomerReminder","toggleCollapse","setToggleCollapse","setExportedData","setCustomerCategoryList","getItem","hash","sort_by","setsort_by","sort_order","setsort_order","csvRef","useRef","today","tomorrow","add","tomorrowPlusYear","todayMinusYear","setselectedSection","chartData","urlparams","getCustomerCategory","setAPISort","sort_by_key","customerName","params","responses","response2","slice","fastForwardPayiq","by","expected_date","temp","current","deletePayIq","setconfirmationboxData","msg","resetconfirmationboxData","allselectedinvoices","instanceWithRetry","delete","ids","updatedinvoiceList","src","filterarrow","alt","sortkey","prePopulatedBody","selectedInvoices","invoice","invoice_number","due_date","total_amount_due","data-target","takeAction","newdata","fetchingInvoices","body","post","invoices","inv","files","isbase64","getIsPayAdmin","convertAmount","reduce","a","b","invoice_amount","subject","cc","message","bodyFormData","FormData","set","file","append","File","b64toBlob","decodeURIComponent","parse","content","instanceMultipart","resetemail","date","note","chartTotal","TextArea","invoice_id","expected_date_override","float","goBack","title","color","ariaHidden","prevState","CustomChart","isLoading","margin","right","left","tick","XAxisTick","tickFormatter","wrapperStyle","paddingLeft","stackId","barWidth","PureComponent","PaymentGraph","averagePaymentProjectionData","setAveragePaymentProjectionData","selectedPaytab","setselectedPaytab","setStartDate","setIsFetching","getAveragePaymentGraphData","l30done","g30done","paiddone","xAxisLavel","GetXLabelObjects","DATA","allLess30Promises","start","end","l30","setPaymentGraphLoading","allGreater30Promises","g30","allPaidPromises","paid","switchSelectedTab","tab","fullsize","useWindowSize","onPieEnter","onPieLeave","label","align","verticalAlign","PieChartTooltip","dummyData","from_date","is_future","to_date","is_past","PREV_URL","AgingChart","originalstartDate","originalendDate","showgraphs","setchartData","settotal","timer","total_url","apis","days_to_add","betweenDays","startdate","enddate","from_end","to_start","days_to_subtract","updated_from_date","updated_to_date","updateSection","from","sec","setstartDate","setendDate","clearTimeout","setTimeout","Graphs","loadCustomerList","paymentGraphLoading","invoiceGraphLoading","setInvoiceGraphLoading","minWidth","data-highcharts-chart","classname","overflow","Agingchart","resetFilter","GLOBAL_URL","DATES_CHANGED","changeSelection","setrows","setCustomerList","selectedCustomer","setselectedCustomer","setIsCustomerFetching","setIsfetching","setLoadCustomerListing","setoriginalstartDate","setoriginalendDate","is_dateupdated_here","setis_dateupdated_here","setinterval","setper_page","setid","exporting","setexporting","setshowgraphs","Yesterday","showTabs","getURL","pagination","split","param","join","amount_due","amount_not_due","updatedRows","prev","aft","due_dates","notdue_dates","isdueupdated","isnotdueupdated","updateRows","responses2","graphProps","Tabs","Tab","Autocomplete","suggestions","uniqBy","s","getSelected","item","search","DateRangePicker","getSelectedDates","parentEl","withRouter","setselectedpayment","exact","path","component"],"mappings":"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","file":"static/js/20.a99612cd.chunk.js","sourcesContent":["import ClickAwayListener from \"components/ClickAwayListener\";\nimport DateModal from \"components/Popups/Date\";\nimport CustomSpinner from \"components/Spinner\";\nimport Toaster from \"components/Toaster\";\nimport PieChartPlaceholder from \"components/Recharts/Placeholders/Piechart\";\nimport * as FileSaver from \"file-saver\";\nimport { handleAPIError } from \"handlers/setters\";\nimport debounce from \"lodash/debounce\";\nimport get from \"lodash/get\";\nimport moment from \"moment\";\nimport { default as React, useEffect, useState } from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { CSVLink } from \"react-csv\";\nimport { connect } from \"react-redux\";\nimport ReactTable from \"react-table-v6\";\nimport { Cell, Label, Pie, PieChart, Sector } from \"recharts\";\nimport { convertDecimalNo, getFAWC, getShortNumber } from \"utils\";\nimport { getFormattedDate } from \"utils/dates\";\nimport * as XLSX from \"xlsx\";\nimport { instance } from \"../../actions/axiosInstance\";\n\nconst donutChartData = [\n    // { name: \"All\", dataindex: 0, urlkey: \"all\", value: 4000 },\n    { name: \"Pending Fulfillment\", dataindex: 0, urlkey: \"pending_fulfillment\", value: 300 },\n    { name: \"Partially fulfilled\", dataindex: 1, urlkey: \"partially_fulfilled\", value: 300 },\n  ];\n\nconst renderActiveShape = (props) => {\n  const { cx, cy, innerRadius, outerRadius, startAngle, endAngle, fill } = props;\n\n  return (\n    <g>\n      <Sector\n        className=\"cursour-pointer\"\n        cx={cx}\n        cy={cy}\n        innerRadius={innerRadius}\n        outerRadius={outerRadius + 5}\n        startAngle={startAngle}\n        endAngle={endAngle}\n        fill={fill}\n      />\n    </g>\n  );\n};\n\nconst DonutChart = ({ data, onRecordClick, total, selectedStatusObject }) => {\n  const [activeindex, setactiveindex] = useState(null);\n\n  useEffect(() => {\n    (get(selectedStatusObject, \"dataindex\", null) || get(selectedStatusObject, \"dataindex\", null) === 0) &&\n      setactiveindex(get(selectedStatusObject, \"dataindex\", null));\n  }, [selectedStatusObject]);\n\n  function onPieEnter(data, index) {\n    setactiveindex(index);\n  }\n  function onPieLeave(data, index) {\n    setactiveindex(null || get(selectedStatusObject, \"dataindex\", null));\n  }\n\n  return (\n    <PieChart width={320} height={320}>\n      <Pie\n        animationDuration={1000}\n        activeIndex={activeindex}\n        activeShape={renderActiveShape}\n        data={data}\n        // cx={120}\n        // cy={200}\n        innerRadius={60}\n        outerRadius={140}\n        fill=\"#8884d8\"\n        dataKey=\"value\"\n        onClick={(e) => {\n          onRecordClick(e.payload.payload);\n        }}\n        onMouseEnter={onPieEnter}\n        onMouseLeave={onPieLeave}\n      >\n        <Label className=\"cursour-pointer\" width={30} position=\"center\" onClick={() => onRecordClick(null)}>\n          {`Total ${getShortNumber(total)}`}\n        </Label>\n        {data.map((entry, index) => (\n          <Cell className=\"cursour-pointer\" fill={COLORS[index % COLORS.length]} />\n        ))}\n      </Pie>\n    </PieChart>\n  );\n};\n\nconst COLORS = [\"#2B7EF6\", \"#7CA82D\", \"#EF853A\", \"#DB504D\", \"#424348\", \"#90ED7D\", \"#3C861F\", \"#F9D7E0\"];\n\nconst range = {\n  Today: 1,\n  \"Next 7 Days\": 7,\n  \"Next 30 Days\": 30,\n  \"Past 7 Days\": 7,\n  \"Past 30 Days\": 30,\n};\n\nexport const ExportXLSX = (csvData) => {\n  const filename = `Order backlog, ${moment().format(\"MMMM Do YYYY-h:mm:ss-a\")}.xlsx`;\n  const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n  const ws = XLSX.utils.json_to_sheet(csvData);\n  const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n  const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n  const data = new Blob([excelBuffer], { type: fileType });\n  FileSaver.saveAs(data, filename);\n};\n\nfunction ExportCSV(data) {\n  if (!data.length) {\n    return [\n      {\n        OrderId: \"\",\n        Customer: \"\",\n        Description: \"\",\n        Date: \"\",\n        Amount: \"\",\n        Status: \"\",\n      },\n    ];\n  }\n  const csvData = data.map((element) => ({\n    OrderId: get(element, \"document_number\", \"\"),\n    Customer: get(element, \"customer.name\", \"\"),\n    Description: get(element, \"description\", \"\"),\n    Date: moment(get(element, \"date\", \"\")).format(\"MM/DD/YYYY\"),\n    Amount: convertDecimalNo(get(element, \"total_amount_open\", 0)),\n    Status: get(element, \"status\", \"\"),\n  }));\n\n  return csvData;\n}\n\nclass BacklogList extends React.Component {\n  constructor() {\n    super();\n    this.debounceMethod = debounce(this.searchCustomer.bind(this), 500);\n    this.state = {\n      rows: [],\n      originalRows: [],\n      showFilter: false,\n      showexport: false,\n      currPage: 1,\n      isFetching: true,\n      isFetchingOriginal: true,\n      endDate: moment().format(\"MM/DD/YYYY\"),\n      startDate: moment().subtract(365, \"days\").format(\"MM/DD/YYYY\"),\n      interval: 30,\n      customerId: \"\",\n      sentiment: \"\",\n      dateType: \"order\",\n      status: \"all\",\n      invoiceSelect: null,\n      customerList: [],\n      customerSelect: null,\n      iscustomerFetching: false,\n      isinvoiceFetching: false,\n      exportedData: [],\n      dateModalType: \"\", // \"PayIQ\", \"Invoice\", \"Due\"\n      showDateModal: false,\n      allentities: [],\n      selectedEntity: null,\n      pending_fulfillment_amount: null,\n      partially_fulfilled_amount: null,\n    };\n    // this.filters = JSON.parse(localStorage.getItem(\"backlogFilters\"));\n  }\n\n  onReset = () => {\n    document.getElementById(\"filter-form\").reset();\n    this.setState(\n      {\n        endDate: moment().format(\"MM/DD/YYYY\"),\n        startDate: moment().subtract(365, \"days\").format(\"MM/DD/YYYY\"),\n        sentiment: \"\",\n        status: \"all\",\n        dateType: \"order\",\n        customerSelect: null,\n        currPage: 1,\n        customerList: [],\n        invoiceSelect: null,\n        category: 0,\n        selectedEntity: null,\n        selectedStatusObject: null,\n      },\n      () => {\n        // localStorage.removeItem(\"backlogFilters\");\n        this.getData();\n        this.getClassificationData();\n      }\n    );\n  };\n\n  componentDidMount() {\n    // const filters = JSON.parse(localStorage.getItem(\"backlogFilters\"));\n    // if (filters) {\n    //   this.setState(\n    //     {\n    //       ...filters,\n    //     },\n    //     () => this.filterData()\n    //   );\n    // } else {\n      this.getData();\n      this.getClassificationData();\n    // }\n    this.getallentities();\n    // set window at top\n    window.scrollTo(0, 0);\n  }\n\n  exportAllData = (flag) => {\n    const { customerid } = this.props;\n    let URL = `orderbacklog?per_page=2000&customer_id=${customerid}`;\n    instance\n      .get(URL)\n      .then((response) => {\n        const modified = [];\n        get(response, \"data.result\", []).forEach((record) => {\n          if (get(record, \"order_lines[0]\", \"\")) {\n            get(record, \"order_lines\", []).forEach((order_line_instance) => {\n              modified.push({\n                ...record,\n                description: order_line_instance.description,\n                ol_amount_open: order_line_instance.amount_open,\n              });\n            });\n          } else {\n            modified.push({\n              ...record,\n              description: \"-\",\n            });\n          }\n        });\n        this.setState(\n          {\n            exportedData: modified,\n            showexport: false,\n          },\n          () => {\n            if (flag === true) {\n              this.refs.csv.link.click();\n            } else {\n              ExportXLSX(ExportCSV(modified));\n            }\n          }\n        );\n      })\n      .catch((e) => handleAPIError(e));\n  };\n\n  setNextPage = () => {\n    this.setState(\n      {\n        currPage: this.state.currPage + 1,\n      },\n      this.filterData\n    );\n  };\n\n  getallentities = () => {\n    instance\n      .get(\"/payroll/setting\")\n      .then((resp) => {\n        this.setState({ allentities: get(resp, \"data.result\", []) });\n      })\n      .catch((e) => handleAPIError(e));\n  };\n\n  setPrevPage = () => {\n    this.setState(\n      {\n        currPage: this.state.currPage === 1 ? 1 : this.state.currPage - 1,\n      },\n      this.filterData\n    );\n  };\n\n  setDates = (startDate, endDate, interval) => {\n    this.setState({\n      startDate: moment(startDate).format(\"MM/DD/YYYY\"),\n      endDate: moment(endDate).format(\"MM/DD/YYYY\"),\n      interval: range[interval || 30],\n      showFilter: true,\n    });\n  };\n\n  filterData = () => {\n    this.setState({\n      showFilter: false,\n    });\n    const {\n      startDate,\n      endDate,\n      customerSelect,\n      sentiment,\n      currPage,\n      invoiceSelect,\n      dateType,\n      selectedEntity,\n    } = this.state;\n    let URL = ``;\n    const filters = {\n      currPage,\n    };\n\n    if (invoiceSelect) {\n      filters.invoiceSelect = invoiceSelect;\n      URL = URL + `&order_id=${invoiceSelect.name}`;\n    } else if (customerSelect) {\n      filters.customerSelect = customerSelect;\n      URL = URL + `&customer_id=${customerSelect.id}`;\n    } else {\n      if (startDate && endDate) {\n        filters.startDate = startDate;\n        filters.endDate = endDate;\n        URL = URL + `&from_date='${startDate}'&to_date='${endDate}'`;\n      }\n      if (selectedEntity) {\n        URL = URL + `&corp_entity_id=${selectedEntity}`;\n      }\n      if (sentiment) {\n        filters.sentiment = sentiment;\n        URL = URL + `&sentiment=${sentiment}`;\n      }\n      if (dateType) {\n        filters.dateType = dateType;\n        URL = URL + `&date_type='${dateType}'`;\n      }\n      if (customerSelect) {\n        filters.customerSelect = customerSelect;\n        URL = URL + `&customer_id=${customerSelect.id}`;\n      }\n    }\n\n    localStorage.setItem(\"backlogFilters\", JSON.stringify(filters));\n    this.getData(URL);\n    this.getClassificationData(URL);\n  };\n\n  getData = (dataUrl) => {\n    const { customerid } = this.props;\n    const { status } = this.state;\n    let URL = `orderbacklog?customer_id=${customerid}`;\n    if (status) {\n      URL = URL + `&status='${status}'`;\n      const tempobj = donutChartData.find((x) => x.urlkey === status);\n      this.setState({ selectedStatusObject: tempobj });\n    }\n    this.setState({\n      isFetching: true,\n    });\n    instance\n      .get(URL)\n      .then((response) => {\n        this.setState({\n          isFetching: false,\n          isFetchingOriginal: false,\n        });\n        const modified = [];\n        get(response, \"data.result\", []).forEach((record) => {\n          if (get(record, \"order_lines[0]\", \"\")) {\n            get(record, \"order_lines\", []).forEach((order_line_instance) => {\n              modified.push({\n                ...record,\n                description: order_line_instance.description,\n                ol_amount_open: order_line_instance.amount_open,\n              });\n            });\n          } else {\n            modified.push({\n              ...record,\n              description: \"-\",\n            });\n          }\n        });\n        this.setState({\n          rows: modified,\n          originalRows: modified,\n          showFilter: false,\n        });\n      })\n      .catch((e) => {\n        this.setState({\n          isFetching: false,\n          showFilter: false,\n        });\n        if (e) {\n          handleAPIError(e);\n        }\n      });\n  };\n\n  getClassificationData = (dataUrl) => {\n    const { customerid } = this.props;\n    let URL = `orderbacklog/total?customer_id=${customerid}`;\n    Promise.all([\n      instance.get(URL),\n      instance.get(`${URL}&status=pending_fulfillment`),\n      instance.get(`${URL}&status=partially_fulfilled`),\n    ]).then((resps) => {\n      this.setState({\n        total: resps[0].data.total,\n        pending_fulfillment_amount: resps[1].data.total,\n        partially_fulfilled_amount: resps[2].data.total,\n        showDonut: true,\n      });\n    });\n  };\n\n  setshowExport = (flag) => {\n    this.setState({\n      showexport: flag,\n    });\n  };\n\n  searchCustomer = (text, searchBy) => {\n    const url = `orderbacklog/search?${searchBy}=${text}`;\n    if (text) {\n      this.setState({\n        [`is${searchBy}Fetching`]: true,\n        customerList: [],\n        customerSelect: searchBy === \"customer\" ? null : this.state.customerSelect,\n        invoiceSelect: searchBy === \"document\" ? null : this.state.invoiceSelect,\n      });\n      instance\n        .get(url)\n        .then((res) => {\n          this.setState({\n            customerList: res.data.result,\n            [`is${searchBy}Fetching`]: false,\n          });\n        })\n        .catch((e) => handleAPIError(e));\n    } else {\n      this.setState({\n        customersList: [],\n      });\n    }\n  };\n\n  setshowFilter = (showFilter) => {\n    this.setState({\n      showFilter,\n    });\n  };\n\n  render() {\n    const { activeKey, setactiveKey } = this.props;\n    const {\n      rows,\n      total,\n      status,\n      endDate,\n      currPage,\n      startDate,\n      showFilter,\n      showexport,\n      isFetching,\n      allentities,\n      customerList,\n      invoiceSelect,\n      pending_fulfillment_amount,\n      partially_fulfilled_amount,\n      dateType,\n    } = this.state;\n    const isheaderchecked = get(rows, \"[0]\", \"\") && !rows.find((x) => !x.isselected);\n    const columns = [\n      {\n        Header: (\n          <input\n            className=\"md-checkbox\"\n            onClick={() => {\n              const newvalue = !isheaderchecked;\n              this.setState({ rows: [...rows.map((x) => ({ ...x, isselected: newvalue }))] });\n            }}\n            type=\"checkbox\"\n            checked={isheaderchecked ? true : false}\n          />\n        ),\n        accessor: \"isselected\",\n        Cell: (props) => (\n          <div>\n            <input\n              onClick={(e) => {\n                e.stopPropagation();\n                const newvalue = !props.value;\n                const list = [...rows];\n                list[props.index][\"isselected\"] = newvalue;\n                this.setState({ rows: list });\n              }}\n              className=\"md-checkbox\"\n              style={{ marginLeft: 15 }}\n              type=\"checkbox\"\n              checked={props.value ? true : false}\n            />\n          </div>\n        ),\n        sortable: false,\n        filterable: false,\n        width: 50,\n      },\n      {\n        Header: () => (\n          <span>\n            Order Id\n            <span className=\"sort-icons\">\n              <i className=\"fas fa-caret-up\"></i>\n              <i className=\"fas fa-caret-down\"></i>\n            </span>\n          </span>\n        ),\n        accessor: \"document_number\",\n        width: 120,\n        Cell: (data) => {\n          return (\n            <div data={{ id: get(data, \"original.id\", \"\"), type: \"invoice\" }}>\n              <span className=\"ml-2\">{get(data, \"original.document_number\", \"\")}</span>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => (\n          <span>\n            Customer\n            <span className=\"sort-icons\">\n              <i className=\"fas fa-caret-up\"></i>\n              <i className=\"fas fa-caret-down\"></i>\n            </span>\n          </span>\n        ),\n        width: 150,\n        accessor: \"customer.name\",\n        Cell: (data) => {\n          // use TableRow instead of div to enable DND\n          return (\n            <div data={{ id: get(data, \"original.customer.id\", \"\"), type: \"customer\" }}>\n              <span>{get(data, \"original.customer.name\", \"\")}</span>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => (\n          <span>\n            Description\n            <span className=\"sort-icons\">\n              <i className=\"fas fa-caret-up\"></i>\n              <i className=\"fas fa-caret-down\"></i>\n            </span>\n          </span>\n        ),\n        accessor: \"description\",\n        Cell: (data) => get(data, \"value\", \"-\"),\n      },\n      {\n        Header: () => (\n          <span>\n            Invoice Date\n            <span className=\"sort-icons\">\n              <i className=\"fas fa-caret-up\"></i>\n              <i className=\"fas fa-caret-down\"></i>\n            </span>\n          </span>\n        ),\n        accessor: \"expected_invoice_date\",\n        // width: 140,\n        // className: \"ml-2\",\n        Cell: (data) => getFormattedDate(get(data, \"value\", \"\")) || \"-\",\n      },\n      {\n        Header: () => (\n          <span>\n            Order Date\n            <span className=\"sort-icons\">\n              <i className=\"fas fa-caret-up\"></i>\n              <i className=\"fas fa-caret-down\"></i>\n            </span>\n          </span>\n        ),\n        accessor: \"date\",\n        // width: 140,\n        // className: \"ml-2\",\n        Cell: (data) => getFormattedDate(get(data, \"value\", \"\")) || \"-\",\n      },\n      {\n        Header: () => (\n          <span>\n            Amount\n            <span className=\"sort-icons\">\n              <i className=\"fas fa-caret-up\"></i>\n              <i className=\"fas fa-caret-down\"></i>\n            </span>\n          </span>\n        ),\n        accessor: \"total_amount_open\",\n        width: 80,\n        className: \"text-right pr-2\",\n        Cell: (data) => {\n          return getFAWC(\n            Math.round(get(data, \"original.ol_amount_open\", 0) || get(data, \"original.total_amount_open\", 0))\n          );\n        },\n      },\n      {\n        Header: () => (\n          <span>\n            Status\n            <span className=\"sort-icons\">\n              <i className=\"fas fa-caret-up\"></i>\n              <i className=\"fas fa-caret-down\"></i>\n            </span>\n          </span>\n        ),\n        accessor: \"status\",\n        // width: 150,\n        Cell: (data) => get(data, \"original.status\", \"-\"),\n      },\n    ];\n    const {\n      customerSelect,\n      iscustomerFetching,\n      isinvoiceFetching,\n      exportedData,\n      selectedStatusObject,\n      showDateModal,\n      dateModalType,\n      showDonut,\n    } = this.state;\n\n    const isrowselected = rows && rows.find((x) => x.isselected);\n\n    const donutChartData = showDonut && [\n      // { name: \"All\", dataindex: 0, urlkey: \"all\", value: 4000 },\n      { name: \"Pending Fulfillment\", dataindex: 0, urlkey: \"pending_fulfillment\", value: pending_fulfillment_amount },\n      { name: \"Partially Fulfilled\", dataindex: 1, urlkey: \"partially_fulfilled\", value: partially_fulfilled_amount },\n    ];\n\n    const tableProps = isrowselected\n      ? {\n          TheadComponent: () => <div></div>,\n        }\n      : {};\n\n    const dateKeys = {\n      Invoice: \"expected_invoice_date\",\n      PayIQ: \"expected_payment_date\",\n      Due: \"expected_due_date\",\n    };\n\n    return (\n      <div className=\"\">\n        <DateModal\n          header={`Update ${dateModalType} Date`}\n          show={showDateModal}\n          handleClose={() => this.setState({ showDateModal: false })}\n          handleSubmit={(value) => {\n            const allselectedinvoices = rows.filter((x) => x.isselected);\n            const allpromises = allselectedinvoices.map((x) =>\n              instance.put(`/orderbacklog?id=${x.id}`, {\n                [get(dateKeys, `${dateModalType}`, \"\")]: moment(value).format(\"MM/DD/YYYY\"),\n              })\n            );\n            Promise.all(allpromises).then(() => {\n              Toaster(\"Updated successfully\", \"success\");\n              this.getData();\n              this.setState({ dateModalType: \"\", showDateModal: false });\n            });\n          }}\n        />\n        <div className=\"row\">\n          <div className=\"col-md-12 d-flex justify-content-center pl-5\">\n            {donutChartData ? (\n              total ? (\n                <>\n                  <DonutChart\n                    onRecordClick={(record) => {\n                      this.setState({ selectedStatusObject: record, status: get(record, \"urlkey\", \"\") }, () =>\n                        this.filterData()\n                      );\n                    }}\n                    data={donutChartData}\n                    total={total}\n                    selectedStatusObject={selectedStatusObject}\n                  />\n                  <div className=\"hide-scroll\" style={{ height: 300, width: 275, marginLeft: 24, overflowY: \"auto\" }}>\n                    <div className=\"mt-4\">\n                      {donutChartData &&\n                        donutChartData.map((entity, i) => (\n                        get(entity, \"value\", \"\")\n                        ?\n                          <div\n                            className=\"col-md-12 p-2 cursour-pointer\"\n                            onClick={() => {\n                              this.setState({ selectedStatusObject: entity, status: get(entity, \"urlkey\", \"\") }, () =>\n                                this.filterData()\n                              );\n                            }}\n                          >\n                            <span\n                              className={`ml-2 mr-2 donutchart-legend-dot`}\n                              style={{\n                                backgroundColor: `${get(entity, \"line-color\", COLORS[i % 8])}`,\n                              }}\n                            />\n                            <span>\n                              {get(entity, \"name\", \"-\")}&nbsp;({getFAWC(entity.value)})\n                              {/* {get(entity, \"name\", \"-\")}&nbsp;({Math.round((entity.value / total) * 100)}%) */}\n                            </span>\n                          </div>\n                          : null\n                        ))}\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <PieChartPlaceholder />\n              )\n            ) : (\n                <div className=\"w-100\" style={{ height: 300 }}>\n                  <CustomSpinner />\n                </div>\n            )}\n          </div>\n        </div>\n        <div>\n          <Nav variant=\"tabs\" activeKey={activeKey} onSelect={(k) => setactiveKey(k)}>\n            <Nav.Item>\n              <Nav.Link eventKey=\"#invoice\">Invoice List</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"#backlog\">Order Backlog</Nav.Link>\n            </Nav.Item>\n          </Nav>\n\n          <div className=\"row mt-3\">\n            <div className=\"col-md-12\">\n              <div className=\"titletranshist\">\n                <div className=\"pull-left\">Customer Backlog</div>\n                <div className=\"dropdown pull-right\">\n                  <span\n                    className=\"btn dropdown-toggle btn-primary cursour-pointer\"\n                    role=\"button\"\n                    id=\"\"\n                    data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"false\"\n                    onClick={() => this.setshowExport(true)}\n                  >\n                    Export\n                  </span>\n                  <ClickAwayListener onClickAway={this.setshowExport}>\n                    <div\n                      className={`dropdown-menu dropdown-menu-right payexpdroplist ${showexport && \"show\"}`}\n                      aria-labelledby=\"dropdownMenuLink\"\n                      id=\"\"\n                    >\n                      <CSVLink\n                        data={ExportCSV(exportedData)}\n                        ref=\"csv\"\n                        filename={`Order backlog, ${moment().format(\"MMMM Do YYYY-h:mm:ss-a\")}.csv`}\n                        style={{ display: \"none\" }}\n                      />\n                      <span\n                        style={{\n                          fontSize: 12,\n                          display: \"block\",\n                          textAlign: \"right\",\n                          marginRight: \"10px\",\n                          marginBottom: \"10px\",\n                          cursor: \"pointer\",\n                        }}\n                        onClick={() => this.exportAllData(true)}\n                      >\n                        Export CSV\n                      </span>\n                      <span\n                        style={{\n                          fontSize: 12,\n                          display: \"block\",\n                          textAlign: \"right\",\n                          marginRight: \"10px\",\n                          cursor: \"pointer\",\n                        }}\n                        onClick={this.exportAllData}\n                      >\n                        Export Excel\n                      </span>\n                    </div>\n                  </ClickAwayListener>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-md-12 mt-2\">\n              {isrowselected ? (\n                <div\n                  style={{\n                    height: 58,\n                    borderTopLeftRadius: 10,\n                    borderTopRightRadius: 10,\n                  }}\n                  className=\"border-bottom pt-2 pb-2 pl-1\"\n                >\n                  <span className=\"pull-left mt-2\" style={{ width: 54 }}>\n                    <input\n                      className=\"md-checkbox\"\n                      style={{ marginLeft: 16, marginTop: 1 }}\n                      type=\"checkbox\"\n                      defaultChecked={get(rows, \"[0]\", \"\") && !rows.find((x) => !x.isselected)}\n                      onChange={(e) =>\n                        this.setState({ rows: rows.map((d) => ({ ...d, isselected: e.target.checked })) })\n                      }\n                    />\n                  </span>\n                  <span className=\"mt-2\">\n                    <span\n                      onClick={() => {\n                        this.setState({ dateModalType: \"Invoice\", showDateModal: true });\n                      }}\n                      className=\"multiActivityshow btn btn-primary btn-sm cursour-pointer mr-2\"\n                    >\n                      <i className=\"fa fa-calendar mr-1\" aria-hidden=\"true\" />\n                      Invoice Date\n                    </span>\n\n                    <span\n                      onClick={() => {\n                        this.setState({ dateModalType: \"PayIQ\", showDateModal: true });\n                      }}\n                      className=\"multiActivityshow btn btn-primary btn-sm cursour-pointer mr-2\"\n                    >\n                      <i className=\"fa fa-calendar mr-1\" aria-hidden=\"true\" />\n                      PayIQ Date\n                    </span>\n\n                    <span\n                      onClick={() => {\n                        this.setState({ dateModalType: \"Due\", showDateModal: true });\n                      }}\n                      className=\"multiActivityshow btn btn-primary btn-sm cursour-pointer\"\n                    >\n                      <i className=\"fa fa-calendar mr-1\" aria-hidden=\"true\" />\n                      Due Date\n                    </span>\n                  </span>\n                </div>\n              ) : null}\n              <ReactTable\n                {...tableProps}\n                rows={rows}\n                key={isrowselected}\n                isrowselected={isrowselected}\n                noDataText={isFetching ? \"\" : \"No data found\"}\n                // minRows={rows.length || 1}\n                minRows={rows.length > 20 ? 20 : rows.length}\n                loading={isFetching}\n                resizable={true}\n                showPagination={false}\n                getTrProps={(state, rowInfo, column) => {\n                  return {\n                    onClick: (e) => {\n                      window.open(`${window.location.origin}/backlog/${get(rowInfo.original, \"id\", \"-\")}`, \"_self\");\n                    },\n                  };\n                }}\n                defaultSorted={[\n                  {\n                    id: \"due_date\",\n                    desc: false,\n                  },\n                ]}\n                columns={columns}\n                data={rows}\n              />\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"filterthree\">\n              <div className=\"pull-right\">\n                <button\n                  className=\"btn btn-primary mr-2 width-94px\"\n                  disabled={currPage === 1}\n                  onClick={this.setPrevPage}\n                >\n                  Previous\n                </button>\n                <button disabled={rows.length < 20} className=\"btn btn-primary width-94px\" onClick={this.setNextPage}>\n                  Next\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({ login: state.payables });\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BacklogList);\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Modal, Nav } from \"react-bootstrap\";\nimport { instance } from \"actions/axiosInstance\";\n\nfunction AutoReminderModal(props) {\n  const { onHide, show, templateList, customerid, defaultData, getCustomerReminder } = props;\n  const [days, setDays] = useState(\"\");\n  const [template_id, setTemplateId] = useState(\"\");\n  const [reminderType, setReminderType] = useState(\"-1\");\n  const [is_enabled, setIsEnabled] = useState(true);\n  const [ar_age_in_days, setAr_age_in_days] = useState(\"\");\n  const [frequency_in_days, setFrequency_in_days] = useState(\"\");\n  const [activeKey, setActiveKey] = useState(\"#normal\");\n\n  useEffect(() => {\n    if (defaultData) {\n      setDays(Math.abs(defaultData.days));\n      setTemplateId(defaultData.template_id);\n      setReminderType(defaultData.days < 0 ? \"-1\" : \"1\");\n      setIsEnabled(defaultData.is_enabled);\n      setAr_age_in_days(defaultData.ar_age_in_days);\n      setFrequency_in_days(defaultData.frequency_in_days);\n    }\n  }, [defaultData]);\n\n  const submitEntry = () => {\n    const URL = !defaultData ? \"receivable-reminder\" : `receivable-reminder?id=${defaultData.id}`;\n    const method = defaultData ? \"patch\" : \"post\";\n    const requestObject = {\n      customer_id: customerid,\n      days: ((defaultData && defaultData.is_recurring) || (!defaultData && activeKey === \"#recurring\"))\n        ? 0 \n        : reminderType === \"-1\" ? Number(days) * -1 : Number(days),\n      template_id,\n      is_recurring: ((defaultData && defaultData.is_recurring) || (!defaultData && activeKey === \"#recurring\")) ? true : false,\n      is_enabled,\n      ar_age_in_days: ((defaultData && defaultData.is_recurring) || (!defaultData && activeKey === \"#recurring\")) ? ar_age_in_days : 0,\n      frequency_in_days: ((defaultData && defaultData.is_recurring) || (!defaultData && activeKey === \"#recurring\")) ? frequency_in_days : 0,\n    };\n    instance[method](\n      URL,\n      requestObject\n    ).then(response => {\n      onHide();\n      getCustomerReminder();\n    });\n  };\n\n  return (\n    <Modal show={show} onHide={onHide} className=\"mt-4\">\n      <Modal.Header closeButton>\n        <strong>{defaultData ? `Update` : `Add`} {((defaultData && defaultData.is_recurring) || (!defaultData && activeKey === \"#recurring\")) ? \"Recurring Reminder\" : \"Auto Reminder\"}</strong>\n      </Modal.Header>\n      {!defaultData\n      && <Nav variant=\"tabs\" activeKey={activeKey} onSelect={(k) => setActiveKey(k)}>\n        <Nav.Item>\n          <Nav.Link eventKey=\"#normal\">Auto Reminder</Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"#recurring\">Recurring Reminder</Nav.Link>\n        </Nav.Item>\n      </Nav>}\n      <Modal.Body>\n        <form action=\"\" method=\"post\">\n          <div className=\"form-group\">\n            <span>\n              <label>Email Template: </label>\n            </span>\n            <select\n              defaultValue={defaultData && defaultData.template_id}\n              className=\"form-control\"\n              onChange={e => setTemplateId(e.target.value)}\n            >\n              <option disabled selected>\n                Select Template\n              </option>\n              {templateList && templateList.length\n                ? templateList.map(d => (\n                    <option key={d.id} value={d.id}>\n                      {d.name}\n                    </option>\n                  ))\n                : null}\n            </select>\n          </div>\n          {((defaultData && !defaultData.is_recurring) || (!defaultData && activeKey === \"#normal\"))\n          && <div className=\"form-group\">\n            <span>\n              <label>Reminder : </label>\n            </span>\n            <select\n              defaultValue={defaultData && defaultData.days < 0 ? \"-1\" : \"1\"}\n              className=\"form-control\"\n              onChange={e => setReminderType(e.target.value)}\n            >\n              <option value=\"-1\">Before</option>\n              <option value=\"1\">After</option>\n            </select>\n          </div>}\n          {((defaultData && !defaultData.is_recurring) || (!defaultData && activeKey === \"#normal\"))\n          && <div className=\"form-group\">\n            <span>\n              <label>Days : </label>\n            </span>\n            <input\n              defaultValue={defaultData && Math.abs(defaultData.days)}\n              type=\"number\"\n              onInput={e => setDays(e.target.value)}\n              className=\"form-control\"\n              placeholder=\"Enter ...\"\n            />\n          </div>}\n          {((defaultData && defaultData.is_recurring) || (!defaultData && activeKey === \"#recurring\"))\n          &&<div className=\"form-group\">\n            <span>\n              <label>Days : </label>\n            </span>\n            <input\n              defaultValue={defaultData && Math.abs(defaultData.ar_age_in_days)}\n              type=\"number\"\n              onInput={e => setAr_age_in_days(e.target.value)}\n              className=\"form-control\"\n              placeholder=\"Enter ...\"\n            />\n          </div>}\n          {((defaultData && defaultData.is_recurring) || (!defaultData && activeKey === \"#recurring\"))\n          && <div className=\"form-group\">\n            <span>\n              <label>Frequency : </label>\n            </span>\n            <input\n              defaultValue={defaultData && Math.abs(defaultData.frequency_in_days)}\n              type=\"number\"\n              onInput={e => setFrequency_in_days(e.target.value)}\n              className=\"form-control\"\n              placeholder=\"Enter ...\"\n            />\n          </div>}\n          <div className=\"checkbox switcher\" key={is_enabled}>\n            <label htmlFor=\"reminder\">\n              <span className=\"mr-2\">\n                <label>Status : </label>\n              </span>\n              <input\n                type=\"checkbox\"\n                id=\"reminder\"\n                defaultChecked={is_enabled}\n                onChange={e => setIsEnabled(e.target.checked)}\n              />\n              <span>\n                <small></small>\n              </span>\n            </label>\n          </div>\n          <div className=\"form-group text-right mt-4\">\n            <Button\n              onClick={submitEntry}\n              disabled={(((defaultData && !defaultData.is_recurring) || (!defaultData && activeKey === \"#normal\"))\n              ? !days : !ar_age_in_days && !frequency_in_days) || !template_id || !reminderType}\n              variant=\"primary\"\n              className=\"btn subbtn btn-primary\"\n            >\n              Submit\n            </Button>\n          </div>\n        </form>\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nexport default AutoReminderModal;\n","import React from \"react\";\nimport get from \"lodash/get\";\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemButton,\n  AccordionItemHeading,\n  AccordionItemPanel\n} from \"react-accessible-accordion\";\nimport { setemailData } from \"components/Email/EmailCreator\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { instance } from \"../../actions/axiosInstance\";\nimport { handleAPIError } from \"handlers/setters\";\nimport TokenManager from \"utils/TokenManager\";\nimport AddContactModal from \"components/AddContactModal\";\nimport NotesList from \"components/List/NotesList\";\n\nimport fe_config from \"constants/Configs\";\nimport Toaster from \"components/Toaster\";\nimport SelectEditorCell from \"components/Table/SelectEditorCell\";\nimport AutoReminderModal from \"./AutoReminderModal\";\nimport TextEditorCell from \"components/Table/TextEditorCell\";\n\nconst vendorCategories = [\n  { name: \"Critical\", value: 1 },\n  { name: \"High\", value: 2 },\n  { name: \"Medium\", value: 3 },\n  { name: \"Low\", value: 4 }\n];\n\nexport default class CustomerDetailSidebar extends React.Component {\n  state = {\n    showContactModal: false,\n    preExpanded: \"\",\n    showReminderModal: false,\n    emailTemplateData: [],\n    defaultEmailData: null,\n    allentities: []\n  };\n\n  componentDidMount() {\n    this.getEmailTemplates();\n    this.getallentities();\n  }\n\n  getallentities = () => {\n    instance\n      .get(\"/payroll/setting\")\n      .then(resp => {\n        this.setState({ allentities: get(resp, \"data.result\", []) });\n      })\n      .catch(e => handleAPIError(e));\n  };\n\n  componentDidUpdate() {\n    const inputNumbers = document.querySelectorAll(\"input[type=number]\");\n    if (inputNumbers.length) {\n      var invalidChars = [\"-\", \"+\", \"e\"];\n      for (let i = 0; i < inputNumbers.length; i++) {\n        inputNumbers[i].addEventListener(\"input\", function() {\n          this.value = this.value.replace(/[e\\+\\-]/gi, \"\");\n        });\n\n        inputNumbers[i].addEventListener(\"keydown\", function(e) {\n          if (invalidChars.includes(e.key)) {\n            e.preventDefault();\n          }\n        });\n      }\n    }\n  }\n\n  handleContactModal = flag => this.setState({ showContactModal: flag });\n\n  getEmailTemplates = () => {\n    const URL = \"receivable-reminder-email-template\";\n    instance\n      .get(URL)\n      .then(response => {\n        this.setState({\n          emailTemplateData: get(response, \"data.result\", [])\n        });\n      });\n  };\n\n  updateCustomer = postData => {\n    const { customerid } = this.props;\n    instance\n      .put(`customer?id=${customerid}`, postData)\n      .then(response => {})\n      .catch(e => handleAPIError(e));\n  };\n\n  expandAndOpen = number => {\n    this.setState(\n      {\n        preExpanded: number\n      },\n      this.props.handleToggleCollapse(false)\n    );\n  };\n\n  getName = id => {\n    const { emailTemplateData } = this.state;\n    if (emailTemplateData.length) {\n      const template = emailTemplateData.find(d => d.id === id);\n      return template.name;\n    }\n    return \"-\";\n  };\n\n  render() {\n    const {\n      collapse,\n      customerid,\n      onEmailSave,\n      customerData,\n      setshowNoteModal,\n      customerReminder,\n      getCustomerReminder,\n      handleToggleCollapse,\n      setisinvoicelevelnote,\n      notesUpdated,\n      setnotesUpdated,\n      customerCategoryList,\n    } = this.props;\n\n    const {\n      preExpanded,\n      showContactModal,\n      showReminderModal,\n      emailTemplateData,\n      defaultEmailData,\n      allentities\n    } = this.state;\n    const name = get(customerData, \"result[0].name\", \"-\");\n    const category = get(customerData, \"detail.category\", \"-\");\n    const paymentTerms = get(customerData, \"detail.payment_terms\", \"-\");\n    const region = get(customerData, \"result[0].region\", \"-\");\n    if (!customerData) {\n      return <div />;\n    }\n\n    const original_entity_name =\n      allentities &&\n      get(\n        allentities.find(x => x.id === get(customerData, \"detail.corp_entity_id\", \"\")),\n        \"name\",\n        \"\"\n      );\n    return (\n      <React.Fragment>\n        {collapse ? (\n          <div className=\"col-md-1 collapsable-panel\">\n            <div className=\"card\">\n              <div\n                className=\"leftbaricon\"\n                onClick={() => {\n                  this.setState({ preExpanded: \"\" });\n                  handleToggleCollapse(!collapse);\n                }}\n              >\n                <OverlayTrigger placement=\"left\" overlay={<Tooltip>Expand</Tooltip>}>\n                  <i className=\"fa fa-chevron-left\" />\n                </OverlayTrigger>\n              </div>\n              <div>\n                <div onClick={() => this.expandAndOpen(0)}>\n                  <OverlayTrigger placement=\"left\" overlay={<Tooltip>Company</Tooltip>}>\n                    <i className=\"onlyicon fa fa-info-circle cursor-pointer\" aria-hidden=\"true\" />\n                  </OverlayTrigger>\n                </div>\n                <div onClick={() => this.expandAndOpen(1)}>\n                  <OverlayTrigger placement=\"left\" overlay={<Tooltip>Reminders</Tooltip>}>\n                    <i className=\"onlyicon fa fa-bell cursor-pointer\" aria-hidden=\"true\" />\n                  </OverlayTrigger>\n                </div>\n                {fe_config.MODE === \"DEV\" && (\n                  <div onClick={() => this.expandAndOpen(2)}>\n                    <OverlayTrigger placement=\"left\" overlay={<Tooltip>Payment Method</Tooltip>}>\n                      <i className=\"onlyicon fa fa-usd cursor-pointer\" aria-hidden=\"true\" />\n                    </OverlayTrigger>\n                  </div>\n                )}\n                {fe_config.MODE === \"DEV\" && (\n                  <div onClick={() => this.expandAndOpen(3)}>\n                    <OverlayTrigger placement=\"left\" overlay={<Tooltip>Contact Person</Tooltip>}>\n                      <i className=\"onlyicon fa fa-user cursor-pointer\" aria-hidden=\"true\" />\n                    </OverlayTrigger>\n                  </div>\n                )}\n                <div onClick={() => this.expandAndOpen(4)}>\n                  <OverlayTrigger placement=\"left\" overlay={<Tooltip>Notes</Tooltip>}>\n                    <i className=\"onlyicon fa fa-pencil cursor-pointer\" aria-hidden=\"true\" />\n                  </OverlayTrigger>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"right-col\">\n            <OverlayTrigger placement=\"top\" overlay={<Tooltip>Send email</Tooltip>}>\n              <i\n                className=\"fa fa-envelope px-2 cursor-pointer text-3F6289 cfa-rounded-circle\"\n                style={{ fontSize: 22 }}\n                onClick={() => {\n                  setemailData({\n                    show: true,\n                    to: get(customerData, \"detail.email\", \"\"),\n                    onSave: onEmailSave\n                  });\n                }}\n              />\n            </OverlayTrigger>\n            <OverlayTrigger placement=\"top\" overlay={<Tooltip>Add notes</Tooltip>}>\n              <i\n                className=\"fa fa-sticky-note px-2 cursor-pointer text-3F6289 cfa-rounded-circle\"\n                style={{ fontSize: 22 }}\n                onClick={() => {\n                  setshowNoteModal(true);\n                  setisinvoicelevelnote(false);\n                }}\n              />\n            </OverlayTrigger>\n            <div className=\"card bg-transparent\">\n              <div\n                className=\"leftbaricon\"\n                onClick={() => {\n                  this.setState({ preExpanded: \"\" });\n                  handleToggleCollapse(!collapse);\n                }}\n              >\n                <OverlayTrigger placement=\"left\" overlay={<Tooltip>Collapse</Tooltip>}>\n                  <i className=\"fa fa-chevron-right\" />\n                </OverlayTrigger>\n              </div>\n              <Accordion\n                allowMultipleExpanded\n                allowZeroExpanded\n                className={`details-accordion preExpand-${preExpanded}`}\n              >\n                <AccordionItem className=\"accordion_card_1\">\n                  <AccordionItemHeading onClick={() => this.setState({ preExpanded: \"\" })}>\n                    <AccordionItemButton className=\"bg-white px-3 py-3 mb-2 cursor-pointer accordion__button\">\n                      <strong>Company</strong> <i className=\"more-less fa fa-chevron-down pull-right\" />{\" \"}\n                      <i className=\"more-less fa fa-chevron-up pull-right\" />\n                    </AccordionItemButton>\n                  </AccordionItemHeading>\n                  <AccordionItemPanel className=\"pt-2 mb-2 card\">\n                    <div class=\"col-md-12 mb-2\">\n                      <label>\n                        <strong>Name:</strong>\n                      </label>\n                      <div>{name}</div>\n                    </div>\n                      <div class=\"col-md-12 mb-2\">\n                        <label>\n                          <strong>Customer Category:</strong>\n                        </label>\n                        <div>\n                          <SelectEditorCell\n                            value={get(customerData, \"detail.customer_category_id\", \"-\")}\n                            options={customerCategoryList.map(d => ({ name: d.name, value:d.id }))}\n                            updateValue={value => {\n                              const apiPoint = \"customer\";\n                              instance\n                                .put(\n                                  `${apiPoint}?id=${customerid}`,\n                                  {\n                                    category: value\n                                  },\n                                  {\n                                    auth: {\n                                      username: TokenManager.get(),\n                                      password: Math.random().toString(20)\n                                    }\n                                  }\n                                )\n                                .then(() => {\n                                  Toaster(\"Updated successfully\", \"success\");\n                                })\n                                .catch(e => handleAPIError(e));\n                            }}\n                          />\n                        </div>\n                      </div>\n                    <div class=\"col-md-12 mb-2\">\n                      <label>\n                        <strong>Classification:</strong>\n                      </label>\n                      <div>\n                        <SelectEditorCell\n                          value={get(customerData, \"detail.classification\", \"-\")}\n                          options={vendorCategories}\n                          updateValue={value => {\n                            // const type = item.data.type;\n                            // const apiPoint = type === 'vendor' ? 'customer' : 'arinvoice';\n                            const apiPoint = \"customer\";\n                            instance\n                              .put(\n                                `${apiPoint}?id=${customerid}`,\n                                {\n                                  classification: value\n                                }\n                              )\n                              .then(() => {\n                                Toaster(\"Updated successfully\", \"success\");\n                              })\n                              .catch(e => handleAPIError(e));\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div class=\"col-md-12 mb-2\">\n                      <label>\n                        <strong>Region:</strong>\n                      </label>\n                      <div>\n                        <input\n                          type=\"text\"\n                          defaultValue={region}\n                          onBlur={e => this.updateCustomer({ region: e.target.value })}\n                          className=\"ccat\"\n                        />\n                        <span className=\"penedit\">\n                          <i class=\"fa fa-pencil\" aria-hidden=\"true\"></i>\n                        </span>\n                      </div>\n                    </div>\n                    <div class=\"col-md-12 mb-2\">\n                      <label>\n                        <strong>Payment terms:</strong>\n                      </label>\n                      <div>{paymentTerms}</div>\n                    </div>\n                    <div class=\"col-md-12 mb-2\">\n                      <label>\n                        <strong>Account no:</strong>\n                      </label>\n                      <div>-</div>\n                    </div>\n                    <div class=\"col-md-12 mb-2\">\n                      <label>\n                        <strong>Email:</strong>\n                      </label>\n                      <div>\n                        <TextEditorCell\n                          value={get(customerData, \"detail.email\", \"-\")}\n                          updateValue={value => {\n                            const apiPoint = \"customer\";\n                            instance\n                              .put(\n                                `${apiPoint}?id=${customerid}`,\n                                {\n                                  email: value\n                                }\n                              )\n                              .then(() => {\n                                Toaster(\"Updated successfully\", \"success\");\n                                this.props.GetCustomerDetail();\n                              })\n                              .catch(e => handleAPIError(e));\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"col-md-12 mb-2\">\n                      <label>\n                        <strong>Entity:</strong>\n                      </label>\n                      <div>{original_entity_name}</div>\n                    </div>\n                  </AccordionItemPanel>\n                </AccordionItem>\n\n                <AccordionItem className=\"accordion_card_2\">\n                  <AccordionItemHeading onClick={() => this.setState({ preExpanded: \"\" })}>\n                    <AccordionItemButton className=\"bg-white px-3 py-3 mb-2 cursor-pointer accordion__button\">\n                      <strong>Auto Reminders</strong> <i className=\"more-less fa fa-chevron-down pull-right\" />{\" \"}\n                      <i className=\"more-less fa fa-chevron-up pull-right\" />\n                    </AccordionItemButton>\n                  </AccordionItemHeading>\n                  <AccordionItemPanel className=\"pt-2 mb-2 card\">\n                    <div className=\"col-md-12\" style={{ marginBottom: \"10px\", marginTop: \"10px\" }}>\n                      {customerReminder.length\n                        ? customerReminder.map(d => (\n                            <div\n                              className=\"pencilhvr cursor-pointer\"\n                              onClick={() =>\n                                this.setState({\n                                  defaultEmailData: d,\n                                  showReminderModal: true\n                                })\n                              }\n                              style={{\n                                marginBottom: \"10px\",\n                                borderBottom: \"1px solid #ddd\",\n                                paddingBottom: \"5px\",\n                                position: \"relative\"\n                              }}\n                            >\n                              {d.is_recurring\n                              ? <div>\n                                Recurring : Every {d.ar_age_in_days} Days\n                              </div>\n                              : <div>\n                                Reminder : {d.days < 0 ? \"Before\" : \"After\"} {Math.abs(d.days)} Days\n                              </div>}\n                              <div>Template : {this.getName(d.template_id)}</div>\n                            </div>\n                          ))\n                        : null}\n                      <div>\n                        <button\n                          className=\"btn btn-sm btn-primary pull-right\"\n                          onClick={() => this.setState({ showReminderModal: true })}\n                        >\n                          Add New\n                        </button>\n                      </div>\n                    </div>\n                  </AccordionItemPanel>\n                </AccordionItem>\n\n                {fe_config.MODE === \"DEV\" && (\n                  <AccordionItem className=\"accordion_card_3\">\n                    <AccordionItemHeading onClick={() => this.setState({ preExpanded: \"\" })}>\n                      <AccordionItemButton className=\"bg-white px-3 py-3 mb-2 cursor-pointer accordion__button\">\n                        <strong>Payment Method</strong> <i className=\"more-less fa fa-chevron-down pull-right\" />{\" \"}\n                        <i className=\"more-less fa fa-chevron-up pull-right\" />\n                      </AccordionItemButton>\n                    </AccordionItemHeading>\n                    <AccordionItemPanel className=\"pt-2 mb-2 card\">\n                      <div className=\"px-2 py-2\">\n                        <select className=\"form-control\">\n                          <option>A</option>\n                          <option>B</option>\n                        </select>\n                      </div>\n                    </AccordionItemPanel>\n                  </AccordionItem>\n                )}\n                {fe_config.MODE === \"DEV\" && (\n                  <AccordionItem className=\"accordion_card_4\">\n                    <AccordionItemHeading onClick={() => this.setState({ preExpanded: \"\" })}>\n                      <AccordionItemButton className=\"bg-white px-3 py-3 mb-2 cursor-pointer accordion__button\">\n                        <strong>Contact Person</strong> <i className=\"more-less fa fa-chevron-down pull-right\" />{\" \"}\n                        <i className=\"more-less fa fa-chevron-up pull-right\" />\n                      </AccordionItemButton>\n                    </AccordionItemHeading>\n                    <AccordionItemPanel className=\"pt-2 mb-2 card\">\n                      <div className=\"notes px-2\">\n                        <div>\n                          <strong>Name:</strong> Prashant{\" \"}\n                        </div>\n                        <div>\n                          <strong>Email:</strong> prashant@gmail.com\n                        </div>\n                        <div>\n                          <strong>Mobile:</strong> +91 9876543210\n                        </div>\n                      </div>\n                      <div className=\"px-2\">\n                        <button\n                          className=\"btn btn-sm btn-primary pull-right mb-2\"\n                          onClick={() => this.handleContactModal(true)}\n                        >\n                          Add New\n                        </button>\n                      </div>\n                    </AccordionItemPanel>\n                  </AccordionItem>\n                )}\n                <AccordionItem className=\"accordion_card_5\">\n                  <AccordionItemHeading onClick={() => this.setState({ preExpanded: \"\" })}>\n                    <AccordionItemButton className=\"bg-white px-3 py-3 cursor-pointer accordion__button\">\n                      <strong>Notes</strong> <i className=\"more-less fa fa-chevron-down pull-right\" />{\" \"}\n                      <i className=\"more-less fa fa-chevron-up pull-right\" />\n                    </AccordionItemButton>\n                  </AccordionItemHeading>\n                  <AccordionItemPanel className=\"pt-2 px-3 bg-white card\">\n                    <NotesList\n                      type=\"customers\"\n                      key={preExpanded}\n                      id={customerid}\n                      notesUpdated={notesUpdated}\n                      setnotesUpdated={setnotesUpdated}\n                      onUpdate={() => {}}\n                    />\n                  </AccordionItemPanel>\n                </AccordionItem>\n              </Accordion>\n            </div>\n            <AddContactModal show={showContactModal} onHide={this.handleContactModal} />\n          </div>\n        )}\n        <AutoReminderModal\n          show={showReminderModal}\n          customerid={customerid}\n          templateList={emailTemplateData}\n          onHide={() => this.setState({ showReminderModal: false, defaultEmailData: null })}\n          defaultData={defaultEmailData}\n          getCustomerReminder={getCustomerReminder}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport \"assets/css/paymentdetails.css\";\nimport filterarrow from \"assets/images/filter-arrow.png\";\nimport ClickAwayListener from \"components/ClickAwayListener\";\nimport { resetemail, setemailData } from \"components/Email/EmailCreator\";\nimport DateModal from \"components/Popups/Date\";\nimport TextAreaModal from \"components/Popups/TextArea\";\nimport PieChartPlaceholder from \"components/Recharts/Placeholders/Piechart\";\nimport CustomSpinner from \"components/Spinner\";\nimport Toaster from \"components/Toaster\";\nimport { resetconfirmationboxData, setconfirmationboxData } from \"components/ConfirmationBox\";\nimport * as FileSaver from \"file-saver\";\nimport { b64toBlob } from \"handlers/getters\";\nimport { handleAPIError } from \"handlers/setters\";\nimport get from \"lodash/get\";\nimport moment from \"moment\";\nimport TokenManager from \"utils/TokenManager\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { CSVLink } from \"react-csv\";\nimport { connect } from \"react-redux\";\nimport ReactTable from \"react-table-v6\";\nimport { Cell, Label, Pie, PieChart, Sector } from \"recharts\";\nimport { convertAmount, convertDecimalNo, getFAWC, getShortNumber } from \"utils\";\nimport { getFormattedDate } from \"utils/dates\";\nimport * as XLSX from \"xlsx\";\nimport { instance, instanceMultipart, instanceWithRetry } from \"../../actions/axiosInstance\";\nimport BacklogList from \"./customerDetailsBacklog.js\";\nimport CustomerDetailSidebar from \"./CustomerDetailSidebar\";\n\nconst renderActiveShape = (props) => {\n  const { cx, cy, innerRadius, outerRadius, startAngle, endAngle, fill } = props;\n\n  return (\n    <g>\n      <Sector\n        className=\"cursour-pointer\"\n        cx={cx}\n        cy={cy}\n        innerRadius={innerRadius}\n        outerRadius={outerRadius + 5}\n        startAngle={startAngle}\n        endAngle={endAngle}\n        fill={fill}\n      />\n    </g>\n  );\n};\n\nconst DonutChart = ({ data = [], vendorData, onRecordClick, total = 0, selectedSection }) => {\n  const [activeindex, setactiveindex] = useState(null);\n\n  useEffect(() => {\n    (get(selectedSection, \"dataindex\", null) || get(selectedSection, \"dataindex\", null) === 0) &&\n      setactiveindex(get(selectedSection, \"dataindex\", null));\n  }, [selectedSection]);\n\n  function onPieEnter(data, index) {\n    setactiveindex(index);\n  }\n  function onPieLeave(data, index) {\n    setactiveindex(null || get(selectedSection, \"dataindex\", null));\n  }\n\n  return (\n    <PieChart width={320} height={320}>\n      {/* <Legend /> */}\n      <Pie\n        animationDuration={1000}\n        activeIndex={activeindex}\n        activeShape={renderActiveShape}\n        data={data}\n        // cx={120}\n        // cy={200}\n        innerRadius={60}\n        outerRadius={140}\n        fill=\"#8884d8\"\n        dataKey=\"value\"\n        onClick={(e) => {\n          onRecordClick(e.payload.payload);\n        }}\n        onMouseEnter={onPieEnter}\n        onMouseLeave={onPieLeave}\n        // label={({ cx, cy, midAngle, innerRadius, outerRadius, value, index }) => {\n        //   const RADIAN = Math.PI / 180;\n        //   // eslint-disable-next-line\n        //   const radius = 25 + innerRadius + (outerRadius - innerRadius);\n        //   // eslint-disable-next-line\n        //   const x = cx + radius * Math.cos(-midAngle * RADIAN);\n        //   // eslint-disable-next-line\n        //   const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n        //   const valueInPercent = (value / total) * 100;\n        //   return (\n        //     <text x={x} y={y}>\n        //       {data[index].name} ({`${Math.round(valueInPercent)}%`})\n        //     </text>\n        //   );\n        // }}\n      >\n        <Label className=\"cursour-pointer\" width={30} position=\"center\" onClick={() => onRecordClick(null)}>\n          {`Total ${getShortNumber(total) || \"-\"}`}\n        </Label>\n        {data.map((entry, index) => (\n          <Cell className=\"cursour-pointer\" fill={COLORS[index % COLORS.length]} />\n        ))}\n      </Pie>\n    </PieChart>\n  );\n};\n\nconst COLORS = [\"#2B7EF6\", \"#7CA82D\", \"#EF853A\", \"#DB504D\", \"#424348\", \"#90ED7D\", \"#3C861F\", \"#F9D7E0\"];\n\nfunction CustomerDetails(props) {\n  const { paymentId, history, selectedpayment, match, location } = props;\n  const [showNoteModal, setshowNoteModal] = useState(false);\n  const [isinvoicelevelnote, setisinvoicelevelnote] = useState(false);\n  const [showpayIQDateModal, setshowpayIQDateModal] = useState(false);\n  const [invoiceList, setinvoiceList] = useState([]);\n  const [isFetching, setisFetching] = useState(true);\n  const [last12MonthTotal, setlast12MonthTotal] = useState(null);\n  const [last12MonthPaid, setlast12MonthPaid] = useState(null);\n  const [showChart, setshowChart] = useState(false);\n  const [customerData, setcustomerData] = useState(null);\n  const [showexport, setshowexport] = useState(false);\n  const [page, setpage] = useState(1);\n  const [per_page, setper_page] = useState(20);\n  const [notesUpdated, setnotesUpdated] = useState(false);\n  const [customerid, setcustomerid] = useState(get(match, \"params.id\", \"\"));\n  const [fulldata, setfulldata] = useState(null);\n  const [customerReminder, setCustomerReminder] = useState([]);\n  const [toggleCollapse, setToggleCollapse] = useState(true);\n  const [exportedData, setExportedData] = useState([]);\n  const [customerCategoryList, setCustomerCategoryList] = useState([]);\n  const [activeKey, setactiveKey] = useState(\n    localStorage.getItem(\"customer_details_activeTab\") || (location.hash === \"#backlog\" ? \"#backlog\" : \"#invoice\")\n  );\n  const [sort_by, setsort_by] = useState(\"total_amount_due\");\n  const [sort_order, setsort_order] = useState(\"desc\");\n  const csvRef = useRef(null);\n  const today = moment().format(\"MM/DD/YYYY\");\n  const tomorrow = moment().add(\"day\", 1).format(\"MM/DD/YYYY\");\n  const tomorrowPlusYear = moment().add(\"year\", 1).format(\"MM/DD/YYYY\");\n  const todayMinusYear = moment().subtract(\"year\", 1).format(\"MM/DD/YYYY\");\n  const [selectedSection, setselectedSection] = useState();\n\n  const chartData = [\n    {\n      name: \"Paid\",\n      value: Math.abs(last12MonthPaid || 0),\n      dataindex: 0,\n      urlparams: `&status=closed&from_date=${todayMinusYear}&to_date=${today}`,\n    }, //paid\n    {\n      name: \"Balance\",\n      value: Math.abs(get(customerData, \"Outstanding Balance\", 0)),\n      dataindex: 1,\n      urlparams: `&status=open&from_date=${tomorrow}&to_date=${tomorrowPlusYear}`,\n    }, //balance\n    {\n      name: \"Overdue\",\n      value: Math.abs(get(customerData, \"Overdue Balance\", 0)),\n      dataindex: 2,\n      urlparams: `&status=open&from_date=${todayMinusYear}&to_date=${today}`,\n    }, //overdue\n  ];\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    setselectedSection(chartData[2]);\n    getCustomerReminder();\n    getCustomerCategory();\n    GetCustomerDetail();\n  }, []);\n\n  function handleToggleCollapse(flag) {\n    window.localStorage.setItem(\"customerCollapse\", flag);\n    setToggleCollapse(flag);\n  }\n\n  useEffect(() => {\n    if (activeKey && activeKey !== localStorage.setItem(\"customer_details_activeTab\", activeKey)) {\n      localStorage.setItem(\"customer_details_activeTab\", activeKey);\n    }\n  }, [activeKey]);\n\n  function getCustomerReminder() {\n    if (!customerid) {\n      return;\n    }\n    instance\n      .get(`receivable-reminder?customer_id=${customerid}`)\n      .then((resp) => {\n        setCustomerReminder(get(resp, \"data.result\", []).filter((x) => x.customer_id == customerid));\n      })\n      .catch((e) => handleAPIError(e));\n  }\n\n  const setAPISort = (sort_by_key) => {\n    if (!selectedSection) {\n      return;\n    }\n    setsort_by(sort_by_key);\n    setsort_order(sort_by_key === sort_by && sort_order === \"desc\" ? \"asc\" : \"desc\");\n    setpage(1);\n    setinvoiceList([]);\n    setisFetching(true);\n  };\n\n  function GetCustomerDetail(customerName = get(match, \"params.id\", \"\")) {\n    Promise.all([\n      instance.get(`customer/report?id=${customerName}`),\n\n      instance.get(\n        `arinvoice/total?from_date=${todayMinusYear}&to_date=${today}&customer_id=${match.params.id}&status=all`\n      ),\n\n      instance.get(\n        `arinvoice/total?from_date=${todayMinusYear}&to_date=${today}&customer_id=${match.params.id}&status=closed`\n      ),\n\n      instance.get(`customer?id=${customerid}`),\n    ])\n      .then((responses) => {\n        setcustomerData(get(responses, \"[0].data\", \"\")); //0\n        setlast12MonthTotal(get(responses, \"[1].data.total\", 0)); //1\n        setlast12MonthPaid(get(responses, \"[2].data.total\", 0)); //2\n        setfulldata(get(responses, \"[3].data\", \"\")); //3\n        setshowChart(true);\n      })\n      .catch((e) => handleAPIError(e));\n  }\n\n  // for reference\n  // useEffect(() => {\n  //   if (match != null && match.params != null && match.params.id != null && customerid) {\n  //     GetCustomerDetail(match.params.id);\n  //   }\n  // }, [customerid, history, match, selectedpayment, today, todayMinusYear]);\n\n  useEffect(() => {\n    if (!customerData || !customerid) {\n      return;\n    }\n    let rows = [];\n    setisFetching(true);\n    if (page === 1 && !selectedSection) {\n      let URL = `arinvoice?customer_id=${customerid}&status=open&per_page=100`;\n      instance\n        .get(URL)\n        .then((response) => {\n          rows = [...get(response, \"data.result\", [])];\n          URL = `arinvoice?customer_id=${customerid}&status=closed&page=${page}&per_page=${per_page}`;\n          instance\n            .get(URL)\n            .then((response2) => {\n              rows = [...rows, ...get(response2, \"data.result\", [])].slice(0, 20);\n              setinvoiceList(rows);\n              setisFetching(false);\n            })\n            .catch((e) => handleAPIError(e));\n        })\n        .catch((e) => handleAPIError(e));\n    } else {\n      let URL = `arinvoice?customer_id=${customerid}&page=${page}&per_page=${per_page}`;\n      if (selectedSection) {\n        URL = `${URL}${get(selectedSection, \"urlparams\", \"\")}&sort_by=${sort_by}&sort_order=${sort_order}`;\n      } else {\n        URL = `${URL}&status=closed`;\n      }\n      instance\n        .get(URL)\n        .then((response2) => {\n          rows = [...rows, ...get(response2, \"data.result\", [])].slice(0, 20);\n          if (!get(rows, \"[0]\", \"\") && selectedSection.name !== \"Paid\") {\n            selectedSection.name === \"Overdue\" && setselectedSection(chartData[1]);\n            selectedSection.name === \"Balance\" && setselectedSection(null);\n          } else {\n            setinvoiceList(rows);\n            setisFetching(false);\n          }\n        })\n        .catch((e) => handleAPIError(e));\n    }\n  }, [sort_by, sort_order, page, per_page, customerid, customerData, selectedSection]);\n\n  function Increment() {\n    if (page * per_page < 1000) {\n      setpage((prevState) => prevState + 1);\n    }\n  }\n\n  function Decrement() {\n    if (page > 1) {\n      setpage((prevState) => prevState - 1);\n    }\n  }\n\n  const getCustomerCategory = () => {\n    instance\n      .get(\"customercategory?per_page=1000\")\n      .then((response) => {\n        setCustomerCategoryList(response.data.result);\n      })\n      .catch((e) => handleAPIError(e));\n  };\n\n  const ExportXLSX = (csvData) => {\n    const filename = `customerdetail${moment().format(\"MMMM Do YYYY-h:mm:ss-a\")}.xlsx`;\n    const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const ws = XLSX.utils.json_to_sheet(csvData);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, filename);\n  };\n\n  function ExportCSV(data) {\n    if (!data.length) {\n      return [\n        {\n          Invoice: \"\",\n          \"PayIQ Date\": \"\",\n          \"Due Date\": \"\",\n          \"Amount Due\": \"\",\n          \"Payment Method\": \"\",\n          Status: \"\",\n        },\n      ];\n    }\n    const csvData = data.map((element) => ({\n      Invoice: get(element, \"invoice_number\", \"\"),\n      \"PayIQ Date\": get(element, \"expected_date\", \"\")\n        ? moment(get(element, \"expected_date\", \"\")).format(\"YYYY/MM/DD\")\n        : \"-\",\n      \"Due Date\": get(element, \"due_date\", \"\") ? moment(get(element, \"due_date\", \"\")).format(\"YYYY/MM/DD\") : \"-\",\n      \"Amount Due\": convertDecimalNo(get(element, \"total_amount_due\", 0)),\n      \"Payment Method\": get(element, \"\", \"-\"),\n      Status: get(element, \"status\", \"\"),\n    }));\n\n    return csvData;\n  }\n\n  function fastForwardPayiq(by) {\n    const allselectedinvoices = invoiceList.filter((x) => x.isselected);\n    const allpromises = allselectedinvoices.map((x) =>\n      instance.put(`/arinvoice?id=${x.id}`, {\n        expected_date: moment().add(1, by).format(\"MM/DD/YYYY\"),\n      })\n    );\n    Promise.all(allpromises).then(() => {\n      setshowpayIQDateModal(false);\n      Toaster(\"Updated successfully\", \"success\");\n      const temp = customerData;\n      setcustomerData(null);\n      setcustomerData(temp);\n      setinvoiceList(invoiceList.map((x) => ({ ...x, isselected: false })));\n      localStorage.setItem(\"refresh_reports\", true);\n    });\n  }\n\n  const exportAllData = (flag) => {\n    const URL = `arinvoice?customer_id=${customerid}&per_page=1000`;\n    instance\n      .get(URL)\n      .then((response) => {\n        setExportedData(response.data.result);\n        if (flag === true) {\n          csvRef.current.link.click();\n        } else {\n          ExportXLSX(ExportCSV(response.data.result));\n        }\n      })\n      .catch((e) => handleAPIError(e));\n  };\n\n\n  function deletePayIq() {\n    setconfirmationboxData({\n      variant: \"warning\",\n      msg: \"Are you sure you want to delete this record?\",\n      onSave: () => {\n        resetconfirmationboxData();\n        const allselectedinvoices = invoiceList.filter((x) => x.isselected);\n        instanceWithRetry.delete(`arinvoice`, { data: { ids : allselectedinvoices.map(x => x.id) } }).then(() => {\n          const temp = customerData;\n          setcustomerData(null);\n          setcustomerData(temp);\n          setinvoiceList(invoiceList.map((x) => ({ ...x, isselected: false })));\n          localStorage.setItem(\"refresh_reports\", true);\n        })\n        .catch(() => {\n          Toaster(\"invoices cannot be deleted\", \"error\")\n        });\n      }\n    })\n  }\n\n  const isrowselected = invoiceList && invoiceList.find((x) => x.isselected);\n\n  const columns = [\n    {\n      Header: (\n        <input\n          className=\"md-checkbox\"\n          type=\"checkbox\"\n          onChange={() => {\n            const newvalue = !(invoiceList && !invoiceList.find((x) => !x.isselected));\n            setinvoiceList(invoiceList.map((x) => ({ ...x, isselected: newvalue })));\n          }}\n          checked={get(invoiceList, \"[0]\", \"\") && !invoiceList.find((x) => !x.isselected)}\n        />\n      ),\n      accessor: \"isselected\",\n      Cell: (props) => (\n        <div\n          onClick={(e) => {\n            e.stopPropagation();\n            const newvalue = !props.value;\n            const updatedinvoiceList = [...invoiceList];\n            updatedinvoiceList[props.index][\"isselected\"] = newvalue;\n            setinvoiceList(updatedinvoiceList);\n          }}\n        >\n          <input\n            className=\"md-checkbox\"\n            style={{ marginLeft: 15 }}\n            type=\"checkbox\"\n            defaultChecked={props.value}\n            checked={props.value}\n          />\n        </div>\n      ),\n      sortable: false,\n      filterable: false,\n      width: 70,\n    },\n    {\n      Header: () => (\n        <span\n          className=\"cursour-pointer\"\n          onClick={() => {\n            setAPISort(\"invoice_number\");\n          }}\n        >\n          Invoice\n          <span className=\"sort-icons\">\n            <i className=\"fas fa-caret-up\"></i>\n            <i className=\"fas fa-caret-down\"></i>\n          </span>\n        </span>\n      ),\n      accessor: \"invoice_number\",\n      width: 180,\n      Cell: (data) => {\n        return (\n          <div data={{ id: get(data, \"original.id\", \"\"), type: \"invoice\" }}>\n            <span>{get(data, \"original.invoice_number\", \"\")}</span>\n          </div>\n        );\n      },\n    },\n    {\n      Header: () => (\n        <div className=\"text-center\">\n          <span>\n            PayIQ date <img src={filterarrow} alt=\" \" />\n          </span>\n        </div>\n      ),\n      accessor: \"expected_date\",\n      width: 180,\n      className: \"text-center\",\n      Cell: (data) => {\n        return (\n          <div>\n            {getFormattedDate(get(data, \"value\", \"\")) || \"-\"}\n            {get(data, \"original.expected_date_overridden\", \"\") ? <i className=\"fa fa-check text-success m-1\" /> : \"\"}\n          </div>\n        );\n      },\n      // Cell: data => getFormattedDate(data.value) || \"-\"\n    },\n    {\n      Header: () => (\n        <div className=\"text-center\">\n          <span\n            className=\"cursour-pointer\"\n            onClick={() => {\n              setAPISort(get(selectedSection, \"name\", \"\") === \"Paid\" ? \"date_closed\" : \"due_date\");\n            }}\n          >\n            {(get(selectedSection, \"name\", \"\") === \"Paid\" && \"Closed date\") ||\n              (get(selectedSection, \"name\", \"\") === \"Overdue\" && \"Due date\") ||\n              \"Due/Closed date\"}{\" \"}\n            <img src={filterarrow} alt=\" \" />\n          </span>\n        </div>\n      ),\n      accessor: \"due_date\",\n      width: 180,\n      className: \"text-center\",\n      Cell: (data) => {\n        if (get(data, \"original.date_closed\", \"\")) {\n          return getFormattedDate(get(data, \"original.date_closed\", \"\"));\n        } else {\n          return getFormattedDate(get(data, \"original.due_date\", \"\"));\n        }\n      },\n    },\n    {\n      Header: () => (\n        <div\n          className=\"cursour-pointer text-center\"\n          onClick={() => {\n            const sortkey = get(selectedSection, \"name\", \"\") === \"Paid\" ? \"total_amount_due\" : \"invoice_amount\";\n            setAPISort(sortkey);\n          }}\n        >\n          {!get(selectedSection, \"name\", \"\")\n            ? \"Amount\"\n            : get(selectedSection, \"name\", \"\") === \"Paid\"\n            ? \"Invoice Amount\"\n            : \"Amount Due\"}\n          <span className=\"sort-icons\">\n            <i className=\"fas fa-caret-up\"></i>\n            <i className=\"fas fa-caret-down\"></i>\n          </span>\n        </div>\n      ),\n      accessor: \"total_amount_due\",\n      className: \"text-center pr-2\",\n      width: 150,\n      Cell: (data) => {\n        return (\n          getFAWC(\n            Math.round(\n              get(data, \"original.date_closed\", \"\")\n                ? get(data, \"original.invoice_amount\", 0)\n                : get(data, \"original.total_amount_due\", 0)\n            )\n          ) || \"-\"\n        );\n      },\n    },\n    {\n      Header: () =>\n        !isrowselected && (\n          <span>\n            Payment method <img src={filterarrow} alt=\" \" />\n          </span>\n        ),\n      accessor: \"test\",\n      width: 180,\n      className: \"text-center\",\n      Cell: (data) => get(data, \"test\", \"-\"),\n    },\n    {\n      Header: () => (\n        <div\n          className=\"cursour-pointer text-center\"\n          // onClick={() => {\n          //   setAPISort(\"status\");\n          // }}\n        >\n          Status\n          <span className=\"sort-icons\">\n            <i className=\"fas fa-caret-up\"></i>\n            <i className=\"fas fa-caret-down\"></i>\n          </span>\n        </div>\n      ),\n      width: 100,\n      accessor: \"status\",\n      Cell: (data) => <div className=\"text-center\">{get(data, \"original.status\", \"Schedule payment\")}</div>,\n    },\n  ];\n\n  const prePopulatedBody = () => {\n    const selectedInvoices = invoiceList.filter((x) => x.isselected);\n    let res = \"\";\n    let total = 0,\n      list = \"\";\n    selectedInvoices.forEach((invoice) => {\n      list = `${list} <li> Invoice number: ${invoice.invoice_number}, Due date: ${getFormattedDate(\n        invoice.due_date\n      )}, Amount due: ${getShortNumber(invoice.total_amount_due)} </li>`;\n      total = total + invoice.total_amount_due;\n    });\n    res = `Invoices, <ul> ${list} </ul> <p> Total: ${getShortNumber(total)} </p>`;\n    return res;\n  };\n\n  const tableProps = isrowselected\n    ? {\n        TheadComponent: () => (\n          <div\n            style={{\n              height: 58,\n              borderTopLeftRadius: 10,\n              borderTopRightRadius: 10,\n            }}\n            className=\"border-bottom pt-2 pb-2 pl-1\"\n          >\n            <span className=\"pull-left mt-2\" style={{ width: 54 }}>\n              <div\n                onClick={(e) => {\n                  const newvalue = !(invoiceList && !invoiceList.find((x) => !x.isselected));\n                  setinvoiceList(invoiceList.map((x) => ({ ...x, isselected: newvalue })));\n                }}\n              >\n                <input\n                  className=\"md-checkbox\"\n                  style={{ marginLeft: 16, marginTop: 1 }}\n                  type=\"checkbox\"\n                  checked={get(invoiceList, \"[0]\", \"\") && !invoiceList.find((x) => !x.isselected)}\n                />\n              </div>\n            </span>\n            <span className=\"mt-2\">\n              <span\n                onClick={() => setshowpayIQDateModal(true)}\n                className=\"multiActivityshow btn btn-primary btn-sm cursour-pointer\"\n                data-toggle=\"modal\"\n                data-target=\"#myModal\"\n              >\n                <i className=\"fa fa-calendar mr-1\" aria-hidden=\"true\" />\n                PayIQ Date\n              </span>\n              <span\n                onClick={() => {\n                  setshowNoteModal(true);\n                  setisinvoicelevelnote(true);\n                }}\n                className=\"multiActivityshow btn btn-primary btn-sm ml-2 cursour-pointer\"\n                data-toggle=\"modal\"\n                data-target=\"#myModal2\"\n              >\n                <i className={\"fa fa-pencil mr-1\"} aria-hidden=\"true\" /> Notes{\" \"}\n              </span>\n              <span\n                onClick={() => {\n                  setemailData({\n                    show: true,\n                    to: get(fulldata, \"detail.email\", \"\"),\n                    body: prePopulatedBody(),\n                    onSave: onEmailSave,\n                    fetchingInvoices: true,\n                  });\n                  function takeAction(newdata = {}) {\n                    setemailData({\n                      fetchingInvoices: false,\n                      ...newdata,\n                    });\n                  }\n                  instance\n                    .post(\"invoice-attachments\", {\n                      invoices: invoiceList.filter((x) => x.isselected).map((inv) => inv.invoice_number),\n                    })\n                    .then((resp) => {\n                      takeAction({ files: get(resp, \"data.result\", []).map((x) => ({ ...x, isbase64: true })) });\n                    })\n                    .catch((e) => {\n                      Toaster(\"Invoice not available\", \"error\");\n                      takeAction();\n                    });\n                }}\n                className=\"multiActivityshow btn btn-primary btn-sm ml-2 cursour-pointer\"\n                data-toggle=\"modal\"\n                data-target=\"#myModal5\"\n              >\n                <i className={\"fa fa-envelope mr-1\"} aria-hidden=\"true\" /> Email{\" \"}\n              </span>\n              <span onClick={() => fastForwardPayiq(\"week\")} className={`btn btn-sm btn-primary ml-2`}>\n                <i className=\"fas fa-play mr-1\" /> Week{\" \"}\n              </span>\n\n              <span onClick={() => fastForwardPayiq(\"month\")} className={`btn btn-sm btn-primary ml-2`}>\n                <i className=\"fas fa-forward mr-1\" /> Month{\" \"}\n              </span>\n              {TokenManager.getIsPayAdmin() && <span\n                className={`multiActivityshow btn btn-primary btn-sm ml-2 cursour-pointer ${!TokenManager.getIsPayAdmin && \"disabled\"}`}\n                onClick={deletePayIq}\n              >\n                <i\n                  class=\"fa fa-trash-o\"\n                  aria-hidden=\"true\"\n                  style={{ fontSize: \"15px\" }}\n                /> Delete invoice{\" \"}\n              </span>}\n              <span className=\"total-amount-wrapper right-0\">\n                <strong>Total: </strong>\n                <span>\n                  {convertAmount(\n                    Math.round(\n                      invoiceList\n                        .filter((d) => d.isselected)\n                        .reduce((a, b) => +a + +(b.total_amount_due || b.invoice_amount), 0)\n                    )\n                  )}\n                </span>\n              </span>\n              {/* <span\n                onClick={() => {\n                  props.history.push('/customers/payments')\n                }}\n                className=\"multiActivityshow btn btn-primary btn-sm ml-2 cursour-pointer\"\n              >\n                <i className=\"far fa-credit-card\" /> Make Payment{\" \"}\n              </span> */}\n            </span>\n          </div>\n        ),\n      }\n    : {};\n\n  function onEmailSave(to, subject, body, files = [], cc) {\n    const postData = { to, subject, message: body, cc };\n    let bodyFormData = new FormData();\n    bodyFormData.set(\"metadata\", JSON.stringify(postData));\n    files.forEach((file) => {\n      if (file.isbase64) {\n        bodyFormData.append(\n          \"files[]\",\n          new File([b64toBlob(decodeURIComponent(JSON.parse(file.content)))], file.name),\n          file.name\n        );\n      } else {\n        bodyFormData.append(\"files[]\", file, file.name);\n      }\n    });\n\n    instanceMultipart\n      .post(`sendemail?customer_id=${customerid}`, bodyFormData)\n      .then(() => {\n        resetemail();\n        Toaster(`An email was sent to ${to}`, \"success\");\n        instance\n          .put(`/customer/note`, {\n            date: moment().format(\"MM/DD/YYYY\"),\n            note: `An email was sent to ${to} \\n Subject: ${subject}`,\n            customer_id: customerid,\n          })\n          .then(() => {\n            resetemail();\n            setnotesUpdated(true);\n            setinvoiceList(invoiceList.map((x) => ({ ...x, isselected: false })));\n          });\n      })\n      .catch((e) => handleAPIError(e));\n  }\n\n  const chartTotal =\n    (last12MonthPaid || 0) + get(customerData, \"Outstanding Balance\", 0) + get(customerData, \"Overdue Balance\", 0);\n\n  return (\n    <div className=\"row px-15\" id=\"dashboardBody\">\n      <TextAreaModal\n        header=\"Add Note\"\n        show={showNoteModal}\n        handleClose={() => setshowNoteModal(false)}\n        handleSubmit={(value) => {\n          if (isinvoicelevelnote) {\n            const allselectedinvoices = invoiceList.filter((x) => x.isselected);\n            const allpromises = allselectedinvoices.map((x) =>\n              instance.put(`/customer/note`, {\n                date: moment().format(\"MM/DD/YYYY\"),\n                note: value,\n                invoice_id: JSON.stringify(x.id),\n                customer_id: customerid,\n              })\n            );\n            Promise.all(allpromises).then(() => {\n              setshowNoteModal(false);\n              Toaster(\"Notes added\", \"success\");\n              setnotesUpdated(true);\n              setinvoiceList(invoiceList.map((x) => ({ ...x, isselected: false })));\n            });\n          } else {\n            instance\n              .put(`/customer/note`, {\n                date: moment().format(\"MM/DD/YYYY\"),\n                note: value,\n                customer_id: customerid,\n              })\n              .then(() => {\n                setshowNoteModal(false);\n                Toaster(\"Notes added\", \"success\");\n                setnotesUpdated(true);\n                setinvoiceList(invoiceList.map((x) => ({ ...x, isselected: false })));\n              });\n          }\n        }}\n      />\n      <DateModal\n        header=\"Update PayIQ Date\"\n        show={showpayIQDateModal}\n        handleClose={() => setshowpayIQDateModal(false)}\n        handleSubmit={(value) => {\n          const allselectedinvoices = invoiceList.filter((x) => x.isselected);\n          const allpromises = allselectedinvoices.map((x) =>\n            instance.put(`/arinvoice?id=${x.id}`, {\n              expected_date: moment(value).format(\"MM/DD/YYYY\"),\n              expected_date_override: true\n            })\n          );\n          Promise.all(allpromises).then(() => {\n            setshowpayIQDateModal(false);\n            Toaster(\"Updated successfully\", \"success\");\n            const temp = customerData;\n            setcustomerData(null);\n            setcustomerData(temp);\n            localStorage.setItem(\"refresh_reports\", true);\n          });\n        }}\n      />\n      <div className={toggleCollapse ? \"slide-left\" : \"slide-right\"}>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className=\"paynewdetsec\">\n                  <div className=\"titletranshist\" style={{ fontSize: \"18px\", paddingBottom: \"15px\", float: \"left\" }}>\n                    <span\n                      onClick={() => {\n                        props.location.hash === \"#reports\" ? props.history.push(`/reports`) : history.goBack();\n                      }}\n                      title=\"Back\"\n                    >\n                      <i\n                        className=\"fa fa-arrow-left\"\n                        style={{ color: \"#ddd\", marginRight: \"5px\", ariaHidden: true, cursor: \"pointer\" }}\n                      ></i>\n                    </span>\n                    &nbsp;{get(customerData, \"Vendor Name\", \"\")}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className={activeKey !== \"#invoice\" ? \"d-none\" : \"\"}>\n              <>\n                <div className=\"row\">\n                  <div className=\"col-md-12 d-flex justify-content-center pl-5\">\n                    {showChart ? (\n                      chartTotal ? (\n                        <>\n                          <DonutChart\n                            onRecordClick={(record) => {\n                              setpage(1);\n                              setselectedSection(record);\n                            }}\n                            data={chartData}\n                            total={chartTotal}\n                            selectedSection={selectedSection}\n                          />\n                          <div\n                            className=\"hide-scroll\"\n                            style={{ height: 300, width: 275, marginLeft: 24, overflowY: \"auto\" }}\n                          >\n                            <div className=\"mt-4\">\n                              {chartData &&\n                                chartData.map((entity, i) =>\n                                  get(entity, \"value\", \"\") ? (\n                                    <div\n                                      className=\"col-md-12 p-2 cursour-pointer\"\n                                      onClick={() => {\n                                        setpage(1);\n                                        setselectedSection(entity);\n                                      }}\n                                    >\n                                      <span\n                                        className={`ml-2 mr-2 donutchart-legend-dot`}\n                                        style={{\n                                          backgroundColor: `${get(entity, \"line-color\", COLORS[i % 8])}`,\n                                        }}\n                                      />\n                                      <span>\n                                        {get(entity, \"name\", \"-\")}&nbsp;({getFAWC(entity.value)})\n                                        {/* {get(entity, \"name\", \"-\")}&nbsp;({Math.round((entity.value / total) * 100)}%) */}\n                                      </span>\n                                    </div>\n                                  ) : (\n                                    \"\"\n                                  )\n                                )}\n                            </div>\n                          </div>\n                        </>\n                      ) : (\n                        <PieChartPlaceholder />\n                      )\n                    ) : (\n                      <div className=\"w-100\" style={{ height: 300 }}>\n                        <CustomSpinner />\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <Nav variant=\"tabs\" activeKey={activeKey} onSelect={(k) => setactiveKey(k)}>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"#invoice\">Invoice List</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"#backlog\">Order Backlog</Nav.Link>\n                  </Nav.Item>\n                </Nav>\n\n                <div className=\"row mt-3\">\n                  <div className=\"col-md-12\">\n                    <div className=\"titletranshist\">\n                      <div className=\"pull-left\">Customer Invoices</div>\n                      <div className=\"dropdown pull-right\">\n                        <span\n                          className=\"btn dropdown-toggle btn-primary\"\n                          role=\"button\"\n                          id=\"\"\n                          data-toggle=\"dropdown\"\n                          aria-haspopup=\"true\"\n                          aria-expanded=\"false\"\n                          onClick={() => setshowexport(true)}\n                        >\n                          Export\n                        </span>\n                        <ClickAwayListener onClickAway={setshowexport}>\n                          <div\n                            className={`dropdown-menu dropdown-menu-right payexpdroplist ${showexport && \"show\"}`}\n                            aria-labelledby=\"dropdownMenuLink\"\n                            id=\"\"\n                          >\n                            <CSVLink\n                              data={ExportCSV(exportedData)}\n                              ref={csvRef}\n                              filename={`customerdetails_${moment().format(\"MMMM Do YYYY-h:mm:ss-a\")}.csv`}\n                              style={{ display: \"none\" }}\n                            />\n                            <span\n                              style={{\n                                fontSize: 12,\n                                display: \"block\",\n                                textAlign: \"right\",\n                                marginRight: \"10px\",\n                                marginBottom: \"10px\",\n                                cursor: \"pointer\",\n                              }}\n                              onClick={() => exportAllData(true)}\n                            >\n                              Export CSV\n                            </span>\n                            <span\n                              style={{\n                                fontSize: 12,\n                                display: \"block\",\n                                textAlign: \"right\",\n                                marginRight: \"10px\",\n                                cursor: \"pointer\",\n                              }}\n                              onClick={exportAllData}\n                            >\n                              Export Excel\n                            </span>\n                          </div>\n                        </ClickAwayListener>\n                      </div>\n                    </div>\n\n                    <div className=\"paytable mt-3 table-responsive\" style={{ overflowY: \"hide\" }}>\n                      <div className=\"mt-2\">\n                        <ReactTable\n                          {...tableProps}\n                          minRows={invoiceList.length || 1}\n                          resizable={true}\n                          showPagination={false}\n                          noDataText={isFetching ? \"\" : \"No data found\"}\n                          loading={isFetching}\n                          getTrProps={(state, rowInfo, column) => {\n                            return {\n                              onClick: (e) => {\n                                window.open(\n                                  `${window.location.origin}/receivables/${get(rowInfo.original, \"id\", \"-\")}`,\n                                  \"_self\"\n                                );\n                              },\n                            };\n                          }}\n                          columns={columns}\n                          data={invoiceList}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"filterthree\">\n                    <div className=\"pull-right\">\n                      <button className=\"btn btn-primary mr-2 width-94px\" disabled={page === 1} onClick={Decrement}>\n                        Previous\n                      </button>\n                      <button\n                        className=\"btn btn-primary width-94px\"\n                        disabled={invoiceList && invoiceList.length < 20}\n                        onClick={Increment}\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </>\n            </div>\n\n            <div className={activeKey === \"#invoice\" ? \"d-none\" : \"\"}>\n              <BacklogList setactiveKey={setactiveKey} activeKey={activeKey} customerid={customerid} />\n            </div>\n          </div>\n        </div>\n      </div>\n      <CustomerDetailSidebar\n        customerData={fulldata}\n        onEmailSave={onEmailSave}\n        setshowNoteModal={setshowNoteModal}\n        customerid={customerid}\n        collapse={toggleCollapse}\n        handleToggleCollapse={handleToggleCollapse}\n        setisinvoicelevelnote={setisinvoicelevelnote}\n        customerReminder={customerReminder}\n        getCustomerReminder={getCustomerReminder}\n        GetCustomerDetail={GetCustomerDetail}\n        notesUpdated={notesUpdated}\n        setnotesUpdated={setnotesUpdated}\n        customerCategoryList={customerCategoryList}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerDetails);\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport XAxisTick from \"components/Recharts/XAxisTick\";\nimport CustomToolTip from \"components/Recharts/CustomTooltip\";\nimport { handleAPIError } from \"handlers/setters\";\nimport get from \"lodash/get\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { Bar, BarChart, Legend, Tooltip, XAxis, YAxis, ResponsiveContainer } from \"recharts\";\nimport { getShortNumber } from \"utils\";\nimport TokenManager from \"utils/TokenManager\";\nimport { instanceWithRetry as instance } from \"../../actions/axiosInstance\";\nimport { GetXLabelObjects } from \"../../utils/graphDateFormat\";\n\nexport class CustomChart extends React.PureComponent {\n  //static jsfiddleUrl = \"https://jsfiddle.net/alidingling/90v76x08/\";\n\n  render() {\n    const { data, isLoading } = this.props;\n    return (\n      <div>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart\n            width={600}\n            height={300}\n            data={data}\n            margin={{\n              // top: 20,\n              right: 60,\n              left: 0\n              // bottom: 5\n            }}\n          >\n            {/* <CartesianGrid /> */}\n            <XAxis tick={<XAxisTick />} dataKey=\"text\" />\n            <YAxis tickFormatter={tick => getShortNumber(tick)} />\n            <Tooltip cursor={false} content={<CustomToolTip />} />\n            <Legend\n              wrapperStyle={{\n                paddingLeft: \"80px\"\n              }}\n            />\n            <Bar dataKey=\"paid\" name=\"Paid\" stackId=\"a\" barWidth=\"60\" fill=\"#7CB5EC\" />\n            <Bar dataKey=\"l30\" name=\"< 30 days\" stackId=\"a\" barWidth=\"60\" fill=\"#75CF5B\" />\n            <Bar dataKey=\"g30\" name=\"> 30 days\" stackId=\"a\" barWidth=\"60\" fill=\"#F4A160\" />\n          </BarChart>\n        </ResponsiveContainer>\n        {\n          isLoading ?\n            <div className=\"graph-loader\">\n              <div className=\"spinner-border\" />\n            </div>\n            : null\n        }\n      </div>\n    );\n  }\n}\n\nfunction PaymentGraph(props) {\n  const { setactiveKey } = props;\n  const [averagePaymentProjectionData, setAveragePaymentProjectionData] = useState([]);\n  const [selectedPaytab, setselectedPaytab] = useState(\"30days\"); //\n  const [startDate, setStartDate] = useState(moment().subtract(\"days\", 30).format(\"MM/DD/YYYY\"));\n  const [endDate, setendDate] = useState(moment().format(\"MM/DD/YYYY\"));\n  const [isFetching, setIsFetching] = useState(true);\n\n  useEffect(() => {\n    getAveragePaymentGraphData(startDate, endDate);\n  }, [startDate, endDate]);\n\n  const getAveragePaymentGraphData = (startDate, endDate) => {\n    let l30done, g30done, paiddone;\n    setIsFetching(true);\n\n    // < 30 days\n    let xAxisLavel = GetXLabelObjects(startDate, endDate, selectedPaytab);\n    let DATA = xAxisLavel;\n    const allLess30Promises = [];\n    xAxisLavel.forEach((x, i) => {\n      allLess30Promises.push(\n        instance.get(`arinvoice/total?status=all&category=2&from_date='${x.start}'&to_date='${x.end}'`)\n      );\n    });\n\n    Promise.all(allLess30Promises)\n      .then(res => {\n        DATA = DATA.map((x, i) => ({ ...x, l30: get(res[i], `data.total`, 0) }));\n        l30done = true;\n        l30done && g30done && paiddone && setAveragePaymentProjectionData(DATA);\n        setIsFetching(false);\n        props.setPaymentGraphLoading(false);\n      })\n      .catch(e => handleAPIError(e));\n\n    // > 30 days\n    const allGreater30Promises = [];\n    xAxisLavel.forEach((x, i) => {\n      allGreater30Promises.push(\n        instance.get(`arinvoice/total?status=all&category=4&from_date='${x.start}'&to_date='${x.end}'`)\n      );\n    });\n\n    Promise.all(allGreater30Promises)\n      .then(res => {\n        DATA = DATA.map((x, i) => ({ ...x, g30: get(res[i], `data.total`, 0) }));\n        g30done = true;\n        l30done && g30done && paiddone && setAveragePaymentProjectionData(DATA);\n        setIsFetching(false);\n      })\n      .catch(e => handleAPIError(e));\n\n    // paid\n    const allPaidPromises = [];\n    xAxisLavel.forEach((x, i) => {\n      allPaidPromises.push(\n        instance.get(`arinvoice/total?status=closed&from_date='${x.start}'&to_date='${x.end}'`)\n      );\n    });\n\n    Promise.all(allPaidPromises)\n      .then(res => {\n        DATA = DATA.map((x, i) => ({ ...x, paid: get(res[i], `data.total`, 0) }));\n        paiddone = true;\n        l30done && g30done && paiddone && setAveragePaymentProjectionData(DATA);\n        setIsFetching(false);\n      })\n      .catch(e => handleAPIError(e));\n  };\n\n  function switchSelectedTab(tab) {\n    switch (tab) {\n      case \"30days\":\n        setStartDate(\n          moment\n            ()\n            .subtract(30, \"days\")\n            .format(\"MM/DD/YYYY\")\n        );\n        break;\n      case \"6months\":\n        setStartDate(\n          moment\n            ()\n            .subtract(3, \"months\")\n            .format(\"MM/DD/YYYY\")\n        );\n        break;\n      case \"1year\":\n        setStartDate(\n          moment\n            ()\n            .subtract(1, \"years\")\n            .format(\"MM/DD/YYYY\")\n        );\n        break;\n      default:\n        break;\n    }\n    setselectedPaytab(tab);\n  }\n\n  return (\n    <div className=\"col-md-12\" style={{ overflowY: \"auto\" }}>\n      <div className=\"\">\n        {setactiveKey && <h1 className=\"custchattabhead\">Total AR</h1>}\n        <div className=\" table100 pt-0\">\n          <div className=\"row\"></div>\n          <div className=\"custchattab1\">\n            <span\n              onClick={() => switchSelectedTab(\"1year\")}\n              className={`cursour-pointer ${selectedPaytab === \"1year\" && \"activec\"}`}\n            >\n              Year\n            </span>\n            <span\n              onClick={() => switchSelectedTab(\"6months\")}\n              className={`cursour-pointer ${selectedPaytab === \"6months\" && \"activec\"}`}\n            >\n              Quarter\n            </span>\n            <span\n              onClick={() => switchSelectedTab(\"30days\")}\n              className={`cursour-pointer ${selectedPaytab === \"30days\" && \"activec\"}`}\n            >\n              Month\n            </span>\n          </div>\n          <div\n            className={props.setactiveKey && \"cursour-pointer\"}\n            onClick={() => {\n              const { setactiveKey } = props;\n              setactiveKey && setactiveKey(\"payment\");\n            }}>\n            <CustomChart data={averagePaymentProjectionData} isLoading={isFetching} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PaymentGraph;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { instanceWithRetry } from \"actions/axiosInstance\";\nimport \"assets/css/paymentdetails.css\";\nimport PieChartPlaceholder from \"components/Recharts/Placeholders/Piechart\";\nimport get from \"lodash/get\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { getFAWC, getShortNumber } from \"utils\";\nimport { betweenDays, isinbetween } from \"utils/dates\";\nimport CustomSpinner from \"components/Spinner\";\nimport { Cell, Label, Pie, PieChart, ResponsiveContainer, Sector, Legend, Tooltip } from \"recharts\";\nimport { useWindowSize } from \"handlers/getters\";\nimport CustomToolTip from \"components/Recharts/CustomTooltip\";\nimport PieChartTooltip from \"components/Recharts/PieChartTooltip\";\n// import { betweenDays } from \"utils/dates\";\n\nconst renderActiveShape = (props) => {\n  const { cx, cy, innerRadius, outerRadius, startAngle, endAngle, fill } = props;\n\n  return (\n    <g>\n      <Sector\n        className=\"cursour-pointer\"\n        cx={cx}\n        cy={cy}\n        innerRadius={innerRadius}\n        outerRadius={outerRadius + 5}\n        startAngle={startAngle}\n        endAngle={endAngle}\n        fill={fill}\n      />\n    </g>\n  );\n};\n\nconst DonutChart = ({ data = [], vendorData, onRecordClick, total = 0, selectedSection, fullsize }) => {\n  const [activeindex, setactiveindex] = useState(null);\n  const [width, height] = useWindowSize();\n\n  useEffect(() => {\n    (get(selectedSection, \"dataindex\", null) || get(selectedSection, \"dataindex\", null) === 0) &&\n      setactiveindex(get(selectedSection, \"dataindex\", null));\n  }, [selectedSection]);\n\n  function onPieEnter(data, index) {\n    setactiveindex(index);\n  }\n  function onPieLeave(data, index) {\n    setactiveindex(null || get(selectedSection, \"dataindex\", null));\n  }\n\n  return (\n    total &&\n    (width > 1260 || fullsize ? (\n      <ResponsiveContainer height={320} width={320}>\n        <PieChart>\n          <Pie\n            animationDuration={1000}\n            activeIndex={activeindex}\n            activeShape={renderActiveShape}\n            data={data}\n            innerRadius={60}\n            outerRadius={140}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n            onClick={(e) => onRecordClick(e.payload.payload)}\n            onMouseEnter={onPieEnter}\n            onMouseLeave={onPieLeave}\n          >\n            <Label className=\"cursour-pointer\" width={30} position=\"center\" onClick={() => onRecordClick(null)}>\n              {`Totaly ${getShortNumber(total) || \"-\"}`}\n            </Label>\n            {data.map((entry, index) => (\n              <Cell key={entry} className=\"cursour-pointer\" fill={COLORS[entry.dataindex % COLORS.length]} />\n            ))}\n          </Pie>\n        </PieChart>\n      </ResponsiveContainer>\n    ) : (\n      <ResponsiveContainer height={320} width={320}>\n        <PieChart>\n          <Pie\n            animationDuration={1000}\n            activeIndex={activeindex}\n            activeShape={renderActiveShape}\n            data={data}\n            innerRadius={50}\n            outerRadius={120}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n            onClick={(e) => onRecordClick(e.payload.payload)}\n            onMouseEnter={onPieEnter}\n            onMouseLeave={onPieLeave}\n            label={(data) => { \n              return getShortNumber(data.value)\n            }}\n          >\n            <Label className=\"cursour-pointer\" width={30} position=\"center\" onClick={() => onRecordClick(null)}>\n              {`Total ${getShortNumber(total) || \"-\"}`}\n            </Label>\n            {data.map((entry, index) => (\n              <Cell key={entry} className=\"cursour-pointer\" fill={COLORS[entry.dataindex % COLORS.length]} />\n            ))}\n          </Pie>\n          <Legend align=\"center\" verticalAlign=\"bottom\" />\n          {!fullsize && width <= 1260 && <Tooltip content={<PieChartTooltip />} />}\n        </PieChart>\n      </ResponsiveContainer>\n    ))\n  );\n};\n\nconst COLORS = [\"#2B7EF6\", \"#7CA82D\", \"#EF853A\", \"#DB504D\", \"#424348\", \"#90ED7D\", \"#3C861F\", \"#F9D7E0\"];\nconst dummyData = [\n  {\n    name: \"Current\",\n    dataindex: 0,\n    from_date: moment().format(\"MM/DD/YYYY\"),\n    // to_date: \"\",\n    is_future: true,\n    to_date: moment().add(\"days\", 365).format(\"MM/DD/YYYY\"),\n  },\n  {\n    name: \"1-30 Days\",\n    dataindex: 1,\n    from_date: moment().subtract(\"days\", 30).format(\"MM/DD/YYYY\"),\n    to_date: moment().subtract(\"days\", 1).format(\"MM/DD/YYYY\"),\n  },\n  {\n    name: \"31-60 days\",\n    dataindex: 2,\n    from_date: moment().subtract(\"days\", 60).format(\"MM/DD/YYYY\"),\n    to_date: moment().subtract(\"days\", 31).format(\"MM/DD/YYYY\"),\n  },\n  {\n    name: \"61-90 days\",\n    dataindex: 3,\n    from_date: moment().subtract(\"days\", 90).format(\"MM/DD/YYYY\"),\n    to_date: moment().subtract(\"days\", 61).format(\"MM/DD/YYYY\"),\n  },\n  {\n    name: \"> 90 days\",\n    dataindex: 4,\n    // from_date: \"\",\n    is_past: true,\n    from_date: moment().subtract(\"days\", 365).format(\"MM/DD/YYYY\"),\n    to_date: moment().subtract(\"days\", 91).format(\"MM/DD/YYYY\"),\n  },\n];\n\nlet PREV_URL = \"\";\n\nconst AgingChart = (props) => {\n  const { originalstartDate, originalendDate, showgraphs, setactiveKey, fullsize } = props;\n  const [selectedSection, setselectedSection] = useState(null);\n  const [chartData, setchartData] = useState([]);\n  const [total, settotal] = useState(null);\n  const [showChart, setshowChart] = useState(false);\n  const [width, height] = useWindowSize();\n\n  let timer = null;\n\n  useEffect(() => {\n    if (!showgraphs || !originalstartDate || !originalendDate) {\n      return;\n    }\n    timer && clearTimeout(timer);\n    timer = setTimeout(getData, 200);\n    return () => {\n      PREV_URL = \"\";\n    };\n  }, [originalstartDate, originalendDate, showgraphs]);\n\n  function getData() {\n    const total_url = `arinvoice/total?status=open&from_date=${originalstartDate}&to_date=${originalendDate}`;\n    if (total_url === PREV_URL) {\n      return;\n    }\n    setshowChart(false);\n    settotal(null);\n    setchartData([]);\n    let apis = [];\n    instanceWithRetry.get(total_url).then((resp) => {\n      PREV_URL = total_url;\n      settotal(get(resp, \"data.total\", \"\"));\n      // setchartData([]);\n      // setshowChart(false);\n      dummyData.forEach((x, i) => {\n        x.is_past && (x.from_date = originalstartDate);\n        x.is_future && (x.to_date = originalendDate);\n        let days_to_add = betweenDays({\n          startdate: moment(x.from_date, \"MM/DD/YYYY\"),\n          enddate: moment(originalstartDate, \"MM/DD/YYYY\"),\n        });\n        days_to_add = days_to_add > 0 ? days_to_add : 0;\n\n        const from_end = betweenDays({\n          startdate: moment(x.from_date, \"MM/DD/YYYY\"),\n          enddate: moment(originalendDate, \"MM/DD/YYYY\"),\n        });\n\n        const to_start = betweenDays({\n          startdate: moment(originalstartDate, \"MM/DD/YYYY\"),\n          enddate: moment(x.to_date, \"MM/DD/YYYY\"),\n        });\n\n        let days_to_subtract = betweenDays({\n          startdate: moment(originalendDate, \"MM/DD/YYYY\"),\n          enddate: moment(x.to_date, \"MM/DD/YYYY\"),\n        });\n        days_to_subtract = days_to_subtract > 0 ? days_to_subtract : 0;\n\n        if (!(from_end < 0 || to_start < 0)) {\n          const updated_from_date = moment(x.from_date, \"MM/DD/YYYY\").add(\"days\", days_to_add).format(\"MM/DD/YYYY\");\n          // const is_past = betweenDays({ startdate: moment(), enddate: moment(updated_from_date) }) <= 0;\n          const updated_to_date = moment(x.to_date, \"MM/DD/YYYY\")\n            .subtract(\"days\", days_to_subtract)\n            .format(\"MM/DD/YYYY\");\n          // const is_future = betweenDays({ startdate: moment(updated_to_date), enddate: moment() }) <= 0;\n          apis.push({\n            ...x,\n            from_date: x.is_past ? originalstartDate : updated_from_date,\n            to_date: x.is_future ? originalendDate : updated_to_date,\n          });\n        }\n      });\n\n      const toMoment = (date) => moment(date, \"MM/DD/YYYY\");\n\n      // filter\n      // apis = apis.filter(\n      //   (x) =>\n      //     (x.dataindex === 0 ||\n      //     x.dataindex === 4 )\n\n      // );\n      Promise.all(\n        apis.map((x) =>\n          instanceWithRetry.get(\n            `arinvoice/total?status=open${x.from_date && `&from_date=${x.from_date}`}${\n              x.to_date && `&to_date=${x.to_date}`\n            }`\n          )\n        )\n      )\n        .then((resp) => {\n          setchartData(\n            apis.map((x, i) => ({\n              ...x,\n              value: get(resp, `[${i}].data.total`, 0),\n              color: COLORS[i % COLORS.length],\n              name: x.is_future\n                ? fullsize\n                  ? `${\n                      moment(x.from_date, \"MM/DD/YYYY\").format(\"MM/DD/YYYY\") === moment().format(\"MM/DD/YYYY\")\n                        ? \"Today\"\n                        : moment(x.from_date, \"MM/DD/YYYY\").format(\"MMM DD, Y\")\n                    } ${\n                      moment(x.to_date).format(\"MM/DD/YY\") !== moment().format(\"MM/DD/YY\")\n                        ? `- ${moment(x.to_date).format(\"MMM DD, Y\")}`\n                        : \"\"\n                    }`\n                  : \"Due\"\n                : x.is_past\n                ? x.name\n                : `Past ${betweenDays({ startdate: moment(x.to_date), enddate: moment() })} - ${betweenDays({\n                    startdate: moment(x.from_date),\n                    enddate: moment(),\n                  })} Days `,\n            }))\n          );\n          setshowChart(true);\n          setselectedSection(null);\n        })\n        .catch((e) => {\n          setshowChart(true);\n        });\n    });\n  }\n\n  function updateSection(from, to, sec) {\n    if (props.setstartDate && fullsize) {\n      props.setstartDate(from);\n      props.setendDate(to);\n      props.setpage(1);\n      setselectedSection(sec);\n    }\n  }\n\n  return (\n    <div className=\"col-md-12\" style={{ height: \"100vh\" }}>\n      <div className=\"\">\n        {setactiveKey && <h1 className=\"custchattabhead\">AR aging</h1>}\n        <div className=\"table100 pt-1\">\n          {width > 1260 && <div class=\"custchattab1 text-center w-100\" />}\n\n          <div\n            className={props.setactiveKey && \"cursour-pointer\"}\n            onClick={() => {\n              const { setactiveKey } = props;\n              setactiveKey && setactiveKey(\"araging\");\n            }}\n          >\n            {showChart ? (\n              total ? (\n                <div className=\"col-md-12 d-flex justify-content-center text-left\">\n                  <span className=\"ml-3\">\n                    <DonutChart\n                      onRecordClick={(record) => {\n                        updateSection(\n                          get(record, \"from_date\", originalstartDate),\n                          get(record, \"to_date\", originalendDate),\n                          record\n                        );\n                      }}\n                      data={chartData}\n                      total={total}\n                      selectedSection={selectedSection}\n                      fullsize={props.fullsize}\n                    />\n                  </span>\n                  {(width > 1260 || props.fullsize) && (\n                    <span className={`mt-4 ${fullsize ? \"ml-4\" : \"\"}`}>\n                      <div className=\"bg-light-grey ml-2 pl-3 py-2 px-1\">\n                        <span\n                          onClick={() => {\n                            updateSection(originalstartDate, originalendDate, null);\n                          }}\n                          // className={`cursour-pointer ${selectedInvtab === \"1year\" && \"activec\"}`}\n                        >\n                          {`${moment(originalstartDate, \"MM/DD/YYYY\").format(\"MMM DD, Y\")} - ${moment(\n                            originalendDate,\n                            \"MM/DD/YYYY\"\n                          ).format(\"MMM DD, Y\")}`}\n                        </span>\n                      </div>\n                      {chartData.map((x, i) => (\n                        <div className=\"col-md-12 py-2 px-1 text-truncate\">\n                          <span\n                            className={`ml-1 mr-1 donutchart-legend-dot`}\n                            style={{\n                              backgroundColor: `${get(x, \"line-color\", COLORS[x.dataindex % 8])}`,\n                            }}\n                          />\n                          <span\n                            className=\"cursour-pointer\"\n                            onClick={() => {\n                              updateSection(x.from_date, x.to_date, x);\n                            }}\n                          >\n                            {`${get(x, \"name\", \"-\")} `} ({getFAWC(get(x, \"value\", 0))})\n                          </span>\n                        </div>\n                      ))}\n                      {/* <div\n                  className=\"col-md-12 py-2 cursour-pointer t-12 text-truncate border\"\n                  onClick={() => {\n                    props.resetFilter();\n                  }}\n                >\n                  <span\n                    className={`ml-2 mr-2 donutchart-legend-dot font-weight-bold`}\n                    style={{\n                      backgroundColor: COLORS[(chartData.length + 1) % 8],\n                    }}\n                  />\n                  <span>Reset</span>\n                </div> */}\n                    </span>\n                  )}\n                </div>\n              ) : (\n                <PieChartPlaceholder />\n              )\n            ) : (\n              <CustomSpinner />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AgingChart;\n\n\n// component if required to replace default Legend\n// const renderLegend = (props) => {\n//   const { payload } = props;\n//   console.log(\"payload: \", payload);\n\n//   return (\n//     <div className=\"d-flex justify-content-center\">\n//       <div className=\"row m-0 p-0\">\n//         {payload.map((entry, index) => (\n//           <div key={`item-${index}`} className=\"col-md-6\">\n//             <span\n//               className={`ml-2 mr-1 donutchart-legend-dot`}\n//               style={{\n//                 backgroundColor: `${get(entry.payload, \"line-color\", COLORS[entry.payload.dataindex % 8])}`,\n//               }}\n//             />\n//             <span className=\"cursour-pointer t-12\">\n//               {`${get(entry.payload, \"name\", \"-\")} `} ({getFAWC(get(entry.payload, \"value\", 0))})\n//             </span>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n","import React, { useState, useEffect } from \"react\";\nimport PaymentGraph from \"./paymentGraph\";\nimport Agingchart from \"./Agingchart\";\n\nexport const Graphs = (props) => {\n  const { loadCustomerList } = props;\n\n  const [paymentGraphLoading, setPaymentGraphLoading] = useState(true);\n  const [invoiceGraphLoading, setInvoiceGraphLoading] = useState(true);\n\n  useEffect(() => {\n    if (!paymentGraphLoading && !invoiceGraphLoading) {\n      loadCustomerList(true);\n    }\n  }, [paymentGraphLoading, invoiceGraphLoading]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6\">\n        <div className=\"graphbg\">\n          <div className=\"graph1\"></div>\n          <div\n            id=\"container1\"\n            style={{ minWidth: \"310px\", height: 420, margin: \"0px auto\", width: \"100%\" }}\n            data-highcharts-chart={0}\n          >\n            <PaymentGraph\n              {...props}\n              setPaymentGraphLoading={setPaymentGraphLoading}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"col-md-6\">\n        <div classname=\"graphbg\">\n          <div className=\"graph1\"></div>\n          <div\n            id=\"container1\"\n            style={{ minWidth: \"310px\", height: 420, margin: \"0px auto\", width: \"100%\", overflow: \"hidden\" }}\n            data-highcharts-chart={0}\n          >\n            <Agingchart\n              {...props}\n              setInvoiceGraphLoading={setInvoiceGraphLoading}\n              setstartDate={props.setstartDate}\n              setendDate={props.setendDate}\n              setpage={props.setpage}\n              resetFilter={props.resetFilter}\n              originalstartDate={props.originalstartDate}\n              originalendDate={props.originalendDate}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Graphs;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport Autocomplete from \"components/Autocomplete\";\nimport DateRangePicker from \"components/DateRangePicker\";\nimport ClickAwayListener from \"components/ClickAwayListener\";\nimport \"containers/dashboard/dashboard.css\";\nimport * as FileSaver from \"file-saver\";\nimport { handleAPIError } from \"handlers/setters\";\nimport debounce from \"lodash/debounce\";\nimport get from \"lodash/get\";\nimport uniqBy from \"lodash/uniqBy\";\nimport moment from \"moment\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport { CSVLink } from \"react-csv\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport ReactTable from \"react-table-v6\";\nimport { getFAWC, getShortNumber, convertDecimalNo } from \"utils\";\nimport * as XLSX from \"xlsx\";\nimport { instanceWithRetry } from \"../../actions/axiosInstance\";\nimport Graphs from \"./graph\";\nimport { betweenDays } from \"utils/dates\";\nimport PaymentGraph from \"./paymentGraph\";\nimport AgingChart from \"./Agingchart\";\n\nlet GLOBAL_URL = \"\";\nlet DATES_CHANGED = false;\nexport const CustomersList = ({ props, history, changeSelection }) => {\n  const [rows, setrows] = useState([]);\n  const [showFilter, setshowFilter] = useState(false);\n  const [customerList, setCustomerList] = useState([]);\n  const [selectedCustomer, setselectedCustomer] = useState();\n  const [showexport, setshowexport] = useState(false);\n  const [iscustomerFetching, setIsCustomerFetching] = useState(false);\n  const [isFetching, setIsfetching] = useState(true);\n  const [loadCustomerListing, setLoadCustomerListing] = useState(false);\n  const [startDate, setstartDate] = useState(moment().subtract(365, \"days\").format(\"MM/DD/YYYY\"));\n  const [originalstartDate, setoriginalstartDate] = useState(moment().subtract(365, \"days\").format(\"MM/DD/YYYY\"));\n  const [endDate, setendDate] = useState(moment().add(365, \"days\").format(\"MM/DD/YYYY\"));\n  const [originalendDate, setoriginalendDate] = useState(moment().add(365, \"days\").format(\"MM/DD/YYYY\"));\n  const [is_dateupdated_here, setis_dateupdated_here] = useState(false);\n  const [interval, setinterval] = useState(30);\n  const [exportedData, setExportedData] = useState([]);\n  const [page, setpage] = useState(null);\n  const [per_page, setper_page] = useState(20);\n  const [sort_by, setsort_by] = useState(\"total_amount_due\");\n  const [sort_order, setsort_order] = useState(\"desc\");\n  const [id, setid] = useState(\"\");\n  const [exporting, setexporting] = useState(false);\n  const [showgraphs, setshowgraphs] = useState(false);\n  const [activeKey, setactiveKey] = useState(localStorage.getItem(\"customer_activeTab\"));\n  const Today = moment().format(\"MM/DD/YYYY\");\n  const Yesterday = moment().subtract(1, \"days\").format(\"MM/DD/YYYY\");\n  const csvRef = useRef(null);\n\n  const showTabs = activeKey && activeKey != \"null\";\n\n  useEffect(() => {\n    // set window at top\n    window.scrollTo(0, 0);\n    let filters = localStorage.getItem(\"customersFilters\");\n    if (filters) {\n      filters = filters\n        .split(\"&\")\n        .filter((x) => x)\n        .map((x) => x.split(\"=\"));\n      filters.forEach((filter) => {\n        filter[0] === \"per_page\" && setper_page(filter[1]);\n        filter[0] === \"sort_by\" && setsort_by(filter[1]);\n        filter[0] === \"sort_order\" && setsort_order(filter[1]);\n        filter[0] === \"id\" && setid(filter[1]);\n        filter[0] === \"from_date\" && setstartDate(filter[1]);\n        filter[0] === \"to_date\" && setendDate(filter[1]);\n        filter[0] === \"from_date\" && setoriginalstartDate(filter[1]);\n        filter[0] === \"to_date\" && setoriginalendDate(filter[1]);\n        filter[0] === \"page\" && setpage(filter[1]);\n      });\n    } else {\n      setpage(1);\n    }\n    return () => {\n      GLOBAL_URL = \"\";\n    };\n  }, []);\n\n  useEffect(() => {\n    if (showFilter || !page) {\n      return;\n    }\n    const _url = getURL();\n    getData(_url);\n    setshowgraphs(true);\n  }, [page, per_page, selectedCustomer, showFilter, sort_by, sort_order, id, startDate, endDate]);\n\n  function getURL(pagination = true) {\n    let URL = `&status=open${pagination && `&page=${page}&per_page=${per_page}`}`;\n    if (get(selectedCustomer, \"id\", id)) {\n      URL = URL + `&customer_id=${get(selectedCustomer, \"id\", id)}`;\n    } else {\n      startDate && (URL = URL + `&from_date=${startDate}`);\n      endDate && (URL = URL + `&to_date=${endDate}`);\n    }\n    if (sort_by) {\n      URL = URL + `&sort_by=${sort_by}&sort_order=${sort_order}`;\n    }\n    return URL;\n  }\n\n  useEffect(() => {\n    localStorage.setItem(\"customer_activeTab\", activeKey);\n    window.scrollTo(0, 0);\n  }, [activeKey]);\n\n  function getData(url) {\n    let URL = `arinvoice/grouped?${url}`; //`customer?page=${page}&per_page=${per_page}`;\n    if (GLOBAL_URL === URL) return;\n    GLOBAL_URL = URL;\n    setIsfetching(true);\n    setrows([]);\n    instanceWithRetry\n      .get(URL)\n      .then((response) => {\n        if (is_dateupdated_here) {\n          setoriginalendDate(null);\n          setoriginalstartDate(startDate);\n          setoriginalendDate(endDate);\n          setis_dateupdated_here(false);\n          localStorage.setItem(\n            \"customersFilters\",\n            url\n              .split(\"&\")\n              .filter((x) => x)\n              .map((x) => x.split(\"=\"))\n              .map((param) => ([\"from_date\"].includes(param[1]) ? [param[0], startDate] : param))\n              .map((param) => ([\"to_date\"].includes(param[1]) ? [param[0], endDate] : param))\n              .map((x) => x.join(\"=\"))\n              .join(\"&\")\n          );\n        }\n        let rows = get(response, \"data.result\", []).map((x) => ({\n          ...get(response, \"data.detail\", {}),\n          ...x,\n          amount_due: \"\",\n          amount_not_due: \"\",\n        }));\n        let updatedRows = [...rows];\n        let prev = betweenDays({ startdate: moment(startDate), enddate: moment(Yesterday) }) >= 0;\n        let aft = betweenDays({ startdate: moment(Today), enddate: moment(endDate) }) >= 0;\n\n        const getdue_dates = () => {\n          if (prev) {\n            return [startDate, aft ? Yesterday : endDate];\n          }\n          return [null, null];\n        };\n        const due_dates = getdue_dates();\n\n        const getnotdue_dates = () => {\n          if (aft) {\n            return [prev ? Today : startDate, endDate];\n          }\n          return [null, null];\n        };\n        const notdue_dates = getnotdue_dates();\n        let isdueupdated = !due_dates[0];\n        let isnotdueupdated = !notdue_dates[0];\n\n        function updateRows() {\n          if (isdueupdated && isnotdueupdated) {\n            setrows(updatedRows);\n            setIsfetching(false);\n          }\n        }\n\n        // amount due\n        due_dates[0] &&\n          Promise.all(\n            rows.map((x) =>\n              instanceWithRetry.get(\n                `arinvoice/grouped?status=open&customer_id=${x.customer_id}&from_date=${due_dates[0]}&to_date=${due_dates[1]}`\n              )\n            )\n          ).then((responses) => {\n            updatedRows = rows.map((x, i) => ({\n              ...x,\n              amount_due: get(responses, `[${i}].data.result[0].total_amount_due`, \"\"),\n            }));\n            isdueupdated = true;\n            updateRows();\n          });\n\n        // amount not due\n        notdue_dates[0] &&\n          Promise.all(\n            rows.map((x) =>\n              instanceWithRetry.get(\n                `arinvoice/grouped?status=open&customer_id=${x.customer_id}&from_date=${notdue_dates[0]}&to_date=${notdue_dates[1]}`\n              )\n            )\n          ).then((responses2) => {\n            updatedRows = updatedRows.map((x, i) => ({\n              ...x,\n              amount_not_due: get(responses2, `[${i}].data.result[0].total_amount_due`, \"\"),\n            }));\n            isnotdueupdated = true;\n            updateRows();\n          });\n      })\n      .catch((e) => handleAPIError(e));\n  }\n\n  const ExportXLSX = (csvData) => {\n    const filename = `customer${moment().format(\"MMMM Do YYYY-h:mm:ss-a\")}.xlsx`;\n    const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const ws = XLSX.utils.json_to_sheet(csvData);\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, filename);\n  };\n\n  function ExportCSV(data) {\n    if (!data.length) {\n      return [\n        {\n          Customer: \"\",\n          \"Amount not due\": \"\",\n          \"Amount due\": \"\",\n          \"Total balance\": \"\",\n          \"Avg days late\": \"\",\n          \"Weighted(avg) days late\": \"\",\n          \"Payment terms\": \"\",\n        },\n      ];\n    }\n    const csvData = data.map((element) => ({\n      Customer: get(element, \"name\", \"\"),\n      \"Amount not due\": convertDecimalNo(get(element, \"amount_not_due\", 0)),\n      \"Amount due\": convertDecimalNo(get(element, \"amount_due\", 0)),\n      \"Total balance\": convertDecimalNo(get(element, \"total_amount_due\", 0)),\n      \"Avg days late\": get(element, \"average_days_late\", \"\"),\n      \"Weighted(avg) days late\": get(element, \"weighted_avg_days_late\", \"\"),\n      \"Payment terms\": `Net ${get(element, \"terms\", \"\") || 0}`,\n    }));\n\n    return csvData;\n  }\n\n  const filterData = () => {\n    if (get(selectedCustomer, \"id\", id)) {\n      window.open(`${window.location.origin}/customers/${get(selectedCustomer, \"id\", id)}`, \"_self\");\n      return;\n    }\n    setpage(1);\n    setshowFilter(false);\n  };\n\n  function Increment() {\n    setIsfetching(true);\n    setpage((prevState) => Number(prevState) + 1);\n  }\n\n  function Decrement() {\n    if (page > 1) {\n      setIsfetching(true);\n      setpage((prevState) => Number(prevState) - 1);\n    }\n  }\n\n  const searchCustomer = (text) => {\n    if (text) {\n      setIsCustomerFetching(true);\n      instanceWithRetry\n        .get(`customer/search?name=${text}&per_page=100`)\n        .then((res) => {\n          setCustomerList(res.data.result);\n          setIsCustomerFetching(false);\n        })\n        .catch((e) => handleAPIError(e));\n    } else {\n      setselectedCustomer(null);\n    }\n  };\n\n  const exportAllData = (flag) => {\n    let URL = `arinvoice/grouped?${getURL(false)}&per_page=1000`;\n    setexporting(true);\n    instanceWithRetry\n      .get(URL)\n      .then((response) => {\n        let rows = get(response, \"data.result\", []).map((x) => ({\n          ...get(response, \"data.detail\", {}),\n          ...x,\n          amount_due: \"\",\n          amount_not_due: \"\",\n        }));\n        let updatedRows = [...rows];\n        let prev = betweenDays({ startdate: moment(startDate), enddate: moment(Yesterday) }) >= 0;\n        let aft = betweenDays({ startdate: moment(Today), enddate: moment(endDate) }) >= 0;\n\n        const getdue_dates = () => {\n          if (prev) {\n            return [startDate, aft ? Yesterday : endDate];\n          }\n          return [null, null];\n        };\n        const due_dates = getdue_dates();\n\n        const getnotdue_dates = () => {\n          if (aft) {\n            return [prev ? Today : startDate, endDate];\n          }\n          return [null, null];\n        };\n        const notdue_dates = getnotdue_dates();\n        let isdueupdated = !due_dates[0];\n        let isnotdueupdated = !notdue_dates[0];\n\n        function updateRows() {\n          if (isdueupdated && isnotdueupdated) {\n            setExportedData(updatedRows);\n            setexporting(false);\n            if (flag === true) {\n              csvRef.current.link.click();\n            } else {\n              setExportedData(updatedRows);\n              ExportXLSX(ExportCSV(updatedRows));\n            }\n          }\n        }\n\n        // amount due\n        due_dates[0] &&\n          Promise.all(\n            rows.map((x) =>\n              instanceWithRetry.get(\n                `arinvoice/grouped?status=open&customer_id=${x.customer_id}&from_date=${due_dates[0]}&to_date=${due_dates[1]}`\n              )\n            )\n          ).then((responses) => {\n            updatedRows = rows.map((x, i) => ({\n              ...x,\n              amount_due: get(responses, `[${i}].data.result[0].total_amount_due`, \"\"),\n            }));\n            isdueupdated = true;\n            updateRows();\n          });\n\n        // amount not due\n        notdue_dates[0] &&\n          Promise.all(\n            rows.map((x) =>\n              instanceWithRetry.get(\n                `arinvoice/grouped?status=open&customer_id=${x.customer_id}&from_date=${notdue_dates[0]}&to_date=${notdue_dates[1]}`\n              )\n            )\n          ).then((responses2) => {\n            updatedRows = updatedRows.map((x, i) => ({\n              ...x,\n              amount_not_due: get(responses2, `[${i}].data.result[0].total_amount_due`, \"\"),\n            }));\n            isnotdueupdated = true;\n            updateRows();\n          });\n      })\n      .catch((e) => handleAPIError(e));\n  };\n\n  const resetFilter = () => {\n    setshowFilter(false);\n    setselectedCustomer(null);\n    setid(\"\");\n    setpage(1);\n    setsort_by(\"total_amount_due\");\n    setsort_order(\"desc\");\n    setis_dateupdated_here(true);\n    setoriginalendDate(null);\n    setoriginalstartDate(moment().subtract(365, \"days\").format(\"MM/DD/YYYY\"));\n    setoriginalendDate(moment().add(365, \"days\").format(\"MM/DD/YYYY\"));\n    setstartDate(moment().subtract(365, \"days\").format(\"MM/DD/YYYY\"));\n    setendDate(moment().add(365, \"days\").format(\"MM/DD/YYYY\"));\n    setinterval(30);\n  };\n\n  const setAPISort = (sort_by_key) => {\n    setsort_by(sort_by_key);\n    setsort_order(sort_by_key === sort_by && sort_order === \"asc\" ? \"desc\" : \"asc\");\n    setpage(1);\n    setrows([]);\n  };\n\n  const debounceMethod = useRef(debounce((text) => searchCustomer(text), 500)).current;\n\n  const columns = [\n    {\n      accessor: \"name\",\n      Header: () => (\n        <span>\n          Customer\n          <span className=\"sort-icons\">\n            <i className=\"fas fa-caret-up\"></i>\n            <i className=\"fas fa-caret-down\"></i>\n          </span>\n        </span>\n      ),\n      Cell: (props) => (\n        <span\n          onClick={(e) => {\n            e.stopPropagation();\n          }}\n        >\n          <Link to={`customers/${props.original.customer_id}`}>\n            <span className=\"ml-3\">{props.value}</span>\n          </Link>\n        </span>\n      ),\n    },\n    {\n      Header: () => (\n        <div className=\"text-right\">\n          Amount not due\n          <span className=\"sort-icons\">\n            <i className=\"fas fa-caret-up\"></i>\n            <i className=\"fas fa-caret-down\"></i>\n          </span>\n        </div>\n      ),\n      accessor: \"amount_not_due\",\n      className: \"text-right pr-2\",\n      Cell: (props) => (\n        <span className=\"text-right\">\n          <span className=\"ml-3\">{getFAWC(props.value)}</span>\n        </span>\n      ),\n    },\n    {\n      Header: () => (\n        <div className=\"text-right\">\n          Amount due\n          <span className=\"sort-icons\">\n            <i className=\"fas fa-caret-up\"></i>\n            <i className=\"fas fa-caret-down\"></i>\n          </span>\n        </div>\n      ),\n      accessor: \"amount_due\",\n      className: \"text-right pr-2\",\n      Cell: (props) => (\n        <span className=\"text-right\">\n          <span className=\"ml-3\">{getFAWC(props.value)}</span>\n        </span>\n      ),\n    },\n    {\n      Header: () => (\n        <div\n          className=\"text-right\"\n          onClick={() => {\n            setAPISort(\"total_amount_due\");\n          }}\n        >\n          Total balance\n          <span className=\"sort-icons\">\n            <i className=\"fas fa-caret-up\"></i>\n            <i className=\"fas fa-caret-down\"></i>\n          </span>\n        </div>\n      ),\n      accessor: \"total_amount_due\",\n      className: \"text-right pr-2\",\n      Cell: (props) => (\n        <span className=\"text-right\">\n          <span className=\"ml-3\">{getFAWC(props.value)}</span>\n        </span>\n      ),\n    },\n    {\n      Header: () => (\n        <div\n          className=\"text-right\"\n          onClick={() => {\n            setAPISort(\"average_days_late\");\n          }}\n        >\n          Avg days late\n          <span className=\"sort-icons\">\n            <i className=\"fas fa-caret-up\"></i>\n            <i className=\"fas fa-caret-down\"></i>\n          </span>\n        </div>\n      ),\n      accessor: \"average_days_late\",\n      className: \"text-right pr-2\",\n      Cell: (props) => (\n        <span className=\"text-right\">\n          <span className=\"ml-3\">{getShortNumber(props.value, false)}</span>\n        </span>\n      ),\n    },\n    {\n      Header: () => (\n        <div\n          className=\"text-center\"\n          onClick={() => {\n            setAPISort(\"weighted_avg_days_late\");\n          }}\n        >\n          Weighted(avg) days late\n          <span className=\"sort-icons\">\n            <i className=\"fas fa-caret-up\"></i>\n            <i className=\"fas fa-caret-down\"></i>\n          </span>\n        </div>\n      ),\n      accessor: \"weighted_avg_days_late\",\n      className: \"text-center\",\n      Cell: (props) => (\n        <span className=\"text-right\">\n          <span className=\"ml-3\">{getShortNumber(props.value, false)}</span>\n        </span>\n      ),\n    },\n    {\n      Header: () => (\n        <div className=\"text-center\">\n          Payment terms\n          <span className=\"sort-icons\">\n            <i className=\"fas fa-caret-up\"></i>\n            <i className=\"fas fa-caret-down\"></i>\n          </span>\n        </div>\n      ),\n      accessor: \"terms\",\n      className: \"text-center\",\n      Cell: (props) => (\n        <span>\n          <span className=\"ml-3\">{`Net ${getShortNumber(props.value, false) || 0}`}</span>\n        </span>\n      ),\n    },\n  ];\n\n  const graphProps = {\n    ...props,\n    loadCustomerList: setLoadCustomerListing,\n    originalstartDate: originalstartDate,\n    originalendDate: originalendDate,\n    setstartDate: setstartDate,\n    setendDate: setendDate,\n    setpage: setpage,\n    resetFilter: resetFilter,\n    showgraphs: showgraphs,\n  };\n\n  return (\n    <div className=\"row px-15 \" id=\"dashboardBody\">\n      <div className=\"col-md-12\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <div className={!showTabs ? \"d-none\" : \"\"}>\n                  <span\n                    onClick={() => {\n                      setactiveKey(\"\");\n                    }}\n                    className=\"pull-left pt-2 pr-3\"\n                    title=\"Back\"\n                  >\n                    <i\n                      className=\"fa fa-arrow-left\"\n                      style={{ color: \"#ddd\", marginRight: \"5px\", ariaHidden: true, cursor: \"pointer\" }}\n                    ></i>\n                  </span>\n                  <Tabs id=\"graphs\" activeKey={activeKey} onSelect={(k) => setactiveKey(k)}>\n                    <Tab eventKey=\"payment\" title=\"Total AR\">\n                      <div\n                        className=\"w-50 text-center\"\n                        style={{ minWidth: \"310px\", height: 380, margin: \"0px auto\" }}\n                      >\n                        <PaymentGraph fullsize {...graphProps} />\n                      </div>\n                    </Tab>\n                    <Tab eventKey=\"araging\" title=\"AR aging\">\n                      <div\n                        className=\"w-50 text-center\"\n                        style={{ minWidth: \"310px\", height: 380, margin: \"0px auto\" }}\n                      >\n                        <AgingChart fullsize {...graphProps} />\n                      </div>\n                    </Tab>\n                  </Tabs>\n                </div>\n                <div className={showTabs ? \"d-none\" : \"\"}>\n                  <Graphs {...graphProps} setactiveKey={setactiveKey} />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"row mb-4\">\n              <div className=\"col-md-6\">\n                <div className=\"dropdown\" style={{ margin: \"0px\" }}>\n                  <span\n                    className=\"btn dropdown-toggle btn-primary\"\n                    data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"false\"\n                    onClick={() => setshowFilter(true)}\n                  >\n                    <i className=\"fa fa-sliders\" aria-hidden=\"true\"></i>&nbsp; Filter\n                  </span>\n                  {showFilter && (\n                    <ClickAwayListener\n                      onClickAway={() => {\n                        if (DATES_CHANGED) {\n                          setstartDate(originalstartDate);\n                          setendDate(originalendDate);\n                        }\n                        setshowFilter(false);\n                        DATES_CHANGED = false;\n                      }}\n                    >\n                      <div\n                        id=\"outerside\"\n                        className={`dropdown-menu filterdroplist p-2 ${showFilter && \"show\"}`}\n                        aria-labelledby=\"dropdownMenuLink\"\n                      >\n                        <div className=\"row\">\n                          <div className=\"col-md-6\">\n                            <div className=\"form-group\">\n                              <div>\n                                <label className=\"\">Customer Name</label>\n                                <Autocomplete\n                                  suggestions={uniqBy(\n                                    customerList.map((s) => ({ id: s.id, name: s.name })),\n                                    \"id\"\n                                  )}\n                                  getSelected={(item) => setselectedCustomer(item)}\n                                  search={(text) => debounceMethod(text, \"customer\")}\n                                  isLoading={iscustomerFetching}\n                                  defaultValue={selectedCustomer && selectedCustomer.name}\n                                />\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col-md-6\">\n                            <div className=\"form-group\">\n                              <label>Due date</label>\n                              <div className=\"single-date-picker\" style={{ fontSize: 12, overflow: \"hidden\" }}>\n                                <DateRangePicker\n                                  startDate={moment(startDate)}\n                                  endDate={moment(endDate)}\n                                  getSelectedDates={(startDate, endDate, interval) => {\n                                    setstartDate(moment(startDate).format(\"MM/DD/YYYY\"));\n                                    setendDate(moment(endDate).format(\"MM/DD/YYYY\"));\n                                    setis_dateupdated_here(true);\n                                    setinterval(interval);\n                                    DATES_CHANGED = true;\n                                  }}\n                                  parentEl=\"#outerside\"\n                                />\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"col-md-6\" />\n                          <div className=\"col-md-6\">\n                            <div className=\"setbtn\">\n                              <button type=\"reset\" className=\"btn resetbtn btn-light\" onClick={resetFilter}>\n                                Reset\n                              </button>\n                              <button type=\"submit\" className=\"btn applybtn btn-primary\" onClick={filterData}>\n                                Submit\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </ClickAwayListener>\n                  )}\n                </div>\n              </div>\n              <div className=\"col-md-6\" style={{ textAlign: \"right\" }}>\n                <div className=\"dropdown\">\n                  <span\n                    className=\"btn dropdown-toggle btn-primary\"\n                    role=\"button\"\n                    id=\"\"\n                    data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"false\"\n                    onClick={() => setshowexport(true)}\n                  >\n                    Export {exporting && <i className=\"fa fa-spinner fa-spin\" />}\n                  </span>\n                  <ClickAwayListener onClickAway={setshowexport}>\n                    <div\n                      className={`dropdown-menu dropdown-menu-right payexpdroplist ${showexport && \"show\"}`}\n                      aria-labelledby=\"dropdownMenuLink\"\n                      id=\"\"\n                    >\n                      <CSVLink\n                        data={ExportCSV(exportedData)}\n                        ref={csvRef}\n                        filename={`customers_${moment().format(\"MMMM Do YYYY-h:mm:ss-a\")}.csv`}\n                        style={{ display: \"none\" }}\n                      />\n                      <span\n                        style={{\n                          fontSize: 12,\n                          display: \"block\",\n                          textAlign: \"right\",\n                          marginRight: \"10px\",\n                          marginBottom: \"10px\",\n                          cursor: \"pointer\",\n                        }}\n                        onClick={() => exportAllData(true)}\n                      >\n                        Export CSV\n                      </span>\n                      <span\n                        style={{\n                          fontSize: 12,\n                          display: \"block\",\n                          textAlign: \"right\",\n                          marginRight: \"10px\",\n                          cursor: \"pointer\",\n                        }}\n                        onClick={exportAllData}\n                      >\n                        Export Excel\n                      </span>\n                    </div>\n                  </ClickAwayListener>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <ReactTable\n                  noDataText={isFetching ? \"\" : \"No data found\"}\n                  minRows={rows.length || 1}\n                  loading={isFetching}\n                  sortable={true}\n                  resizable={true}\n                  showPagination={false}\n                  columns={columns}\n                  data={rows}\n                  defaultSorted={[\n                    {\n                      id: sort_by,\n                      desc: sort_order === \"desc\",\n                    },\n                  ]}\n                  getTrProps={(state, rowInfo, column) => {\n                    return {\n                      onClick: (e) => changeSelection(rowInfo.original),\n                    };\n                  }}\n                />\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <div className=\"filterthree\">\n                <div className=\"pull-right\">\n                  <button\n                    className=\"btn btn-primary mr-2 width-94px\"\n                    disabled={page === 1 || !page}\n                    onClick={Decrement}\n                  >\n                    Previous\n                  </button>\n                  <button\n                    className=\"btn btn-primary width-94px\"\n                    disabled={rows && rows.length !== 20}\n                    onClick={Increment}\n                  >\n                    Next\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomersList);\n","import \"assets/css/payables.css\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport Payments from \"containers/payments\";\nimport CustomerDetails from \"./customerDetails\";\nimport CustomersList from \"./customersList\";\n\nfunction Customers(props) {\n  document.title = \"Customers - Payference\";\n\n  const { history, match } = props;\n  const [selectedpayment, setselectedpayment] = useState(null);\n\n  function changeSelection(data) {\n    setselectedpayment(data);\n    history.push(`customers/${data.customer_id}`);\n  }\n\n  return (\n    <Switch>\n      <Route exact path=\"/customers/payments\" component={() => <Payments {...props} />} />\n      <Route\n        path={`/customers/:id`}\n        component={() => <CustomerDetails {...props} selectedpayment={selectedpayment} />}\n      />\n      <Route path={`${match.path}`} component={() => <CustomersList {...props} changeSelection={changeSelection} />} />\n    </Switch>\n  );\n}\n\nconst mapStateToProps = state => ({ login: state.payables });\n\nconst mapDispatchToProps = {};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Customers));\n"],"sourceRoot":""}