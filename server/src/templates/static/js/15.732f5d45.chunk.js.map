{"version":3,"sources":["components/Spinner.js","components/Recharts/XAxisTick.js","components/Recharts/CustomTooltip.js","components/DateRangePicker.js","../node_modules/lodash/uniq.js","components/paywidget.js","containers/dashboard/actions.js","containers/dashboard/ArVsApGraph.js","containers/dashboard/BankBalanceGraph.js","containers/dashboard/LiquidityChart.js","containers/dashboard/graphs.js","containers/dashboard/paylist.js","containers/dashboard/dashboard.js"],"names":["CustomSpinner","isfullscreen","className","animation","role","XAxisTick","value","payload","rest","verticalAnchor","visibleTicksCount","style","fontSize","dy","CustomToolTip","props","active","label","noCurrencyKeys","map","item","i","hideCurrency","find","x","dataKey","key","color","name","getShortNumber","CustomDateRangePicker","updateDates","startDate","endDate","setState","moment","text","format","getDates","chosenLabel","getSelectedDates","state","add","showDatePicker","this","nextProps","isEqual","ranges","Today","subtract","parentEl","labelFormat","id","width","showDropdowns","linkedCalendars","onApply","e","picker","onBlur","background","cursor","padding","border","onClick","setTimeout","document","getElementById","click","Component","baseUniq","require","module","exports","array","length","PayWidget","status","total_amount_due","invoice_amount","recommendation","supplier","customer","currency","insights","expected_date","type","date_closed","redirectURL","window","location","origin","get","classNames","cx","open","title","getFormattedDate","setData","data","isFetching","noData","CustomChart","height","margin","top","bottom","right","left","stackOffset","tick","scale","tickFormatter","domain","content","wrapperStyle","paddingLeft","stackId","barSize","fill","stroke","dot","position","React","PureComponent","getTime","date","toDate","connect","useState","apiData","setapiData","selectedtab","setselectedtab","arData","setarData","apData","setapData","setIsFetching","useEffect","datekey","minDate","maxDate","noOfDays","dates","unit","push","arvalues","apvalues","forEach","mindatetemp","maxdatetemp","allardataforthisdate","filter","due_date","aramountforthisdate","allapdataforthisdate","apamountforthisdate","arVsAp","DATA","val","ar","ap","arvsap","Promise","all","instance","encodeURI","then","response","catch","handleAPIError","data-id","lines","tooltipActive","LinesComp","line","COLORS","onMouseEnter","onMouseLeave","minTickGap","tickCount","cursour","max","selectedaccounts","setlines","bankbalancegraphData","setbankbalancegraphData","setbankbalanceData","setstartDate","fromDate","URL","minValue","maxValue","result","y","bank_account_id","due_dates","uniq","sort","dt","NaN","series","getObject","lineLabel","bankid","values","alldataforthisdate","amountforthisdate","amount","allobjectkeys","acc","obj","j","thislinedata","getGraphData","marginLeft","marginTop","interval","LiquidityChart","setar","setap","allbankbalance","setallbankbalance","str_ts","str","yesterday","new_from_date","ts_str","ts","resp","firstbankbalancedate","isNaN","initbalance","count","xmindate","balance","allbankbalancedatesinnumbers","reverse","console","log","valuesEstimated","bankamountforthisdate","valueslen","due","payIQ","Graphs","showAllAccountsMenu","setshowAllAccountsMenu","showExportMenu","setshowExportMenu","allaccounts","setallaccounts","setselectedaccounts","expand","href","data-toggle","aria-haspopup","aria-expanded","ClickAwayListener","onClickAway","maxHeight","overflowY","aria-labelledby","checked","isselected","datatemp","uniqBy","exportCsv","exportExcel","DateRangePicker","history","Paylist","getPayableData","getReceivableData","payablesData","receivablesData","handleExpand","startLabelDate","setStartLabelDate","setselectedTab","nextPreviousDate","action","sd","changeSelction","rows","Fragment","OverlayTrigger","placement","overlay","Tooltip","aria-hidden","element","range","getCalculatedDates","defaultRange","fe_config","MODE","localStorage","getItem","Dashboard","storageChange","event","newValue","updatedState","toggleExpandCollapse","toggleExpand","ExportXLSX","filename","wb","Sheets","Payables","XLSX","json_to_sheet","ExportCSV","Receivables","SheetNames","excelBuffer","bookType","Blob","FileSaver","Supplier","InvoiceNo","DueDate","Recommendation","InvoiceDate","AmountDue","convertDecimalNo","CustomerName","Status","ed","setItem","bind","body","classList","scrollTo","addEventListener","remove","removeEventListener","mapDispatchToProps","dispatch","dashboard"],"mappings":"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","file":"static/js/15.732f5d45.chunk.js","sourcesContent":["import React from \"react\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nexport const CustomSpinner = ({ isfullscreen }) => {\n  return (\n    <div className={`card-body w-100 text-center pt-5 mt-5 ${isfullscreen && \"vh-100\"}`}>\n      <Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    </div>\n  );\n};\n\nexport default CustomSpinner;\n","import React from 'react';\n\nconst XAxisTick = ({ payload: { value }, verticalAnchor, visibleTicksCount, ...rest }) => (\n  <text {...rest} style={{ fontSize: \"0.8rem\" }} className=\"bar-chart-tick\" dy={12}>\n    {value}\n  </text>\n);\n\nexport default XAxisTick;\n","import React from \"react\";\nimport { getShortNumber } from \"utils\";\n\nconst CustomToolTip = props => {\n  const { active, payload, label, noCurrencyKeys = [] } = props;\n  if (!active || !payload) {\n    return null;\n  }\n  return (\n    <div className=\"custom-tooltip bg-white border p-3\">\n      <p>\n        <strong>{label}</strong>\n      </p>\n      {payload.map((item, i) => {\n        const hideCurrency = noCurrencyKeys.find(x => x === item.dataKey);\n        return (\n          <span key={i} className=\"d-block mb-1\">\n            <span style={{ color: item.color }}>{item.name}: </span>\n            <span>{typeof item.value === \"number\" ? getShortNumber(item.value, !hideCurrency) : item.value}</span>\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CustomToolTip;\n","import React, { Component } from \"react\";\nimport get from \"lodash/get\";\nimport isEqual from \"lodash/isEqual\";\nimport moment from \"moment\";\nimport DateRangePicker from \"react-bootstrap-daterangepicker\";\nimport \"bootstrap-daterangepicker/daterangepicker.css\";\nconst defaultLabel = \"MMM DD, YYYY\";\n\n// http://www.daterangepicker.com/ , https://www.npmjs.com/package/react-bootstrap-daterangepicker\nclass CustomDateRangePicker extends Component {\n  constructor(props) {\n    super(props);\n    let startDate = moment();\n    let endDate = moment().add(30, \"days\");\n    this.state = {\n      endDate,\n      startDate,\n      text: \"\",\n      showDatePicker: false,\n    };\n  }\n\n  componentDidMount() {\n    const { startDate, endDate } = this.props;\n    this.updateDates(startDate, endDate);\n  }\n\n  updateDates = (startDate, endDate) => {\n    this.setState({\n      startDate: moment(startDate),\n      endDate: moment(endDate),\n      text: `${moment(startDate).format(defaultLabel)} - ${moment(endDate).format(defaultLabel)}`,\n    });\n  };\n\n  componentWillReceiveProps(nextProps) {\n    const { startDate, endDate } = nextProps;\n    if (!isEqual(nextProps, this.props)) {\n      this.updateDates(startDate, endDate);\n    }\n  }\n\n  getDates = ({ startDate, endDate, chosenLabel }) => {\n    this.setState(\n      {\n        startDate,\n        endDate,\n        text: `${moment(startDate).format(defaultLabel)} - ${moment(endDate).format(defaultLabel)}`,\n      },\n      () => this.props.getSelectedDates(this.state.startDate, this.state.endDate, chosenLabel)\n    );\n  };\n\n  render() {\n    const ranges = {\n      Today: [moment(), moment()],\n      \"Next 7 Days\": [moment(), moment().add(7, \"days\")],\n      \"Next 30 Days\": [moment(), moment().add(30, \"days\")],\n      \"Past 7 Days\": [moment().subtract(7, \"days\"), moment()],\n      \"Past 30 Days\": [moment().subtract(30, \"days\"), moment()],\n      \"Past 90 Days\": [moment().subtract(90, \"days\"), moment()],\n      \"Past 365 Days\": [moment().subtract(365, \"days\"), moment()],\n    };\n    const { startDate, endDate, text, showDatePicker } = this.state;\n\n    const { parentEl, labelFormat } = this.props;\n\n    // const selectedDates = `${moment(startDate).format(labelFormat || defaultLabel)} - ${moment(endDate).format(\n    //   labelFormat || defaultLabel\n    // )}`;\n    return (\n      <div id=\"datepicker-wrap\">\n        {showDatePicker ? (\n          <DateRangePicker\n            parentEl={parentEl}\n            startDate={startDate}\n            endDate={endDate}\n            ranges={ranges}\n            width=\"100\"\n            showDropdowns\n            // alwaysShowCalendars\n            // autoUpdateInput\n            // autoApply\n            // singleDatePicker\n            // show={showDatePicker}\n            linkedCalendars={false}\n            format={defaultLabel}\n            onApply={(e, picker) => {\n              this.setState({ text: \"\" }, () => this.getDates(picker));\n            }}\n            onBlur={() => this.setState({ showDatePicker: false })}\n          >\n            <div\n              id=\"wrap-date\"\n              className=\"rounded\"\n              style={{\n                background: \"#fff\",\n                cursor: \"pointer\",\n                padding: \"8px 10px\",\n                border: \"1px solid #ccc\",\n              }}\n            >\n              <i id=\"fa-calender-real\" className=\"fa fa-calendar real\"></i>&nbsp;\n              <span>{text}</span>\n              {/*\n              // editable datepicker, work in progress\n              {text && (\n                <input\n                  type=\"text\"\n                  placeholder=\"mm/dd/yyyy - mm/dd/yyyy\"\n                  className=\"daterangeinput\"\n                  name=\"daterange\"\n                  value={text}\n                  onChange={e => this.setState({ text: get(e, \"target.value\", \"\"), showDatePicker: true })}\n                  onBlur={e => {\n                    const value = get(e, \"target.value\", \"\").split(\"-\");\n                    let _start =\n                      get(value, \"[0]\", \"\").trim().length === 10 &&\n                      moment(get(value, \"[0]\", \"\"), \"MM/DD/YYYY\").isValid();\n                    let _end =\n                      get(value, \"[1]\", \"\").trim().length === 10 &&\n                      moment(get(value, \"[1]\", \"\"), \"MM/DD/YYYY\").isValid();\n                    if (_start && _end) {\n                      this.getDates({\n                        startDate: moment(value[0], \"MM/DD/YYYY\"),\n                        endDate: moment(value[1], \"MM/DD/YYYY\")\n                      });\n                      return;\n                    }\n                    this.setState({ text: \"\" }, () => this.getDates({ startDate, endDate }));\n                  }}\n                />\n              )} */}\n            </div>\n          </DateRangePicker>\n        ) : (\n          <div\n            id=\"reportrange_view\"\n            className=\"rounded\"\n            style={{\n              background: \"#fff\",\n              cursor: \"pointer\",\n              padding: \"8px 10px\",\n              border: \"1px solid #ccc\",\n            }}\n            onClick={() => {\n              this.setState({ showDatePicker: true }, () => {\n                setTimeout(() => {\n                  document.getElementById(\"fa-calender-real\").click();\n                }, 100);\n              });\n            }}\n          >\n            <i className=\"fa fa-calendar\"></i>&nbsp;\n            <span>{text}</span>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CustomDateRangePicker;\n","var baseUniq = require('./_baseUniq');\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nmodule.exports = uniq;\n","import get from \"lodash/get\";\nimport React from \"react\";\nimport cx from 'classnames';\n// import CONST from \"./../constants\";\nimport { getFormattedDate } from \"utils/dates\";\nimport { getShortNumber } from \"utils\";\n\n\nexport const PayWidget = ({ status= '', total_amount_due = 0, invoice_amount = 0, recommendation = \"\", supplier, customer, currency = \"USD\", insights = \"\", expected_date = \"\", type = \"\", date_closed }) => {\n  const redirectURL = status === 'all' ? `${window.location.origin}/${type}/${type === 'customers' ? get(customer, \"id\", \"\") : get(supplier, \"id\", \"\")}#reports` : '';\n  const classNames = cx('card', { 'critical': insights === \"PAY_IMMEDIATELY\" }, { 'average': insights === \"INVALID_DUE_DATE\" }, {'cursor-pointer': status === 'all' });\n  return (\n    <div\n      className={classNames}\n      onClick={() => status === 'all' ? window.open(redirectURL,\"_blank\") : {}}\n    >\n      <p className=\"mData\">\n        <span className=\"company_name\" title={get(supplier, \"name\", \"\") || get(customer, \"name\", \"\")}>{get(supplier, \"name\", \"\") || get(customer, \"name\", \"\")}</span>\n        <span className=\"pull-right\">{!status ? getShortNumber(total_amount_due) : getShortNumber(invoice_amount)}</span>\n      </p>\n      <p className=\"smData\">{insights === \"PAY_IMMEDIATELY\" ? \"Pay Immediately\" : getFormattedDate(date_closed || recommendation || expected_date)}</p>\n    </div>\n  );\n};\n\nexport default PayWidget;\n","import { instance } from \"../../actions/axiosInstance\";\nimport { handleAPIError } from 'handlers/setters';\n\nconst setData = (type, data, isFetching) => ({\n    type,\n    payload: {\n        data\n    },\n    isFetching,\n});\n\nexport const getPayableData = (startDate, endDate) => dispatch => {\n    const actionType = 'SET_PAYABLE_DATA';\n    const URL = `upcomingpayment?from_date=${startDate}&to_date=${endDate}&status=open&date_type=all`;\n    dispatch(setData(actionType, [], true));\n    return instance\n        .get(URL)\n        .then(response => {\n            if(response && response.data) {\n                dispatch(setData(actionType, response.data.result, false));\n            }\n        })\n        .catch(e => handleAPIError(e));\n}\n\nexport const getReceivableData = (startDate, endDate) => dispatch => {\n    const actionType = 'SET_RECEIVABLE_DATA';\n    const URL = `upcomingreceipt?from_date=${startDate}&to_date=${endDate}&status=open&date_type=all`;\n    dispatch(setData(actionType, [], true));\n    return instance\n        .get(URL)\n        .then(response => {\n            if (response && response.data) {\n                dispatch(setData(actionType, response.data.result, false));\n            }\n        })\n       .catch(e => handleAPIError(e));\n}\n","import XAxisTick from \"components/Recharts/XAxisTick\";\nimport CustomToolTip from \"components/Recharts/CustomTooltip\";\nimport CustomSpinner from \"components/Spinner\";\nimport { handleAPIError } from \"handlers/setters\";\nimport get from \"lodash/get\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Bar, ComposedChart, BarChart, Legend, Line, LabelList, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\nimport { getShortNumber } from \"utils\";\nimport TokenManager from \"utils/TokenManager\";\nimport { instance } from \"../../actions/axiosInstance\";\n\nconst noData = [{\n  name: 'No Data',\n  value: '300'\n}]\nclass CustomChart extends React.PureComponent {\n  render() {\n    const { data } = this.props;\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        {\n          (!data || !data.length) ?\n          <BarChart width={600} height={300} data={noData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <Bar dataKey=\"value\" fill=\"#fff\">\n              <LabelList dataKey=\"name\" position=\"inside\" />\n            </Bar>\n          </BarChart>\n        :\n          <ComposedChart\n            width={720}\n            height={440}\n            data={data}\n            margin={{\n              top: 8,\n              bottom: 8,\n              right: 8,\n              left: 8\n            }}\n            stackOffset=\"sign\"\n          >\n            <XAxis tick={<XAxisTick />}scale=\"point\" dataKey=\"date\" name=\"Date\" padding={{ left: 60, right: 60 }} />\n            <YAxis tickFormatter={tick => getShortNumber(tick)} domain={[\"auto\", \"auto\"]} />\n            <Tooltip cursor={false} content={<CustomToolTip />} />\n            <Legend\n              wrapperStyle={{\n                paddingLeft: 50\n              }}\n            />\n            <Bar dataKey=\"ar\" name=\"AR\" stackId=\"a\" barSize={100} fill=\"#7ACB36\" />\n            <Bar dataKey=\"ap\" name=\"AP\" stackId=\"a\" barSize={100} fill=\"#ED3833\" />\n            <Line type=\"monotone\" dataKey=\"arvsap\" name=\"(AR - AP)\" stackId=\"b\" stroke=\"#434348\" dot={true} />\n          </ComposedChart>\n        }\n      </ResponsiveContainer>\n    );\n  }\n}\n\nconst getTime = date =>\n  moment(date, \"YYYY-MM-DD\")\n    .toDate()\n    .getTime();\n\nfunction ArVsApGraph(props) {\n  const [apiData, setapiData] = useState(null);\n  const [selectedtab, setselectedtab] = useState(\"due\");\n  const [arData, setarData] = useState(null);\n  const [apData, setapData] = useState(null);\n  const [isFetching, setIsFetching] = useState(true);\n  const { startDate, endDate } = props;\n\n  useEffect(() => {\n    if (!arData || !apData || (!arData[0] && !apData[0]) || !startDate || !endDate) return;\n\n    const datekey = selectedtab === \"recommendation\" ? \"recommendation\" : \"due_date\";\n\n    const minDate = moment(startDate, \"MM/DD/YYYY\")\n      .toDate()\n      .getTime();\n    const maxDate = moment(endDate, \"MM/DD/YYYY\")\n      .toDate()\n      .getTime();\n    const noOfDays = (maxDate - minDate) / 86400000;\n    let dates = [];\n    if (noOfDays === 0) {\n      dates = [minDate];\n    } else if (noOfDays === 1) {\n      dates = [minDate, maxDate];\n    } else if (noOfDays === 2) {\n      dates = [minDate, minDate + 86400000, maxDate];\n    } else if (noOfDays === 3) {\n      dates = [minDate, minDate + 86400000, minDate + 86400000 * 2, maxDate];\n    } else {\n      const days = 4;\n      const unit = (maxDate - minDate) / days;\n      let i = 1;\n      while (i <= days) {\n        dates.push(minDate + unit * i);\n        i += 1;\n      }\n    }\n\n    const xLabels = dates.map(x => moment(x).format(\"MM/DD/YY\"));\n\n    const arvalues = [];\n    const apvalues = [];\n\n    dates.forEach((date, i) => {\n      const mindatetemp = get(dates, `[${i - 1}]`, \"\") || minDate - 86400000;\n      const maxdatetemp = get(dates, `[${i}]`, \"\") || maxDate;\n      const allardataforthisdate = arData.filter(\n        x => mindatetemp < getTime(x.due_date) && getTime(x.due_date) <= maxdatetemp\n      );\n\n      let aramountforthisdate = 0;\n      allardataforthisdate.forEach(x => {\n        aramountforthisdate = aramountforthisdate + x.total_amount_due;\n      });\n      arvalues.push(aramountforthisdate);\n\n      const allapdataforthisdate = apData.filter(\n        x => mindatetemp < getTime(x[datekey]) && getTime(x[datekey]) <= maxdatetemp\n      );\n      let apamountforthisdate = 0;\n      allapdataforthisdate.forEach(x => {\n        apamountforthisdate = apamountforthisdate + x.total_amount_due;\n      });\n      apvalues.push(apamountforthisdate);\n    });\n\n    const arVsAp = arvalues.map((x, i) => x - apvalues[i]);\n\n    const DATA = dates.map((val, i) => ({\n      date: moment(val).format(\"MM/DD\"),\n      ar: arvalues[i],\n      ap: - apvalues[i],\n      arvsap: arVsAp[i]\n    }));\n\n    setapiData(DATA);\n  }, [arData, apData, startDate, endDate, selectedtab]);\n\n  useEffect(() => {\n    if (!startDate || !endDate || !selectedtab) return;\n    setIsFetching(true);\n    Promise.all([\n      instance\n        .get(\n          encodeURI(\n            `arinvoice?per_page=3000&from_date='${startDate}'&to_date='${endDate}'&status=open&date_type=${selectedtab}`\n          )\n        ),\n      instance\n        .get(\n          encodeURI(\n            `apinvoice?per_page=3000&from_date='${startDate}'&to_date='${endDate}'&status=open&date_type=${selectedtab}`\n          )\n        )\n    ]).then(response => {\n      setIsFetching(false);\n      setarData(get(response[0], \"data.result\", []));\n      setapData(get(response[1], \"data.result\", []));\n    })\n    .catch(e => handleAPIError(e));\n  }, [startDate, endDate, selectedtab]);\n\n  return (\n    <div className=\"mt-5\">\n      <h1 className=\"h2 tb-border\">AR vs AP</h1>\n\n      <ul id=\"sideTabBar\" className=\"nav nav-tabs\">\n        <li\n          onClick={() => {\n            if (selectedtab === \"due\") return;\n            setarData(null);\n            setapData(null);\n            setapiData(null);\n            setselectedtab(\"due\");\n          }}\n          className={`cursour-pointer ${selectedtab === \"due\" && \"active\"}`}\n          id=\"paya\"\n          data-id=\"pListing\"\n        >\n          <span>Due Date</span>\n        </li>\n        <li\n          onClick={() => {\n            if (selectedtab === \"recommendation\") return;\n            setarData(null);\n            setapData(null);\n            setapiData(null);\n            setselectedtab(\"recommendation\");\n          }}\n          className={`cursour-pointer ${selectedtab === \"recommendation\" && \"active\"}`}\n          id=\"rece\"\n          data-id=\"rListing\"\n        >\n          <span>PayIQ</span>\n        </li>\n      </ul>\n      <div className=\"w-100\">\n        {!isFetching ? (\n          <CustomChart data={apiData} />\n        ) : (\n          <div style={{ width: \"100%\", height: 440 }}>\n            <CustomSpinner />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ArVsApGraph);\n","import XAxisTick from \"components/Recharts/XAxisTick\";\nimport CustomToolTip from \"components/Recharts/CustomTooltip\";\nimport { handleAPIError } from \"handlers/setters\";\nimport get from \"lodash/get\";\nimport uniq from \"lodash/uniq\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\nimport { getShortNumber } from \"utils\";\nimport { instance } from \"../../actions/axiosInstance\";\n\nclass CustomChart extends React.PureComponent {\n  render() {\n    const { lines = [], data = [] } = this.props;\n    let tooltipActive = false;\n    const LinesComp = lines.map((line, i) => (\n      <Line type=\"monotone\" dataKey={line} name={line} stroke={COLORS[i % 8]} dot={false} />\n    ));\n    return (\n      <ResponsiveContainer\n        width=\"100%\"\n        height={400}\n        onMouseEnter={() => (tooltipActive = true)}\n        onMouseLeave={() => (tooltipActive = false)}\n      >\n        <LineChart\n          width={720}\n          height={440}\n          data={data}\n          margin={{\n            top: 8,\n            bottom: 8,\n            right: 8\n          }}\n        >\n          <XAxis tick={<XAxisTick />}dataKey=\"date\" minTickGap={40} tickCount={4} type=\"category\" />\n          <YAxis tickFormatter={tick => getShortNumber(tick)} />\n          <Tooltip active={tooltipActive} cursour={false} content={<CustomToolTip />} />\n          <Legend max />\n          {LinesComp}\n        </LineChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n\nconst COLORS = [\"#3FA2CC\", \"#DB504D\", \"#7CA82D\", \"#EF853A\", \"#424348\", \"#90ED7D\", \"#3C861F\", \"#F9D7E0\"];\n\nconst getTime = date =>\n  moment(date, \"YYYY-MM-DD\")\n    .toDate()\n    .getTime();\n\nfunction BankBalanceGraph(props) {\n  const { selectedaccounts } = props;\n  const [lines, setlines] = useState([]);\n  const [bankbalancegraphData, setbankbalancegraphData] = useState({});\n  const [selectedtab, setselectedtab] = useState(\"7days\"); //\n  const [bankbalanceData, setbankbalanceData] = useState([]);\n  const [startDate, setstartDate] = useState(null);\n  const endDate = moment().format(\"MM/DD/YYYY\");\n\n  useEffect(() => {\n    const getGraphData = (fromDate, toDate) => {\n      const URL = encodeURI(`bankbalance?from_date='${fromDate}'&to_date='${toDate}'`);\n      instance\n        .get(URL)\n        .then(response => {\n          let minValue = 0;\n          let maxValue = 0;\n          let {\n            data: { result }\n          } = response;\n          result = selectedaccounts[0]\n            ? result.filter(x => selectedaccounts.find(y => y.id === x.bank_account_id))\n            : result;\n          const due_dates = uniq(\n            result\n              .map(x => getTime(x.date))\n              .sort()\n              .filter(dt => dt && dt !== NaN)\n          );\n\n          let series = [];\n\n          function getObject(lineLabel, bankid) {\n            let values = [];\n            due_dates.forEach(date => {\n              const alldataforthisdate = result.filter(\n                x => date === getTime(x.date) && (bankid ? x.bank_account_id === bankid : true)\n              );\n              let amountforthisdate = 0;\n              alldataforthisdate.forEach(x => {\n                amountforthisdate = amountforthisdate + x.amount;\n                maxValue = amountforthisdate < maxValue ? maxValue : amountforthisdate;\n                minValue = amountforthisdate > minValue ? minValue : amountforthisdate;\n              });\n              values.push([date, amountforthisdate]);\n            });\n            return {\n              values,\n              \"line-color\": \"#0000ff\",\n              text: lineLabel\n            };\n          }\n\n          if (!selectedaccounts[0]) {\n            series = [getObject(\"All Accounts\")];\n          } else if (selectedaccounts.length === 1) {\n            series = [...selectedaccounts.map(acc => getObject(acc.name, acc.id))];\n          } else {\n            series = [getObject(\"Total balance\"), ...selectedaccounts.map(acc => getObject(acc.name, acc.id))];\n          }\n\n          const allobjectkeys = series.map(x => x.text);\n          const DATA = [];\n          get(series, \"[0].values\", []).map((value, i) => {\n            let obj = {\n              date: moment(value[0]).format(\"MM/DD/YYYY\")\n            };\n            allobjectkeys.forEach((key, j) => {\n              const thislinedata = series.find(y => y.text === key);\n              obj[key] = thislinedata ? thislinedata.values[i][1] : 0;\n            });\n            DATA.push(obj);\n          });\n\n          setlines(allobjectkeys);\n          setbankbalanceData(series);\n          setbankbalancegraphData(DATA);\n        })\n        .catch(e => handleAPIError(e));\n    };\n    startDate && endDate && getGraphData(startDate, endDate);\n  }, [startDate, endDate, selectedaccounts]);\n\n  useEffect(() => {\n    !startDate &&\n      setstartDate(\n        moment()\n          .subtract(7, \"days\")\n          .format(\"MM/DD/YYYY\")\n      );\n  }, [startDate]);\n\n  useEffect(() => {\n    switch (selectedtab) {\n      case \"7days\":\n        setstartDate(\n          moment()\n            .subtract(7, \"days\")\n            .format(\"MM/DD/YYYY\")\n        );\n        break;\n      case \"30days\":\n        setstartDate(\n          moment()\n            .subtract(30, \"days\")\n            .format(\"MM/DD/YYYY\")\n        );\n        break;\n      case \"6months\":\n        setstartDate(\n          moment()\n            .subtract(6, \"months\")\n            .format(\"MM/DD/YYYY\")\n        );\n        break;\n      case \"1year\":\n        setstartDate(\n          moment()\n            .subtract(1, \"years\")\n            .format(\"MM/DD/YYYY\")\n        );\n        break;\n      case \"3year\":\n        setstartDate(\n          moment()\n            .subtract(3, \"years\")\n            .format(\"MM/DD/YYYY\")\n        );\n        break;\n      default:\n        break;\n    }\n  }, [selectedtab]);\n\n  return (\n    <div className=\"mt-5\">\n      <h1 className=\"h2 tb-border\">Bank Balance</h1>\n      <div className=\"row\">\n        <ul id=\"sideTabBar\" className=\"nav nav-tabs\" style={{ marginLeft: 16, marginTop: 8 }}>\n          <li\n            onClick={() => setselectedtab(\"7days\")}\n            className={`cursour-pointer ${selectedtab === \"7days\" && \"active\"}`}\n            id=\"paya\"\n            data-id=\"pListing\"\n          >\n            <span>7 Days</span>\n          </li>\n          <li\n            onClick={() => setselectedtab(\"30days\")}\n            className={`cursour-pointer ${selectedtab === \"30days\" && \"active\"}`}\n            id=\"paya\"\n            data-id=\"pListing\"\n          >\n            <span>30 Days</span>\n          </li>\n          <li\n            onClick={() => setselectedtab(\"6months\")}\n            className={`cursour-pointer ${selectedtab === \"6months\" && \"active\"}`}\n            id=\"paya\"\n            data-id=\"pListing\"\n          >\n            <span>6 Months</span>\n          </li>\n          <li\n            onClick={() => setselectedtab(\"1year\")}\n            className={`cursour-pointer ${selectedtab === \"1year\" && \"active\"}`}\n            id=\"paya\"\n            data-id=\"pListing\"\n          >\n            <span>1 Year</span>\n          </li>\n          <li\n            onClick={() => setselectedtab(\"3years\")}\n            className={`cursour-pointer ${selectedtab === \"3years\" && \"active\"}`}\n            id=\"paya\"\n            data-id=\"pListing\"\n          >\n            <span>3 Years</span>\n          </li>\n        </ul>\n      </div>\n\n      <div className={\"w-100\"}>\n        <CustomChart data={bankbalancegraphData} lines={lines} />\n      </div>\n      {/* <div className=\"pt-3 row\" style={{ paddingLeft: 54 }}>\n        {allbankaccounts &&\n          allbankaccounts.map((x, i) => {\n            return (\n              <div className=\"col-md-4\">\n                <span className=\"mt-2\">\n                  <i\n                    class=\"fa fa-minus mx-2\"\n                    style={{\n                      color: `${get(x, \"line-color\", COLORS[0])}`\n                    }}\n                    aria-hidden=\"true\"\n                  ></i>\n                </span>\n                <span style={{ marginTop: -6 }}>{get(x, \"text\", \"All Accounts\")}</span>\n              </div>\n            );\n          })}\n      </div>\n     */}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BankBalanceGraph);\n\n{\n  /* <span\n                  className={`ml-2 mr-2`}\n                  style={{\n                    backgroundColor: `${get(x, \"line-color\", COLORS[0])}`,\n                    color: \"#fff\",\n                    borderRadius: \"50px\",\n                    width: \"13px\",\n                    height: \"13px\",\n                    display: \"inline-block\",\n                    margin: \"0px 3px -2px 0px\"\n                  }}\n                /> */\n}\n\n//calculate min and max\n// series.forEach(s => {\n//   s.values.forEach(v => {\n//     if (v[1] > maxValue) maxValue = v[1];\n//     if (v[1] < minValue) minValue = v[1];\n//   });\n// });\n\n// const graphDataValues = result.map(d => Math.round(d.amount));\n// minValue = Math.min.apply(null, graphDataValues);\n// maxValue = Math.max.apply(null, graphDataValues);\n\n// const initbalanceProjectionData = {\n//   type: \"line\",\n//   noData: {\n//     text: \"Currently there is no data in the chart\",\n//     backgroundColor: \"#20b2db\",\n//     fontSize: 18,\n//     textAlpha: 0.9,\n//     alpha: 0.6,\n//     bold: true\n//   },\n//   \"crosshair-x\": {\n//     \"plot-label\": {\n//       visible: false,\n//       text: \"%t: $%v\",\n//       short: true,\n//       \"short-unit\": \"K\",\n//       \"thousands-separator\": \",\",\n//       decimals: 0\n//     }\n//   },\n//   gui: {\n//     contextMenu: {\n//       empty: true\n//     }\n//   },\n//   plot: {\n//     aspect: \"spline\",\n//     marker: {\n//       visible: false\n//     },\n//     tooltip: {\n//       visible: true\n//     },\n//     \"tooltip-text\": \"%t: $%v\",\n//     short: true,\n//     \"short-unit\": \"K\",\n//     \"thousands-separator\": \",\",\n//     decimals: 0\n//   },\n//   plotarea: {\n//     \"adjust-layout\": true\n//   },\n//   \"scale-x\": {\n//     \"min-value\": minDate,\n//     \"max-value\": maxDate,\n//     step: \"day\",\n//     transform: {\n//       type: \"date\",\n//       all: \"%m/%d/%y\"\n//     }\n//   },\n//   \"scale-y\": {\n//     // \"min-value\": minValue,\n//     // \"max-value\": maxValue,\n//     short: true,\n//     \"short-unit\": \"K\",\n//     format: `$%v`,\n//     negation: \"currency\",\n//     \"thousands-separator\": \",\",\n//     maxTicks: 7,\n//     maxLabels: 7\n//   },\n//   series\n// };\n\n// setbankbalancegraphData(initbalanceProjectionData);\n","import CustomToolTip from \"components/Recharts/CustomTooltip\";\nimport XAxisTick from \"components/Recharts/XAxisTick\";\nimport CustomSpinner from \"components/Spinner\";\nimport { handleAPIError } from \"handlers/setters\";\nimport get from \"lodash/get\";\nimport uniq from \"lodash/uniq\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\nimport { getShortNumber } from \"utils\";\nimport { str_ts, ts_str } from \"utils/dates\";\nimport { instance } from \"../../actions/axiosInstance\";\n\nclass CustomChart extends React.PureComponent {\n  render() {\n    const { data } = this.props;\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          width={720}\n          height={440}\n          data={data}\n          margin={{\n            top: 8,\n            bottom: 8,\n            right: 8\n          }}\n        >\n          <XAxis tick={<XAxisTick />} dataKey=\"date\" minTickGap={40} type=\"category\" />\n          <YAxis \n            interval=\"preserveStartEnd\"\n            tickFormatter={tick => getShortNumber(tick, true, 1)} \n            // domain={[dataMin => (dataMin - (Math.abs(dataMin) * 0.2)), dataMax =>  dataMax + (Math.abs(dataMax) * 0.2)]} \n          />\n          <Tooltip cursor={false} content={<CustomToolTip />} />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"payIQ\" name=\"PayIQ\" stroke=\"#3FA2CD\" dot={false} />\n          <Line type=\"monotone\" dataKey=\"due\" name=\"Due\" stroke=\"#D4312C\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n\nconst getTime = date =>\n  moment(date, \"YYYY-MM-DD\")\n    .toDate()\n    .getTime();\n\nexport const LiquidityChart = props => {\n  const [apiData, setapiData] = useState(null);\n  const [ar, setar] = useState(null);\n  const [ap, setap] = useState(null);\n  const [allbankbalance, setallbankbalance] = useState([]);\n  const { startDate, endDate, selectedaccounts } = props;\n\n  useEffect(() => {\n    if (!startDate || !endDate) return;\n\n    const minDate = str_ts({ str: startDate });\n\n    const yesterday = str_ts({\n      str: moment()\n        .subtract(\"days\", 30)\n        .format(\"MM/DD/YYYY\")\n    });\n\n    const new_from_date = minDate > yesterday ? yesterday : minDate;\n\n    const URL = encodeURI(`bankbalance?from_date='${ts_str({ ts: new_from_date })}'&to_date='${endDate}'`);\n    instance\n      .get(URL)\n      .then(resp => {\n        let result = get(resp, \"data.result\", []);\n        // console.log(\"bbresult bef: \", result);\n        result = selectedaccounts[0]\n          ? result.filter(x => selectedaccounts.find(y => y.id === x.bank_account_id))\n          : result;\n        // console.log(\"bbresult aft: \", result);\n        setallbankbalance(result);\n      })\n      .catch(e => handleAPIError(e));\n  }, [startDate, endDate, selectedaccounts]);\n\n  useEffect(() => {\n    if (!startDate || !endDate) return;\n    instance\n      .get(encodeURI(`arinvoice?per_page=4000&from_date=${startDate}&to_date=${endDate}&status=open`))\n      .then(resp => {\n        setar(get(resp, \"data.result\", []));\n      })\n      .catch(e => handleAPIError(e));\n  }, [startDate, endDate]);\n\n  useEffect(() => {\n    if (!startDate || !endDate) return;\n    instance\n      .get(encodeURI(`apinvoice?per_page=4000&from_date=${startDate}&to_date=${endDate}&status=open`))\n      .then(resp => {\n        setap(get(resp, \"data.result\", []));\n      })\n      .catch(e => handleAPIError(e));\n  }, [startDate, endDate]);\n\n  useEffect(() => {\n    if (ar && ap && allbankbalance && startDate && endDate) {\n      let minDate = str_ts({ str: startDate });\n      let maxDate = str_ts({ str: endDate });\n      let allbankbalancedatesinnumbers = allbankbalance\n        .filter(x => x.amount)\n        .map(x => getTime(x.date))\n        .sort();\n      const firstbankbalancedate = allbankbalancedatesinnumbers[0];\n\n      const due_dates = uniq(\n        [...ar.map(x => getTime(x.due_date || x.date_closed)), ...ap.map(x => getTime(x.due_date || x.date_closed))]\n          .sort()\n          .filter(dt => dt && !isNaN(dt))\n          .filter(dt => dt >= firstbankbalancedate && dt <= maxDate)\n      );\n\n      let initbalance = 0;\n      let count = 0;\n      let xmindate = \"\";\n      while (count < due_dates.length) {\n        const balance = allbankbalance.find(x => getTime(x.date) === due_dates[count]);\n        if (balance) {\n          xmindate = getTime(balance.date);\n          count = due_dates.length;\n        }\n        count++;\n      }\n      // console.log(\"xmindate1: \", moment(xmindate).format(\"MM/DD/YYYY\"));\n      if (!xmindate) {\n        let allbankbalancedatesinnumbers = allbankbalance\n          .filter(x => x.amount)\n          .map(x => getTime(x.date))\n          .sort()\n          .reverse();\n        xmindate = allbankbalancedatesinnumbers[0];\n      }\n      console.log(\"xmindate2: \", moment(xmindate).format(\"MM/DD/YYYY\"));\n\n      allbankbalance.forEach(balance => {\n        if (getTime(balance.date) === xmindate) {\n          initbalance = initbalance + balance.amount;\n        }\n      });\n\n      if (false /*xmindate < str_ts({ str: startDate })*/) {\n        Promise.all([\n          instance.get(\n            `apinvoice/total?from_date='${moment(ts_str({ ts: xmindate }), \"MM/DD/YYYY\")\n              .add(\"days\", 1)\n              .format(\"MM/DD/YYYY\")}'&to_date='${moment(startDate, \"MM/DD/YYYY\")\n              .subtract(\"days\", 1)\n              .format(\"MM/DD/YYYY\")}'&date_type=due&status=open`\n          ),\n          instance.get(\n            `arinvoice/total?from_date='${moment(ts_str({ ts: xmindate }), \"MM/DD/YYYY\")\n              .add(\"days\", 1)\n              .format(\"MM/DD/YYYY\")}'&to_date='${moment(startDate, \"MM/DD/YYYY\")\n              .subtract(\"days\", 1)\n              .format(\"MM/DD/YYYY\")}'&date_type=due&status=open`\n          )\n        ])\n          .then(response => {\n            const apTotalInGapTemp = Math.round(get(response[0], \"data.total\", 0));\n            const arTotalInGapTemp = Math.round(get(response[1], \"data.total\", 0));\n            if (apTotalInGapTemp || arTotalInGapTemp) {\n              initbalance = initbalance + arTotalInGapTemp - apTotalInGapTemp;\n            }\n\n            console.log(\"initbalance: afterAPI \", initbalance);\n            let values = [[xmindate, initbalance]];\n            let valuesEstimated = [[xmindate, initbalance]];\n\n            [xmindate, ...due_dates].forEach((date, i) => {\n              const allbankdataforthisdate = allbankbalance.filter(x => date === getTime(x.date));\n              let bankamountforthisdate;\n              allbankdataforthisdate.forEach(x => {\n                bankamountforthisdate = (bankamountforthisdate || 0) + x.amount;\n              });\n              if (i === 0 && startDate !== endDate) {\n                return;\n              }\n              // console.log(\"bankamountforthisdate: bef\", moment(date).format(\"MM/DD/YYYY\"), bankamountforthisdate);\n\n              const allardataforthisdate = ar.filter(x => date === getTime(x.due_date || x.date_closed));\n              let aramountforthisdate = 0;\n              allardataforthisdate.forEach(x => {\n                aramountforthisdate = aramountforthisdate + x.total_amount_due;\n              });\n\n              const allapdataforthisdate = ap.filter(x => date === getTime(x.due_date || x.date_closed));\n              let apamountforthisdate = 0;\n              allapdataforthisdate.forEach(x => {\n                apamountforthisdate = apamountforthisdate + x.total_amount_due;\n              });\n              // console.log(\"aramountforthisdate: \", moment(date).format(\"MM/DD/YYYY\"), aramountforthisdate);\n              // console.log(\"apamountforthisdate: \", moment(date).format(\"MM/DD/YYYY\"), apamountforthisdate);\n              let amount;\n              bankamountforthisdate\n                ? (amount = bankamountforthisdate || 0)\n                : (amount = get(values, `[${i - 1}][${1}]`, initbalance) + aramountforthisdate - apamountforthisdate);\n              values.push([date, amount]);\n              // console.log(\"final amount: \", moment(date).format(\"MM/DD/YYYY\"), bankamountforthisdate, amount);\n            });\n\n            [xmindate, ...due_dates].forEach((date, i) => {\n              const allbankdataforthisdate = allbankbalance.filter(x => date === getTime(x.date));\n              let bankamountforthisdate;\n              allbankdataforthisdate.forEach(x => {\n                bankamountforthisdate = (bankamountforthisdate || 0) + x.amount;\n              });\n              if (i === 0 && startDate !== endDate) {\n                return;\n              }\n              // console.log(\"rbankamountforthisdate: bef\", bankamountforthisdate);\n\n              const allardataforthisdate = ar.filter(x => date === getTime(x.due_date));\n              let aramountforthisdate = 0;\n              allardataforthisdate.forEach(x => {\n                aramountforthisdate = aramountforthisdate + x.total_amount_due;\n              });\n              // console.log(\"raramountforthisdate: \", moment(date).format(\"MM/DD/YYYY\"), aramountforthisdate);\n\n              const allapdataforthisdate = ap.filter(x => date === getTime(x.recommendation || x.due_date));\n              let apamountforthisdate = 0;\n              allapdataforthisdate.forEach(x => {\n                apamountforthisdate = apamountforthisdate + x.total_amount_due;\n              });\n              // console.log(\"rapamountforthisdate: \", moment(date).format(\"MM/DD/YYYY\"), apamountforthisdate);\n\n              let amount;\n              bankamountforthisdate\n                ? (amount = bankamountforthisdate || 0)\n                : (amount =\n                    get(valuesEstimated, `[${i - 1}][${1}]`, initbalance) + aramountforthisdate - apamountforthisdate);\n\n              // console.log(\"rbankamountforthisdate: aft\", bankamountforthisdate);\n              valuesEstimated.push([date, amount]);\n              // console.log(\"rfinal amount: \", moment(date).format(\"MM/DD/YYYY\"), bankamountforthisdate, amount);\n            });\n\n            maxDate !== values[values.length - 1][0] && (values = [...values, [maxDate, values[values.length - 1][1]]]);\n            maxDate !== valuesEstimated[valuesEstimated.length - 1][0] &&\n              (valuesEstimated = [...valuesEstimated, [maxDate, valuesEstimated[valuesEstimated.length - 1][1]]]);\n\n            // special condition for single day\n            if (startDate === endDate) {\n              const valueslen = values.length - 1;\n              xmindate = values[valueslen][0] - 86400000;\n              minDate = values[valueslen][0] - 86400000;\n              maxDate = values[valueslen][0] + 86400000;\n              values = [values[valueslen]];\n              valuesEstimated = [valuesEstimated[valueslen]];\n            }\n\n            const DATA = values.map((val, i) => ({\n              date: moment(val[0]).format(\"MM/DD\"),\n              due: val[1],\n              payIQ: valuesEstimated[i][1]\n            }));\n            setapiData(DATA);\n          })\n          .catch(e => handleAPIError(e));\n      } else {\n        console.log(\"initbalance: normal \", initbalance);\n        let values = [[xmindate, initbalance]];\n        let valuesEstimated = [[xmindate, initbalance]];\n\n        due_dates.forEach((date, i) => {\n          const allbankdataforthisdate = allbankbalance.filter(x => date === getTime(x.date));\n          let bankamountforthisdate;\n          allbankdataforthisdate.forEach(x => {\n            bankamountforthisdate = (bankamountforthisdate || 0) + x.amount;\n          });\n          if (i === 0 && startDate !== endDate) {\n            return;\n          }\n          // console.log(\"bankamountforthisdate: bef\", moment(date).format(\"MM/DD/YYYY\"), bankamountforthisdate);\n\n          const allardataforthisdate = ar.filter(x => date === getTime(x.due_date || x.date_closed));\n          let aramountforthisdate = 0;\n          allardataforthisdate.forEach(x => {\n            aramountforthisdate = aramountforthisdate + x.total_amount_due;\n          });\n\n          const allapdataforthisdate = ap.filter(x => date === getTime(x.due_date || x.date_closed));\n          let apamountforthisdate = 0;\n          allapdataforthisdate.forEach(x => {\n            apamountforthisdate = apamountforthisdate + x.total_amount_due;\n          });\n          // console.log(\"aramountforthisdate: \", moment(date).format(\"MM/DD/YYYY\"), aramountforthisdate);\n          // console.log(\"apamountforthisdate: \", moment(date).format(\"MM/DD/YYYY\"), apamountforthisdate);\n          let amount;\n          bankamountforthisdate\n            ? (amount = bankamountforthisdate || 0)\n            : (amount = get(values, `[${i - 1}][${1}]`, initbalance) + aramountforthisdate - apamountforthisdate);\n          values.push([date, amount]);\n          // console.log(\"final amount: \", moment(date).format(\"MM/DD/YYYY\"), bankamountforthisdate, amount);\n        });\n\n        due_dates.forEach((date, i) => {\n          const allbankdataforthisdate = allbankbalance.filter(x => date === getTime(x.date));\n          let bankamountforthisdate;\n          allbankdataforthisdate.forEach(x => {\n            bankamountforthisdate = (bankamountforthisdate || 0) + x.amount;\n          });\n          if (i === 0 && startDate !== endDate) {\n            return;\n          }\n          // console.log(\"rbankamountforthisdate: bef\", bankamountforthisdate);\n\n          const allardataforthisdate = ar.filter(x => date === getTime(x.due_date));\n          let aramountforthisdate = 0;\n          allardataforthisdate.forEach(x => {\n            aramountforthisdate = aramountforthisdate + x.total_amount_due;\n          });\n          // console.log(\"raramountforthisdate: \", moment(date).format(\"MM/DD/YYYY\"), aramountforthisdate);\n\n          const allapdataforthisdate = ap.filter(x => date === getTime(x.recommendation || x.due_date));\n          let apamountforthisdate = 0;\n          allapdataforthisdate.forEach(x => {\n            apamountforthisdate = apamountforthisdate + x.total_amount_due;\n          });\n          // console.log(\"rapamountforthisdate: \", moment(date).format(\"MM/DD/YYYY\"), apamountforthisdate);\n\n          let amount;\n          bankamountforthisdate\n            ? (amount = bankamountforthisdate || 0)\n            : (amount =\n                get(valuesEstimated, `[${i - 1}][${1}]`, initbalance) + aramountforthisdate - apamountforthisdate);\n\n          // console.log(\"rbankamountforthisdate: aft\", bankamountforthisdate);\n          valuesEstimated.push([date, amount]);\n          // console.log(\"rfinal amount: \", moment(date).format(\"MM/DD/YYYY\"), bankamountforthisdate, amount);\n        });\n\n        maxDate !== values[values.length - 1][0] && (values = [...values, [maxDate, values[values.length - 1][1]]]);\n        maxDate !== valuesEstimated[valuesEstimated.length - 1][0] &&\n          (valuesEstimated = [...valuesEstimated, [maxDate, valuesEstimated[valuesEstimated.length - 1][1]]]);\n\n        // special condition for single day\n        if (startDate === endDate) {\n          const valueslen = values.length - 1;\n          xmindate = values[valueslen][0] - 86400000;\n          minDate = values[valueslen][0] - 86400000;\n          maxDate = values[valueslen][0] + 86400000;\n          values = [values[valueslen]];\n          valuesEstimated = [valuesEstimated[valueslen]];\n        }\n\n        const DATA = values.map((val, i) => ({\n          date: moment(val[0]).format(\"MM/DD\"),\n          due: val[1],\n          payIQ: valuesEstimated[i][1]\n        }));\n        setapiData(DATA);\n      }\n    }\n  }, [ar, ap, allbankbalance, startDate, endDate]);\n\n  return (\n    <div className=\"mt-2\">\n      <h1 className=\"h2\">Liquidity Snapshot</h1>\n      <div className=\"my-2 mt-4\">\n        {apiData ? (\n          <CustomChart data={apiData} />\n        ) : (\n          <div style={{ width: \"100%\", height: 440 }}>\n            <CustomSpinner />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default LiquidityChart;\n\n{\n  /* <span\n            className={`ml-2 mr-2 criticalclr`}\n            style={{\n              background: \"#3FA2CD\"\n            }}\n          /> */\n}\n\n{\n  /* <div className=\"d-flex justify-content-center\">\n        <div>\n          <span className=\"mt-2\">\n            <i\n              class=\"fa fa-minus mx-2\"\n              aria-hidden=\"true\"\n              style={{\n                color: \"#3FA2CD\"\n              }}\n            />\n          </span>\n          <span>PayIQ</span>\n          <span className=\"mt-2\">\n            <i\n              class=\"fa fa-minus mx-2 ml-4\"\n              style={{\n                color: \"#D4312C\"\n              }}\n              aria-hidden=\"true\"\n            ></i>\n          </span>\n          <span>Due</span>\n        </div>\n      </div> */\n}\n\n// const [balanceProjectionData, setbalanceProjectionData] = useState(GRAPHCONST);\n\nconst GRAPHCONST = {\n  type: \"line\",\n  noData: {\n    text: \"\",\n    backgroundColor: \"#ffffff\",\n    fontSize: 18,\n    textAlpha: 0.9,\n    alpha: 0.6,\n    bold: true\n  },\n  gui: {\n    contextMenu: {\n      empty: true\n    }\n  },\n  plot: {\n    tooltip: {\n      text: \"On %t, node %node-index is positioned at %kt (X) and %vt (Y).\"\n    },\n    // \"tooltip-text\": \"$%v\",\n    short: true,\n    \"short-unit\": \"K\",\n    \"thousands-separator\": \",\",\n    decimals: 0\n  },\n  plotarea: {\n    \"adjust-layout\": true\n  },\n  \"scale-x\": {\n    // \"min-value\": minDate,\n    // \"max-value\": maxDate,\n    step: \"day\",\n    transform: {\n      type: \"date\",\n      all: \"%m/%d/%y\"\n    }\n  },\n  \"scale-y\": {\n    short: true,\n    \"short-unit\": \"K\",\n    format: `$%v`,\n    negation: \"currency\",\n    \"thousands-separator\": \",\",\n    maxTicks: 7,\n    maxLabels: 7\n  },\n  series: [{ values: [] }]\n};\n","import DateRangePicker from \"components/DateRangePicker\";\nimport { handleAPIError } from \"handlers/setters\";\nimport get from \"lodash/get\";\nimport uniqBy from \"lodash/uniqBy\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport TokenManager from \"utils/TokenManager\";\nimport { instance } from \"../../actions/axiosInstance\";\nimport ClickAwayListener from \"../../components/ClickAwayListener\";\nimport ArVsApGraph from \"./ArVsApGraph\";\nimport BankBalanceGraph from \"./BankBalanceGraph\";\nimport LiquidityChart from \"./LiquidityChart\";\n\nexport const Graphs = props => {\n  const [showAllAccountsMenu, setshowAllAccountsMenu] = useState(false);\n  const [showExportMenu, setshowExportMenu] = useState(false);\n  const [allaccounts, setallaccounts] = useState([]);\n  const [selectedaccounts, setselectedaccounts] = useState([]);\n  const { startDate, endDate, expand } = props;\n\n  useEffect(() => {\n    instance\n      .get(\"/bankaccount\")\n      .then(resp => {\n        setallaccounts(get(resp, \"data.result\", []));\n      })\n      .catch(e => handleAPIError(e));\n  }, []);\n\n  return (\n    <div className={`hide-scroll graph-wrapper pl-0 ${!expand ? 'col-md-11 dashboard-expanded' : 'col-md-9 pr-1'}`}>\n        <div className=\"card\">\n          <div className=\"card-body pt-0\">\n            <div className=\"row mt-4\">\n              <div className=\"col-md-4\">\n                <div className=\"dropdown\" style={{ padding: 5 }}>\n                  <span\n                    className=\"dropdown-toggle all-account cursour-pointer\"\n                    href=\"#\"\n                    role=\"button\"\n                    id=\"dropdownMenuLink\"\n                    data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"false\"\n                    onClick={() => setshowAllAccountsMenu(true)}\n                  >\n                    {selectedaccounts[0]\n                      ? selectedaccounts[1]\n                        ? `Accounts(${selectedaccounts.length})`\n                        : selectedaccounts[0].name\n                      : \"All Accounts\"}\n                  </span>\n                  <ClickAwayListener onClickAway={setshowAllAccountsMenu}>\n                    <div\n                      className={`cursour-pointer dropdown-menu hide-scroll ${showAllAccountsMenu ? \"show\" : \"\"}`}\n                      style={{ maxHeight: \"50vh\", overflowY: \"scroll\" }}\n                      aria-labelledby=\"dropdownMenuLink\"\n                      id=\"companylist\"\n                    >\n                      <span\n                        onClick={() => {\n                          setselectedaccounts([]);\n                        }}\n                      >\n                        <input type=\"checkbox\" className=\"mr-2\" name=\"All accounts\" checked={!selectedaccounts[0]} />\n                        All Accounts\n                      </span>\n                      {allaccounts.map(acc => {\n                        const isselected = selectedaccounts.find(x => x.id === acc.id);\n                        return (\n                          <span\n                            style={{ background: isselected ? \"#eee\" : null }}\n                            onClick={() => {\n                              const datatemp = isselected\n                                ? selectedaccounts.filter(x => x.id !== acc.id)\n                                : [...selectedaccounts, acc];\n                              setselectedaccounts(uniqBy(datatemp, \"name\"));\n                            }}\n                          >\n                            <input type=\"checkbox\" className=\"mr-2\" name={acc.name} checked={isselected} />\n                            {acc.name}\n                          </span>\n                        );\n                      })}\n                    </div>\n                  </ClickAwayListener>\n                </div>\n              </div>\n              <div className=\"col-md-8\">\n                <div className=\"dropdown float-right\">\n                  <span\n                    className=\"btn dropdown-toggle btn-primary\"\n                    href=\"#\"\n                    role=\"button\"\n                    id=\"export\"\n                    data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"false\"\n                    onClick={() => setshowExportMenu(true)}\n                  >\n                    Export\n                  </span>\n                  <ClickAwayListener onClickAway={setshowExportMenu}>\n                    <div\n                      className={`dropdown-menu dropdown-menu-right ${showExportMenu ? \"show\" : \"\"}`}\n                      aria-labelledby=\"dropdownMenuLink\"\n                      id=\"exportlist\"\n                    >\n                      <span onClick={props.exportCsv}>Export CSV</span>\n                      <span onClick={props.exportExcel}>Export Excel</span>\n                    </div>\n                  </ClickAwayListener>\n                </div>\n                <div className=\"single-date-picker pull-right\">\n                  <DateRangePicker startDate={moment(startDate)} endDate={moment(endDate)} getSelectedDates={props.getDates} />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"hide-scroll\" style={{ height: '74vh', overflowY: 'auto'}}>\n              {startDate && endDate && (\n                <LiquidityChart startDate={startDate} endDate={endDate} selectedaccounts={selectedaccounts} />\n              )}\n\n              {startDate && endDate && (\n                <ArVsApGraph\n                  history={props.history}\n                  startDate={startDate}\n                  endDate={endDate}\n                  selectedaccounts={selectedaccounts}\n                />\n              )}\n\n              {startDate && endDate && (\n                <BankBalanceGraph\n                  history={props.history}\n                  startDate={startDate}\n                  endDate={endDate}\n                  selectedaccounts={selectedaccounts}\n                />\n              )}\n            </div>\n            </div>\n        </div>\n      </div>\n  );\n};\n\nexport default Graphs;\n","import React, { useEffect, useState } from \"react\";\nimport PayWidget from \"../../components/paywidget\";\nimport moment from \"moment\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nexport const Paylist = props => {\n  const {\n    startDate,\n    endDate,\n    getPayableData,\n    getReceivableData,\n    payablesData,\n    receivablesData,\n    expand,\n    handleExpand,\n    isFetching\n  } = props;\n  const [startLabelDate, setStartLabelDate] = useState(startDate);\n  const [selectedtab, setselectedTab] = useState(\"payables\");\n\n  useEffect(() => {\n    if (!startDate || !endDate || !selectedtab) return;\n    if(isFetching) {\n      getPayableData(startDate, endDate);\n      getReceivableData(startDate, endDate);\n      setStartLabelDate(startDate);\n    }\n  }, [selectedtab, startDate]);\n\n  function nextPreviousDate(action) {\n    let sd = '';\n    if (action === \"next\") {\n      sd = moment(startLabelDate).add(1, \"days\").format(\"MM/DD/YYYY\");\n    }\n    if (action === \"prev\") {\n      sd = moment(startLabelDate).subtract(1, \"days\").format(\"MM/DD/YYYY\");\n    }\n    setStartLabelDate(sd);\n    getPayableData(sd, sd);\n    getReceivableData(sd, sd);\n  }\n\n  function changeSelction(key) {\n    if (selectedtab === key) return;\n    setselectedTab(key);\n  }\n\n  const rows = selectedtab === 'payables' ? payablesData : receivablesData;\n\n  return (\n    <React.Fragment>\n      {\n        expand ?\n          <div className=\"col-md-1 dashboard-sidebar-collapsed-wrap\">\n            <div className=\"card\">\n              <div\n                className=\"leftbaricon\"\n                onClick={() => {\n                  handleExpand(expand);\n                }}\n              >\n                <OverlayTrigger placement=\"left\" overlay={<Tooltip>Expand</Tooltip>}>\n                  <i className=\"fa fa-chevron-left\" />\n                </OverlayTrigger>\n              </div>\n              <div>\n                <div onClick={() => { handleExpand(expand); changeSelction(\"payables\")}}>\n                  <OverlayTrigger placement=\"left\" overlay={<Tooltip>Payables</Tooltip>}>\n                    <i className=\"onlyicon fas fa-file-invoice-dollar cursor-pointer\" aria-hidden=\"true\" />\n                  </OverlayTrigger>\n                </div>\n                <div onClick={() => { handleExpand(expand); changeSelction(\"receiveable\")}}>\n                  <OverlayTrigger placement=\"left\" overlay={<Tooltip>Receivables</Tooltip>}>\n                    <i className=\"onlyicon fas fa-hand-holding-usd cursor-pointer\" aria-hidden=\"true\" />\n                  </OverlayTrigger>\n                </div>\n              </div>\n            </div>\n          </div>\n          :\n          <div className=\"col-md-3 hide-scroll dashboard-sidebar\">\n              <div\n                className=\"leftbaricon\"\n                onClick={() => {\n                  handleExpand(expand);\n                }}\n              >\n                <OverlayTrigger placement=\"left\" overlay={<Tooltip>Collapse</Tooltip>}>\n                  <i className=\"fa fa-chevron-right\" />\n                </OverlayTrigger>\n              </div>\n            <div>\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  <div className=\"pb-2\">\n                    <div className=\"text-center pb-1\">\n                      <i\n                        className=\"fa fa-angle-left\"\n                        onClick={() => nextPreviousDate(\"prev\")}\n                        id=\"prevDate\"\n                        aria-hidden=\"true\"\n                      ></i>\n                      <span id=\"showDate\">{moment(startLabelDate).format(\"ddd, DD MMM, YYYY\")}</span>\n                      <i\n                        className=\"fa fa-angle-right\"\n                        id=\"nextDate\"\n                        aria-hidden=\"true\"\n                        onClick={() => nextPreviousDate(\"next\")}\n                      ></i>\n                    </div>\n                    <div>\n                      <ul id=\"sideTabBar\" className=\"nav nav-tabs mb-0 mt-3\">\n                        <li\n                          onClick={() => changeSelction(\"payables\")}\n                          className={`cursour-pointer w-50 text-center ${selectedtab === \"payables\" && \"active\"}`}\n                          id=\"paya\"\n                          data-id=\"pListing\"\n                        >\n                          <span>Payables</span>\n                        </li>\n                        <li\n                          onClick={() => changeSelction(\"receiveable\")}\n                          className={`cursour-pointer w-50 text-center ${selectedtab === \"receiveable\" && \"active\"}`}\n                          id=\"rece\"\n                          data-id=\"rListing\"\n                        >\n                          <span>Receivables</span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n\n                  <div className=\"hide-scroll sidebar-listing-scroll\">\n                    <div id=\"pLisitng\" className=\"pLisitng cTab\">\n                      {isFetching ? <span>Loading</span> : null}\n                      {rows.length ? (\n                        rows.map(element => <PayWidget {...element} />)\n                      ) : !isFetching ? (\n                        <span>No Data</span>\n                      ) : null}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n      }\n    </React.Fragment>\n  );\n};\n\nexport default Paylist;\n","import fe_config from \"constants/Configs\";\nimport * as FileSaver from \"file-saver\";\nimport get from \"lodash/get\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as XLSX from \"xlsx\";\nimport { getPayableData, getReceivableData } from \"./actions\";\nimport { convertDecimalNo } from 'utils';\nimport Graphs from \"./graphs\";\nimport Paylist from \"./paylist\";\n\nconst range = {\n  Today: 1,\n  \"Next 7 Days\": 7,\n  \"Next 30 Days\": 30,\n  \"Past 7 Days\": 7,\n  \"Past 30 Days\": 30\n};\n\nconst getCalculatedDates = () => {\n  const defaultRange = fe_config.MODE === \"DEV\" ? \"Next 7 Days\" : \"Next 30 Days\";\n  const range = localStorage.getItem(\"dashboardrange\") || defaultRange;\n  switch (range) {\n    case \"Today\":\n      return {\n        startDate: moment().format(\"MM/DD/YYYY\"),\n        endDate: moment().format(\"MM/DD/YYYY\")\n      };\n\n    case \"Next 30 Days\":\n      return {\n        startDate: moment().format(\"MM/DD/YYYY\"),\n        endDate: moment()\n          .add(30, \"days\")\n          .format(\"MM/DD/YYYY\")\n      };\n\n    case \"Next 7 Days\":\n      return {\n        startDate: moment().format(\"MM/DD/YYYY\"),\n        endDate: moment()\n          .add(7, \"days\")\n          .format(\"MM/DD/YYYY\")\n      };\n\n    case \"Past 7 Days\":\n      return {\n        startDate: moment()\n          .subtract(7, \"days\")\n          .format(\"MM/DD/YYYY\"),\n        endDate: moment().format(\"MM/DD/YYYY\")\n      };\n\n    case \"Past 30 Days\":\n      return {\n        startDate: moment()\n          .subtract(30, \"days\")\n          .format(\"MM/DD/YYYY\"),\n        endDate: moment().format(\"MM/DD/YYYY\")\n      };\n\n    default:\n      return {\n        endDate: moment()\n          .add(30, \"days\")\n          .format(\"MM/DD/YYYY\"),\n        startDate: moment().format(\"MM/DD/YYYY\")\n      };\n  }\n};\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.storageChange = this.storageChange.bind(this);\n    this.state = {\n      ...getCalculatedDates(),\n      interval: 30,\n      toggleExpand: false,\n    };\n  }\n\n  componentDidMount() {\n    document.title = \"Dashboard - Payference\";\n    this.setState({ ...getCalculatedDates() });\n    document.body.classList.add('overflow-hidden');\n    window.scrollTo(0, 0);\n    window.addEventListener(\"storage\", this.storageChange);\n  }\n\n  componentWillUnmount() {\n    document.body.classList.remove('overflow-hidden');\n    window.removeEventListener(\"storage\", () => {});\n  }\n\n  storageChange = (event) => {\n    if (event.key === \"dashboardrange\" && event.newValue === \"\") {\n      const updatedState = {\n        ...getCalculatedDates(),\n      }\n      this.setState(updatedState);\n    }\n  }\n\n  toggleExpandCollapse = (toggleExpand) => {\n    this.setState({\n      toggleExpand,\n    });\n  }\n\n  ExportXLSX = () => {\n    const {payablesData, receivablesData } = this.props;\n    const filename = `dashboard${moment().format(\"MMMM Do YYYY-h:mm:ss-a\")}.xlsx`;\n    const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const ws2 = XLSX.utils.json_to_sheet(this.ExportCSV(payablesData, \"payable\"));\n    const ws3 = XLSX.utils.json_to_sheet(this.ExportCSV(receivablesData, \"\"));\n    const wb = {\n      Sheets: { Payables: ws2, Receivables: ws3},\n      SheetNames: [\"Payables\", \"Receivables\"]\n    };\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    const data = new Blob([excelBuffer], { type: fileType });\n    FileSaver.saveAs(data, filename);\n  };\n\n  ExportCSV = (data, key) => {\n    if (key === \"payable\") {\n      const csvData = data.map(element => ({\n        Supplier: get(element, \"supplier.name\", \"\"),\n        InvoiceNo: get(element, \"invoice_number\", \"\"),\n        DueDate: moment(get(element, \"due_date\", \"\")).format(\"MM/DD/YYYY\"),\n        Recommendation: get(element, \"recommendation\", \"\"),\n        InvoiceDate: moment(get(element, \"invoice_date\", \"\")).format(\"MM/DD/YYYY\"),\n        AmountDue: convertDecimalNo(get(element, \"total_amount_due\", 0))\n      }));\n      return csvData;\n    }\n    const csvData = data.map(element => ({\n      CustomerName: get(element, \"customer.name\", \"\"),\n      InvoiceNo: get(element, \"invoice_number\", \"\"),\n      DueDate: moment(get(element, \"due_date\", \"\")).format(\"MM/DD/YYYY\"),\n      AmountDue: convertDecimalNo(get(element, \"total_amount_due\", 0)),\n      InvoiceDate: moment(get(element, \"invoice_date\", \"\")).format(\"MM/DD/YYYY\"),\n      Status: get(element, \"status\", \"\")\n    }));\n    return csvData;\n  };\n\n  getDates = (startDate, endDate, interval) => {\n    const sd = moment(startDate).format(\"MM/DD/YYYY\");\n    const ed = moment(endDate).format(\"MM/DD/YYYY\");\n    this.setState(\n      {\n        startDate: null,\n        endDate: null,\n        interval: range[interval || 30]\n      },\n      () => {\n        this.setState({\n          startDate: sd,\n          endDate: ed\n        });\n        this.props.getPayableData(sd, ed);\n        this.props.getReceivableData(sd, ed);\n      }\n    );\n    localStorage.setItem(\"dashboardrange\", interval);\n  };\n\n  render() {\n    const { startDate, endDate, interval, toggleExpand } = this.state;\n    const { payablesData, receivablesData, history, getPayableData, getReceivableData, isFetching } = this.props;\n    return (\n      <div className=\"row px-15\" id=\"dashboardBody\">\n        <Graphs\n          {...this.props}\n          startDate={startDate}\n          endDate={endDate}\n          getDates={this.getDates}\n          exportExcel={this.ExportXLSX}\n          exportCsv={this.ExportXLSX}\n          expand={toggleExpand}\n          handleExpand={this.toggleExpandCollapse}\n        />\n        <Paylist\n          expand={!toggleExpand}\n          endDate={endDate}\n          history={history}\n          interval={interval}\n          startDate={startDate}\n          isFetching={isFetching}\n          payablesData={payablesData}\n          handleExpand={this.toggleExpandCollapse}\n          getPayableData={getPayableData}\n          receivablesData={receivablesData}\n          getReceivableData={getReceivableData}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isFetching: state.dashboard.isFetching,\n  payablesData: state.dashboard.payablesData,\n  receivablesData: state.dashboard.receivablesData,\n});\n\nconst mapDispatchToProps = {\n  getPayableData,\n  getReceivableData\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n"],"sourceRoot":""}